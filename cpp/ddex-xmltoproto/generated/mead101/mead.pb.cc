// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ddex-xmltoproto/generated/mead101/mead.proto

#include "ddex-xmltoproto/generated/mead101/mead.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArtistType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinaryDataType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClassifiedGenre_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommentaryNoteType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DanceAndRhythmStyle_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EncodingType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Form_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstrumentType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LyricsType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageControlType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetadataSourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoodType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Period_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordingPartType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelatedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RootChordNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RootChordQuality_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubGenre_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tempo_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TerritoryCodeType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TerritoryCodeTypeIncludingDeprecatedCodes_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextType_ATOM_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Theme_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TitleType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitOfCuePoints_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitOfDuration_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VocalRegister_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AbsolutePitch_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AlternativeTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Annotation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ArtistType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArtistTypeValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ArtisticInfluence_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Award_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_AwardForParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BeatsPerMinute_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Biography_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BiographyText_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CatalogNumber_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Category_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ChartEntry_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChartName_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ChildWorkHierarchy_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClassicalPeriod_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CommentaryNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommentaryNoteType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Content_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DanceAndRhythmStyle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DanceAndRhythmStyleValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Date_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DateTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DerivedRecording_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetailedHashSum_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetailedPartyId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DisplayArtistNameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DisplaySubTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Duration_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<12> scc_info_Entry_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Epoch_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EventDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventDateTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_File_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Flag_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_FocusTrack_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Form_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FormValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Generator_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GenreCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenreCategoryValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Harmony_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_HarmonyModulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_HistoricChartingInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_HistoricChartingInformationForParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Icon_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Id_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Image_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Instrument_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InstrumentUsed_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InstrumentValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Link_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_LocationAndDateOfSession_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Logo_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Lyrics_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LyricsText_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageAuditTrail_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageAuditTrailEvent_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MessageHeader_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessagingPartyWithoutCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MetadataSource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetadataSourceList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetadataSourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Meter_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Mode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Modulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Mood_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoodValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Name_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NameWithPronunciationAndScriptCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Party_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PartyDescriptor_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_PartyInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyName_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PartyNameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PartyNameWithTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyNameWithoutCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PartyWithNames_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PartyWithRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Period_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PeriodValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeriodWithTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Person_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Pronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pseudonym_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RecordingPart_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecordingPartType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RelatedCreation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RelatedResource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelatedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RelatedWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Release_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_ReleaseInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReleaseInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReleaseSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReleaseTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Resource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResourceContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResourceId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<30> scc_info_ResourceInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResourceInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResourceRelationship_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResourceRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ResourceSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RootChordNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RootChordQuality_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Sample_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SampleFeature_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SessionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimilarParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimilarRelease_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimilarResource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimilarWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Source_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubGenreCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubGenreCategoryValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tempo_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TempoValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Text_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TextWithFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TextWithoutTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Theme_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ThemeValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TimeSignature_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TimeSignatureModulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timing_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TitleTextWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TitleWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_URI_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Usage_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsagePeriod_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsedMusicalWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Venue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VocalRegister_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VocalRegisterValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Work_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_WorkHierarchy_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<21> scc_info_WorkInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WorkSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
namespace mead101 {
namespace mead {
class AbsolutePitchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AbsolutePitch> _instance;
} _AbsolutePitch_default_instance_;
class AllTerritoryCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllTerritoryCode> _instance;
} _AllTerritoryCode_default_instance_;
class AlternativeTitleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlternativeTitle> _instance;
} _AlternativeTitle_default_instance_;
class AnnotationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Annotation> _instance;
} _Annotation_default_instance_;
class ArtistTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArtistType> _instance;
} _ArtistType_default_instance_;
class ArtistTypeValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArtistTypeValue> _instance;
} _ArtistTypeValue_default_instance_;
class ArtisticInfluenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArtisticInfluence> _instance;
} _ArtisticInfluence_default_instance_;
class AwardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Award> _instance;
} _Award_default_instance_;
class AwardForPartyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AwardForParty> _instance;
} _AwardForParty_default_instance_;
class BeatsPerMinuteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BeatsPerMinute> _instance;
} _BeatsPerMinute_default_instance_;
class BiographyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Biography> _instance;
} _Biography_default_instance_;
class BiographyTextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BiographyText> _instance;
} _BiographyText_default_instance_;
class CatalogNumberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CatalogNumber> _instance;
} _CatalogNumber_default_instance_;
class CategoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Category> _instance;
} _Category_default_instance_;
class ChartEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChartEntry> _instance;
} _ChartEntry_default_instance_;
class ChartNameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChartName> _instance;
} _ChartName_default_instance_;
class ChildWorkHierarchyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChildWorkHierarchy> _instance;
} _ChildWorkHierarchy_default_instance_;
class ClassicalPeriodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassicalPeriod> _instance;
} _ClassicalPeriod_default_instance_;
class CommentaryNoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommentaryNote> _instance;
} _CommentaryNote_default_instance_;
class CommentaryNoteTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommentaryNoteType> _instance;
} _CommentaryNoteType_default_instance_;
class ContentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Content> _instance;
} _Content_default_instance_;
class CurrentTerritoryCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CurrentTerritoryCode> _instance;
} _CurrentTerritoryCode_default_instance_;
class DanceAndRhythmStyleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DanceAndRhythmStyle> _instance;
} _DanceAndRhythmStyle_default_instance_;
class DanceAndRhythmStyleValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DanceAndRhythmStyleValue> _instance;
} _DanceAndRhythmStyleValue_default_instance_;
class DateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Date> _instance;
} _Date_default_instance_;
class DateTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DateTime> _instance;
} _DateTime_default_instance_;
class DerivedRecordingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DerivedRecording> _instance;
} _DerivedRecording_default_instance_;
class DetailedHashSumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetailedHashSum> _instance;
} _DetailedHashSum_default_instance_;
class DetailedPartyIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetailedPartyId> _instance;
} _DetailedPartyId_default_instance_;
class DisplayArtistDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisplayArtist> _instance;
} _DisplayArtist_default_instance_;
class DisplayArtistNameWithDefaultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisplayArtistNameWithDefault> _instance;
} _DisplayArtistNameWithDefault_default_instance_;
class DisplayArtistNameWithPronunciationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisplayArtistNameWithPronunciation> _instance;
} _DisplayArtistNameWithPronunciation_default_instance_;
class DisplaySubTitleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisplaySubTitle> _instance;
} _DisplaySubTitle_default_instance_;
class DisplayTitleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisplayTitle> _instance;
} _DisplayTitle_default_instance_;
class DurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Duration> _instance;
} _Duration_default_instance_;
class EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Entry> _instance;
} _Entry_default_instance_;
class EpochDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Epoch> _instance;
} _Epoch_default_instance_;
class EventDateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventDate> _instance;
} _EventDate_default_instance_;
class EventDateTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventDateTime> _instance;
} _EventDateTime_default_instance_;
class EventDateWithoutFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventDateWithoutFlags> _instance;
} _EventDateWithoutFlags_default_instance_;
class FeedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Feed> _instance;
} _Feed_default_instance_;
class FileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<File> _instance;
} _File_default_instance_;
class FlagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Flag> _instance;
} _Flag_default_instance_;
class FocusTrackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FocusTrack> _instance;
} _FocusTrack_default_instance_;
class FormDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Form> _instance;
} _Form_default_instance_;
class FormValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FormValue> _instance;
} _FormValue_default_instance_;
class GeneratorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Generator> _instance;
} _Generator_default_instance_;
class GenreCategoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenreCategory> _instance;
} _GenreCategory_default_instance_;
class GenreCategoryValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenreCategoryValue> _instance;
} _GenreCategoryValue_default_instance_;
class HarmonyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Harmony> _instance;
} _Harmony_default_instance_;
class HarmonyModulationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HarmonyModulation> _instance;
} _HarmonyModulation_default_instance_;
class HashSumAlgorithmTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HashSumAlgorithmType> _instance;
} _HashSumAlgorithmType_default_instance_;
class HistoricChartingInformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistoricChartingInformation> _instance;
} _HistoricChartingInformation_default_instance_;
class HistoricChartingInformationForPartyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistoricChartingInformationForParty> _instance;
} _HistoricChartingInformationForParty_default_instance_;
class IconDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Icon> _instance;
} _Icon_default_instance_;
class IdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Id> _instance;
} _Id_default_instance_;
class ImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Image> _instance;
} _Image_default_instance_;
class ImageTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageType> _instance;
} _ImageType_default_instance_;
class InstrumentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Instrument> _instance;
} _Instrument_default_instance_;
class InstrumentUsedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrumentUsed> _instance;
} _InstrumentUsed_default_instance_;
class InstrumentValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrumentValue> _instance;
} _InstrumentValue_default_instance_;
class LinkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Link> _instance;
} _Link_default_instance_;
class LocationAndDateOfSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocationAndDateOfSession> _instance;
} _LocationAndDateOfSession_default_instance_;
class LogoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Logo> _instance;
} _Logo_default_instance_;
class LyricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lyrics> _instance;
} _Lyrics_default_instance_;
class LyricsTextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LyricsText> _instance;
} _LyricsText_default_instance_;
class MeadMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeadMessage> _instance;
} _MeadMessage_default_instance_;
class MessageAuditTrailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageAuditTrail> _instance;
} _MessageAuditTrail_default_instance_;
class MessageAuditTrailEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageAuditTrailEvent> _instance;
} _MessageAuditTrailEvent_default_instance_;
class MessageHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageHeader> _instance;
} _MessageHeader_default_instance_;
class MessagingPartyWithoutCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessagingPartyWithoutCode> _instance;
} _MessagingPartyWithoutCode_default_instance_;
class MetadataSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetadataSource> _instance;
} _MetadataSource_default_instance_;
class MetadataSourceListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetadataSourceList> _instance;
} _MetadataSourceList_default_instance_;
class MetadataSourceTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetadataSourceType> _instance;
} _MetadataSourceType_default_instance_;
class MeterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Meter> _instance;
} _Meter_default_instance_;
class ModeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mode> _instance;
} _Mode_default_instance_;
class ModulationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Modulation> _instance;
} _Modulation_default_instance_;
class MoodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mood> _instance;
} _Mood_default_instance_;
class MoodValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoodValue> _instance;
} _MoodValue_default_instance_;
class MusicalWorkIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MusicalWorkId> _instance;
} _MusicalWorkId_default_instance_;
class NameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Name> _instance;
} _Name_default_instance_;
class NameWithPronunciationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NameWithPronunciation> _instance;
} _NameWithPronunciation_default_instance_;
class NameWithPronunciationAndScriptCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NameWithPronunciationAndScriptCode> _instance;
} _NameWithPronunciationAndScriptCode_default_instance_;
class PartyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Party> _instance;
} _Party_default_instance_;
class PartyDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyDescriptor> _instance;
} _PartyDescriptor_default_instance_;
class PartyInformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyInformation> _instance;
} _PartyInformation_default_instance_;
class PartyInformationListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyInformationList> _instance;
} _PartyInformationList_default_instance_;
class PartyNameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyName> _instance;
} _PartyName_default_instance_;
class PartyNameWithPronunciationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyNameWithPronunciation> _instance;
} _PartyNameWithPronunciation_default_instance_;
class PartyNameWithTerritoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyNameWithTerritory> _instance;
} _PartyNameWithTerritory_default_instance_;
class PartyNameWithoutCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyNameWithoutCode> _instance;
} _PartyNameWithoutCode_default_instance_;
class PartyWithNamesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyWithNames> _instance;
} _PartyWithNames_default_instance_;
class PartyWithRoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyWithRole> _instance;
} _PartyWithRole_default_instance_;
class PeriodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Period> _instance;
} _Period_default_instance_;
class PeriodValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeriodValue> _instance;
} _PeriodValue_default_instance_;
class PeriodWithTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeriodWithTime> _instance;
} _PeriodWithTime_default_instance_;
class PersonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Person> _instance;
} _Person_default_instance_;
class PronunciationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pronunciation> _instance;
} _Pronunciation_default_instance_;
class ProprietaryIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProprietaryId> _instance;
} _ProprietaryId_default_instance_;
class PseudonymDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pseudonym> _instance;
} _Pseudonym_default_instance_;
class RecordingPartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordingPart> _instance;
} _RecordingPart_default_instance_;
class RecordingPartTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordingPartType> _instance;
} _RecordingPartType_default_instance_;
class RelatedCreationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelatedCreation> _instance;
} _RelatedCreation_default_instance_;
class RelatedResourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelatedResource> _instance;
} _RelatedResource_default_instance_;
class RelatedResourceTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelatedResourceType> _instance;
} _RelatedResourceType_default_instance_;
class RelatedWorkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelatedWork> _instance;
} _RelatedWork_default_instance_;
class ReleaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Release> _instance;
} _Release_default_instance_;
class ReleaseIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseId> _instance;
} _ReleaseId_default_instance_;
class ReleaseInformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseInformation> _instance;
} _ReleaseInformation_default_instance_;
class ReleaseInformationListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseInformationList> _instance;
} _ReleaseInformationList_default_instance_;
class ReleaseSummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseSummary> _instance;
} _ReleaseSummary_default_instance_;
class ReleaseTitleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseTitle> _instance;
} _ReleaseTitle_default_instance_;
class ResourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Resource> _instance;
} _Resource_default_instance_;
class ResourceContributorRoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceContributorRole> _instance;
} _ResourceContributorRole_default_instance_;
class ResourceIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceId> _instance;
} _ResourceId_default_instance_;
class ResourceInformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceInformation> _instance;
} _ResourceInformation_default_instance_;
class ResourceInformationListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceInformationList> _instance;
} _ResourceInformationList_default_instance_;
class ResourceRelationshipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceRelationship> _instance;
} _ResourceRelationship_default_instance_;
class ResourceRelationshipTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceRelationshipType> _instance;
} _ResourceRelationshipType_default_instance_;
class ResourceSummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceSummary> _instance;
} _ResourceSummary_default_instance_;
class ResourceTitleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceTitle> _instance;
} _ResourceTitle_default_instance_;
class RootChordNoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RootChordNote> _instance;
} _RootChordNote_default_instance_;
class RootChordQualityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RootChordQuality> _instance;
} _RootChordQuality_default_instance_;
class SampleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sample> _instance;
} _Sample_default_instance_;
class SampleFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SampleFeature> _instance;
} _SampleFeature_default_instance_;
class SessionTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionType> _instance;
} _SessionType_default_instance_;
class SimilarPartyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimilarParty> _instance;
} _SimilarParty_default_instance_;
class SimilarReleaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimilarRelease> _instance;
} _SimilarRelease_default_instance_;
class SimilarResourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimilarResource> _instance;
} _SimilarResource_default_instance_;
class SimilarWorkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimilarWork> _instance;
} _SimilarWork_default_instance_;
class SourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Source> _instance;
} _Source_default_instance_;
class SubGenreCategoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubGenreCategory> _instance;
} _SubGenreCategory_default_instance_;
class SubGenreCategoryValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubGenreCategoryValue> _instance;
} _SubGenreCategoryValue_default_instance_;
class TempoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tempo> _instance;
} _Tempo_default_instance_;
class TempoValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TempoValue> _instance;
} _TempoValue_default_instance_;
class TextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Text> _instance;
} _Text_default_instance_;
class TextWithFormatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextWithFormat> _instance;
} _TextWithFormat_default_instance_;
class TextWithoutTerritoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextWithoutTerritory> _instance;
} _TextWithoutTerritory_default_instance_;
class ThemeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Theme> _instance;
} _Theme_default_instance_;
class ThemeValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThemeValue> _instance;
} _ThemeValue_default_instance_;
class TimeSignatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeSignature> _instance;
} _TimeSignature_default_instance_;
class TimeSignatureModulationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeSignatureModulation> _instance;
} _TimeSignatureModulation_default_instance_;
class TimingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Timing> _instance;
} _Timing_default_instance_;
class TitleTextWithPronunciationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TitleTextWithPronunciation> _instance;
} _TitleTextWithPronunciation_default_instance_;
class TitleWithPronunciationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TitleWithPronunciation> _instance;
} _TitleWithPronunciation_default_instance_;
class URIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<URI> _instance;
} _URI_default_instance_;
class UsageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Usage> _instance;
} _Usage_default_instance_;
class UsagePeriodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsagePeriod> _instance;
} _UsagePeriod_default_instance_;
class UsedMusicalWorkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsedMusicalWork> _instance;
} _UsedMusicalWork_default_instance_;
class VenueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Venue> _instance;
} _Venue_default_instance_;
class VocalRegisterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VocalRegister> _instance;
} _VocalRegister_default_instance_;
class VocalRegisterValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VocalRegisterValue> _instance;
} _VocalRegisterValue_default_instance_;
class WorkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Work> _instance;
} _Work_default_instance_;
class WorkHierarchyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkHierarchy> _instance;
} _WorkHierarchy_default_instance_;
class WorkInformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkInformation> _instance;
} _WorkInformation_default_instance_;
class WorkInformationListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkInformationList> _instance;
} _WorkInformationList_default_instance_;
class WorkRelationshipTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkRelationshipType> _instance;
} _WorkRelationshipType_default_instance_;
class WorkSummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkSummary> _instance;
} _WorkSummary_default_instance_;
class WorkTitleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkTitle> _instance;
} _WorkTitle_default_instance_;
class ddex_IsoDateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ddex_IsoDate> _instance;
} _ddex_IsoDate_default_instance_;
}  // namespace mead
}  // namespace mead101
static void InitDefaultsscc_info_AbsolutePitch_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_AbsolutePitch_default_instance_;
    new (ptr) ::mead101::mead::AbsolutePitch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::AbsolutePitch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AbsolutePitch_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AbsolutePitch_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_AllTerritoryCode_default_instance_;
    new (ptr) ::mead101::mead::AllTerritoryCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::AllTerritoryCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_TerritoryCodeTypeIncludingDeprecatedCodes_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_AlternativeTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_AlternativeTitle_default_instance_;
    new (ptr) ::mead101::mead::AlternativeTitle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::AlternativeTitle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AlternativeTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AlternativeTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_TitleTextWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_TitleType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Annotation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Annotation_default_instance_;
    new (ptr) ::mead101::mead::Annotation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Annotation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Annotation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Annotation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_TextWithFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_ArtistType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ArtistType_default_instance_;
    new (ptr) ::mead101::mead::ArtistType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ArtistType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ArtistType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ArtistType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_ArtistTypeValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_ArtistTypeValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ArtistTypeValue_default_instance_;
    new (ptr) ::mead101::mead::ArtistTypeValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ArtistTypeValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArtistTypeValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ArtistTypeValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_ArtistType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_ArtisticInfluence_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ArtisticInfluence_default_instance_;
    new (ptr) ::mead101::mead::ArtisticInfluence();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ArtisticInfluence::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ArtisticInfluence_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_ArtisticInfluence_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_TextWithFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_PartyWithNames_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Release_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Resource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Work_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_Award_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Award_default_instance_;
    new (ptr) ::mead101::mead::Award();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Award::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Award_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Award_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_NameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_PartyWithNames_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_PartyDescriptor_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_TextWithFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_EventDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_AwardForParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_AwardForParty_default_instance_;
    new (ptr) ::mead101::mead::AwardForParty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::AwardForParty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_AwardForParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_AwardForParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_NameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_PartyWithNames_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Release_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Resource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Work_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_PartyDescriptor_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_TextWithFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_EventDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_BeatsPerMinute_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_BeatsPerMinute_default_instance_;
    new (ptr) ::mead101::mead::BeatsPerMinute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::BeatsPerMinute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BeatsPerMinute_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BeatsPerMinute_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Modulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_Biography_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Biography_default_instance_;
    new (ptr) ::mead101::mead::Biography();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Biography::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Biography_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Biography_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_PartyWithNames_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_BiographyText_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_BiographyText_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_BiographyText_default_instance_;
    new (ptr) ::mead101::mead::BiographyText();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::BiographyText::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BiographyText_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BiographyText_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_TextCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_CatalogNumber_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_CatalogNumber_default_instance_;
    new (ptr) ::mead101::mead::CatalogNumber();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::CatalogNumber::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CatalogNumber_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CatalogNumber_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_Category_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Category_default_instance_;
    new (ptr) ::mead101::mead::Category();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Category::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Category_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Category_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_ChartEntry_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ChartEntry_default_instance_;
    new (ptr) ::mead101::mead::ChartEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ChartEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ChartEntry_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ChartEntry_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_TextWithFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Duration_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_ChartName_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ChartName_default_instance_;
    new (ptr) ::mead101::mead::ChartName();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ChartName::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChartName_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChartName_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Pronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_ChildWorkHierarchy_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ChildWorkHierarchy_default_instance_;
    new (ptr) ::mead101::mead::ChildWorkHierarchy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ChildWorkHierarchy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ChildWorkHierarchy_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ChildWorkHierarchy_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Form_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_WorkTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_ClassicalPeriod_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ClassicalPeriod_default_instance_;
    new (ptr) ::mead101::mead::ClassicalPeriod();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ClassicalPeriod::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClassicalPeriod_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ClassicalPeriod_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_PeriodValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_CommentaryNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_CommentaryNote_default_instance_;
    new (ptr) ::mead101::mead::CommentaryNote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::CommentaryNote::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CommentaryNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_CommentaryNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_PartyWithNames_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_CommentaryNoteType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_TextWithoutTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_CommentaryNoteType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_CommentaryNoteType_default_instance_;
    new (ptr) ::mead101::mead::CommentaryNoteType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::CommentaryNoteType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommentaryNoteType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CommentaryNoteType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_CommentaryNoteType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Content_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Content_default_instance_;
    new (ptr) ::mead101::mead::Content();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Content::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Content_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Content_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_CurrentTerritoryCode_default_instance_;
    new (ptr) ::mead101::mead::CurrentTerritoryCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::CurrentTerritoryCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_TerritoryCodeType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_DanceAndRhythmStyle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_DanceAndRhythmStyle_default_instance_;
    new (ptr) ::mead101::mead::DanceAndRhythmStyle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::DanceAndRhythmStyle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DanceAndRhythmStyle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DanceAndRhythmStyle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_TextWithoutTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_DanceAndRhythmStyleValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_DanceAndRhythmStyleValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_DanceAndRhythmStyleValue_default_instance_;
    new (ptr) ::mead101::mead::DanceAndRhythmStyleValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::DanceAndRhythmStyleValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DanceAndRhythmStyleValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DanceAndRhythmStyleValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_DanceAndRhythmStyle_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Date_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Date_default_instance_;
    new (ptr) ::mead101::mead::Date();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Date::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Date_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Date_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_DateTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_DateTime_default_instance_;
    new (ptr) ::mead101::mead::DateTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::DateTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DateTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DateTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_DerivedRecording_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_DerivedRecording_default_instance_;
    new (ptr) ::mead101::mead::DerivedRecording();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::DerivedRecording::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DerivedRecording_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_DerivedRecording_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_RelatedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ResourceId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_TitleWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_DetailedHashSum_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_DetailedHashSum_default_instance_;
    new (ptr) ::mead101::mead::DetailedHashSum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::DetailedHashSum::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetailedHashSum_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DetailedHashSum_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_BinaryDataType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_DetailedPartyId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_DetailedPartyId_default_instance_;
    new (ptr) ::mead101::mead::DetailedPartyId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::DetailedPartyId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetailedPartyId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DetailedPartyId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_DisplayArtist_default_instance_;
    new (ptr) ::mead101::mead::DisplayArtist();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::DisplayArtist::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_DisplayArtistNameWithDefault_default_instance_;
    new (ptr) ::mead101::mead::DisplayArtistNameWithDefault();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::DisplayArtistNameWithDefault::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_DisplayArtistNameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_DisplayArtistNameWithPronunciation_default_instance_;
    new (ptr) ::mead101::mead::DisplayArtistNameWithPronunciation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::DisplayArtistNameWithPronunciation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DisplayArtistNameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DisplayArtistNameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Pronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_DisplaySubTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_DisplaySubTitle_default_instance_;
    new (ptr) ::mead101::mead::DisplaySubTitle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::DisplaySubTitle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DisplaySubTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DisplaySubTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Pronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_DisplayTitle_default_instance_;
    new (ptr) ::mead101::mead::DisplayTitle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::DisplayTitle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_DisplaySubTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_TitleTextWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_Duration_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Duration_default_instance_;
    new (ptr) ::mead101::mead::Duration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Duration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Duration_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Duration_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_UnitOfDuration_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Entry_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Entry_default_instance_;
    new (ptr) ::mead101::mead::Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<12> scc_info_Entry_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 12, 0, InitDefaultsscc_info_Entry_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Party_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Release_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Resource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Work_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Person_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Category_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Content_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Id_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Link_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_DateTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Text_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Source_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_Epoch_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Epoch_default_instance_;
    new (ptr) ::mead101::mead::Epoch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Epoch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Epoch_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Epoch_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_Date_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_PartyWithNames_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_RelatedCreation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Name_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_EventDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_EventDate_default_instance_;
    new (ptr) ::mead101::mead::EventDate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::EventDate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EventDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EventDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_EventDateTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_EventDateTime_default_instance_;
    new (ptr) ::mead101::mead::EventDateTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::EventDateTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventDateTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EventDateTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_EventDateWithoutFlags_default_instance_;
    new (ptr) ::mead101::mead::EventDateWithoutFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::EventDateWithoutFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_Feed_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Feed_default_instance_;
    new (ptr) ::mead101::mead::Feed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Feed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_Feed_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_Feed_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Person_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Category_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Entry_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Generator_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Icon_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Id_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Link_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Logo_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Text_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_DateTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_File_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_File_default_instance_;
    new (ptr) ::mead101::mead::File();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::File::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_File_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_File_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_DetailedHashSum_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_Flag_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Flag_default_instance_;
    new (ptr) ::mead101::mead::Flag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Flag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Flag_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Flag_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_FocusTrack_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_FocusTrack_default_instance_;
    new (ptr) ::mead101::mead::FocusTrack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::FocusTrack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_FocusTrack_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_FocusTrack_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_TextWithoutTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_DisplayArtistNameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_PeriodWithTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ResourceId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_TitleWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_Form_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Form_default_instance_;
    new (ptr) ::mead101::mead::Form();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Form::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Form_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Form_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_FormValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_FormValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_FormValue_default_instance_;
    new (ptr) ::mead101::mead::FormValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::FormValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FormValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FormValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Form_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Generator_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Generator_default_instance_;
    new (ptr) ::mead101::mead::Generator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Generator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Generator_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Generator_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_GenreCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_GenreCategory_default_instance_;
    new (ptr) ::mead101::mead::GenreCategory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::GenreCategory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GenreCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GenreCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_TextWithoutTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_GenreCategoryValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_GenreCategoryValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_GenreCategoryValue_default_instance_;
    new (ptr) ::mead101::mead::GenreCategoryValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::GenreCategoryValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenreCategoryValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GenreCategoryValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_ClassifiedGenre_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Harmony_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Harmony_default_instance_;
    new (ptr) ::mead101::mead::Harmony();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Harmony::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Harmony_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Harmony_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Mode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_HarmonyModulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_RootChordNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_RootChordQuality_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_HarmonyModulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_HarmonyModulation_default_instance_;
    new (ptr) ::mead101::mead::HarmonyModulation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::HarmonyModulation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_HarmonyModulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_HarmonyModulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Mode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_RootChordNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_RootChordQuality_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_HashSumAlgorithmType_default_instance_;
    new (ptr) ::mead101::mead::HashSumAlgorithmType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::HashSumAlgorithmType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_HistoricChartingInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_HistoricChartingInformation_default_instance_;
    new (ptr) ::mead101::mead::HistoricChartingInformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::HistoricChartingInformation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_HistoricChartingInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_HistoricChartingInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_ChartEntry_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ChartName_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_TextWithFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Duration_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_HistoricChartingInformationForParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_HistoricChartingInformationForParty_default_instance_;
    new (ptr) ::mead101::mead::HistoricChartingInformationForParty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::HistoricChartingInformationForParty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_HistoricChartingInformationForParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_HistoricChartingInformationForParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_ChartEntry_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ChartName_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Release_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Resource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Work_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_TextWithFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Duration_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_Icon_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Icon_default_instance_;
    new (ptr) ::mead101::mead::Icon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Icon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Icon_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Icon_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_Id_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Id_default_instance_;
    new (ptr) ::mead101::mead::Id();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Id::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Id_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Id_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_Image_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Image_default_instance_;
    new (ptr) ::mead101::mead::Image();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Image::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Image_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Image_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_File_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ImageType_default_instance_;
    new (ptr) ::mead101::mead::ImageType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ImageType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Instrument_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Instrument_default_instance_;
    new (ptr) ::mead101::mead::Instrument();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Instrument::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Instrument_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Instrument_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_InstrumentValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_InstrumentUsed_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_InstrumentUsed_default_instance_;
    new (ptr) ::mead101::mead::InstrumentUsed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::InstrumentUsed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InstrumentUsed_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InstrumentUsed_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_InstrumentValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_InstrumentValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_InstrumentValue_default_instance_;
    new (ptr) ::mead101::mead::InstrumentValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::InstrumentValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InstrumentValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InstrumentValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_InstrumentType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Link_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Link_default_instance_;
    new (ptr) ::mead101::mead::Link();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Link::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Link_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Link_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_LocationAndDateOfSession_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_LocationAndDateOfSession_default_instance_;
    new (ptr) ::mead101::mead::LocationAndDateOfSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::LocationAndDateOfSession::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_LocationAndDateOfSession_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_LocationAndDateOfSession_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_TextWithFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_PartyWithRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Period_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_SessionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Venue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_Logo_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Logo_default_instance_;
    new (ptr) ::mead101::mead::Logo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Logo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Logo_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Logo_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_Lyrics_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Lyrics_default_instance_;
    new (ptr) ::mead101::mead::Lyrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Lyrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Lyrics_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Lyrics_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_LyricsType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_Pronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_LyricsText_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_LyricsText_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_LyricsText_default_instance_;
    new (ptr) ::mead101::mead::LyricsText();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::LyricsText::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LyricsText_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LyricsText_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_TextCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_MeadMessage_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_MeadMessage_default_instance_;
    new (ptr) ::mead101::mead::MeadMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::MeadMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_MeadMessage_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_MeadMessage_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_MessageHeader_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_MetadataSourceList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_PartyInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ReleaseInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ResourceInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_WorkInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_MessageAuditTrail_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_MessageAuditTrail_default_instance_;
    new (ptr) ::mead101::mead::MessageAuditTrail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::MessageAuditTrail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageAuditTrail_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageAuditTrail_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_MessageAuditTrailEvent_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_MessageAuditTrailEvent_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_MessageAuditTrailEvent_default_instance_;
    new (ptr) ::mead101::mead::MessageAuditTrailEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::MessageAuditTrailEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageAuditTrailEvent_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageAuditTrailEvent_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_MessagingPartyWithoutCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_MessageHeader_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_MessageHeader_default_instance_;
    new (ptr) ::mead101::mead::MessageHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::MessageHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MessageHeader_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MessageHeader_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_MessageAuditTrail_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_MessageControlType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_MessagingPartyWithoutCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_MessagingPartyWithoutCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_MessagingPartyWithoutCode_default_instance_;
    new (ptr) ::mead101::mead::MessagingPartyWithoutCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::MessagingPartyWithoutCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessagingPartyWithoutCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessagingPartyWithoutCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_PartyNameWithoutCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_MetadataSource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_MetadataSource_default_instance_;
    new (ptr) ::mead101::mead::MetadataSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::MetadataSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MetadataSource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MetadataSource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_MetadataSourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_DetailedPartyId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_PartyNameWithTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_MetadataSourceList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_MetadataSourceList_default_instance_;
    new (ptr) ::mead101::mead::MetadataSourceList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::MetadataSourceList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetadataSourceList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MetadataSourceList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_MetadataSource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_MetadataSourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_MetadataSourceType_default_instance_;
    new (ptr) ::mead101::mead::MetadataSourceType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::MetadataSourceType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetadataSourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MetadataSourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_MetadataSourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Meter_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Meter_default_instance_;
    new (ptr) ::mead101::mead::Meter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Meter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Meter_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Meter_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_Mode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Mode_default_instance_;
    new (ptr) ::mead101::mead::Mode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Mode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Mode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Mode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Mode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Modulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Modulation_default_instance_;
    new (ptr) ::mead101::mead::Modulation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Modulation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Modulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Modulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_Mood_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Mood_default_instance_;
    new (ptr) ::mead101::mead::Mood();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Mood::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Mood_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Mood_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_TextWithoutTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_MoodValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_MoodValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_MoodValue_default_instance_;
    new (ptr) ::mead101::mead::MoodValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::MoodValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoodValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoodValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_MoodType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_MusicalWorkId_default_instance_;
    new (ptr) ::mead101::mead::MusicalWorkId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::MusicalWorkId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_Name_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Name_default_instance_;
    new (ptr) ::mead101::mead::Name();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Name::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Name_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Name_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_NameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_NameWithPronunciation_default_instance_;
    new (ptr) ::mead101::mead::NameWithPronunciation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::NameWithPronunciation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Pronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_NameWithPronunciationAndScriptCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_NameWithPronunciationAndScriptCode_default_instance_;
    new (ptr) ::mead101::mead::NameWithPronunciationAndScriptCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::NameWithPronunciationAndScriptCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NameWithPronunciationAndScriptCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_NameWithPronunciationAndScriptCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Name_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Pronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_Party_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Party_default_instance_;
    new (ptr) ::mead101::mead::Party();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Party::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Party_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Party_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_PartyDescriptor_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_PartyDescriptor_default_instance_;
    new (ptr) ::mead101::mead::PartyDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::PartyDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PartyDescriptor_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PartyDescriptor_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_DetailedPartyId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_PartyName_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_PartyInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_PartyInformation_default_instance_;
    new (ptr) ::mead101::mead::PartyInformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::PartyInformation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_PartyInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 15, 0, InitDefaultsscc_info_PartyInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_ArtistType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ArtisticInfluence_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_AwardForParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Biography_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ClassicalPeriod_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_CommentaryNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Epoch_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_FocusTrack_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_HistoricChartingInformationForParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Image_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_SimilarParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_PartyWithNames_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Pseudonym_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_RelatedCreation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_VocalRegister_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_PartyInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_PartyInformationList_default_instance_;
    new (ptr) ::mead101::mead::PartyInformationList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::PartyInformationList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartyInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_PartyInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_PartyName_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_PartyName_default_instance_;
    new (ptr) ::mead101::mead::PartyName();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::PartyName::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyName_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartyName_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Name_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_PartyNameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_PartyNameWithPronunciation_default_instance_;
    new (ptr) ::mead101::mead::PartyNameWithPronunciation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::PartyNameWithPronunciation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PartyNameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PartyNameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_NameWithPronunciationAndScriptCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_NameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_PartyNameWithTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_PartyNameWithTerritory_default_instance_;
    new (ptr) ::mead101::mead::PartyNameWithTerritory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::PartyNameWithTerritory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PartyNameWithTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PartyNameWithTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_NameWithPronunciationAndScriptCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_NameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_PartyNameWithoutCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_PartyNameWithoutCode_default_instance_;
    new (ptr) ::mead101::mead::PartyNameWithoutCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::PartyNameWithoutCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyNameWithoutCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PartyNameWithoutCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_PartyWithNames_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_PartyWithNames_default_instance_;
    new (ptr) ::mead101::mead::PartyWithNames();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::PartyWithNames::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PartyWithNames_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PartyWithNames_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_PartyNameWithTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_PartyWithRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_PartyWithRole_default_instance_;
    new (ptr) ::mead101::mead::PartyWithRole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::PartyWithRole::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PartyWithRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PartyWithRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_PartyNameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ResourceContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_Period_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Period_default_instance_;
    new (ptr) ::mead101::mead::Period();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Period::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Period_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Period_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_EventDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_EventDateTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_PeriodValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_PeriodValue_default_instance_;
    new (ptr) ::mead101::mead::PeriodValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::PeriodValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PeriodValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PeriodValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Period_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_PeriodWithTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_PeriodWithTime_default_instance_;
    new (ptr) ::mead101::mead::PeriodWithTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::PeriodWithTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeriodWithTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeriodWithTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_Person_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Person_default_instance_;
    new (ptr) ::mead101::mead::Person();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Person::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Person_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Person_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_URI_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_Pronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Pronunciation_default_instance_;
    new (ptr) ::mead101::mead::Pronunciation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Pronunciation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Pronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Pronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_EncodingType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ProprietaryId_default_instance_;
    new (ptr) ::mead101::mead::ProprietaryId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ProprietaryId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_Pseudonym_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Pseudonym_default_instance_;
    new (ptr) ::mead101::mead::Pseudonym();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Pseudonym::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pseudonym_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Pseudonym_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_PartyNameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_RecordingPart_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_RecordingPart_default_instance_;
    new (ptr) ::mead101::mead::RecordingPart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::RecordingPart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RecordingPart_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_RecordingPart_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Annotation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_RecordingPartType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_UnitOfCuePoints_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_TextWithFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_RecordingPartType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_RecordingPartType_default_instance_;
    new (ptr) ::mead101::mead::RecordingPartType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::RecordingPartType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecordingPartType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RecordingPartType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_RecordingPartType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_RelatedCreation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_RelatedCreation_default_instance_;
    new (ptr) ::mead101::mead::RelatedCreation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::RelatedCreation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RelatedCreation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_RelatedCreation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ResourceId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_TitleWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_RelatedResource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_RelatedResource_default_instance_;
    new (ptr) ::mead101::mead::RelatedResource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::RelatedResource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RelatedResource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RelatedResource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_ResourceId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ResourceRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_RelatedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_RelatedResourceType_default_instance_;
    new (ptr) ::mead101::mead::RelatedResourceType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::RelatedResourceType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelatedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RelatedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_RelatedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_RelatedWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_RelatedWork_default_instance_;
    new (ptr) ::mead101::mead::RelatedWork();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::RelatedWork::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RelatedWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_RelatedWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_WorkRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_WorkTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_PartyWithNames_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_Release_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Release_default_instance_;
    new (ptr) ::mead101::mead::Release();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Release::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Release_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Release_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ReleaseTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ReleaseId_default_instance_;
    new (ptr) ::mead101::mead::ReleaseId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ReleaseId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_CatalogNumber_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_ReleaseInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ReleaseInformation_default_instance_;
    new (ptr) ::mead101::mead::ReleaseInformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ReleaseInformation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_ReleaseInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 15, 0, InitDefaultsscc_info_ReleaseInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_AlternativeTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_ArtisticInfluence_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Award_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_CommentaryNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Epoch_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_GenreCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_HistoricChartingInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Image_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_SimilarRelease_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Mood_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ReleaseSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_SubGenreCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Theme_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_ReleaseInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ReleaseInformationList_default_instance_;
    new (ptr) ::mead101::mead::ReleaseInformationList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ReleaseInformationList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReleaseInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReleaseInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_ReleaseInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_ReleaseSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ReleaseSummary_default_instance_;
    new (ptr) ::mead101::mead::ReleaseSummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ReleaseSummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReleaseSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ReleaseSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_PartyNameWithTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_ReleaseTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ReleaseTitle_default_instance_;
    new (ptr) ::mead101::mead::ReleaseTitle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ReleaseTitle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReleaseTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReleaseTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_Resource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Resource_default_instance_;
    new (ptr) ::mead101::mead::Resource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Resource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Resource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Resource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ResourceTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_ResourceContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ResourceContributorRole_default_instance_;
    new (ptr) ::mead101::mead::ResourceContributorRole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ResourceContributorRole::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResourceContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResourceContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_ResourceContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_ResourceId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ResourceId_default_instance_;
    new (ptr) ::mead101::mead::ResourceId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ResourceId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResourceId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ResourceId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_CatalogNumber_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_ResourceInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ResourceInformation_default_instance_;
    new (ptr) ::mead101::mead::ResourceInformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ResourceInformation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<30> scc_info_ResourceInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 30, 0, InitDefaultsscc_info_ResourceInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_AbsolutePitch_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_AlternativeTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_ArtisticInfluence_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Award_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_BeatsPerMinute_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_CommentaryNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_DanceAndRhythmStyle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Epoch_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_GenreCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Harmony_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_HistoricChartingInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Image_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_InstrumentUsed_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Flag_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_SimilarResource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_LocationAndDateOfSession_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Theme_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Lyrics_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Mood_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_RecordingPart_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ResourceRelationship_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ResourceSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Sample_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_SubGenreCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_TimeSignature_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Usage_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_UsedMusicalWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_VocalRegister_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_ResourceInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ResourceInformationList_default_instance_;
    new (ptr) ::mead101::mead::ResourceInformationList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ResourceInformationList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResourceInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResourceInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_ResourceInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_ResourceRelationship_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ResourceRelationship_default_instance_;
    new (ptr) ::mead101::mead::ResourceRelationship();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ResourceRelationship::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResourceRelationship_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ResourceRelationship_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_RelatedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ResourceId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_TitleWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_ResourceRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ResourceRelationshipType_default_instance_;
    new (ptr) ::mead101::mead::ResourceRelationshipType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ResourceRelationshipType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResourceRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResourceRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_ResourceRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_ResourceSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ResourceSummary_default_instance_;
    new (ptr) ::mead101::mead::ResourceSummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ResourceSummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ResourceSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ResourceSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_PartyNameWithTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ResourceId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_ResourceTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ResourceTitle_default_instance_;
    new (ptr) ::mead101::mead::ResourceTitle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ResourceTitle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResourceTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_RootChordNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_RootChordNote_default_instance_;
    new (ptr) ::mead101::mead::RootChordNote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::RootChordNote::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RootChordNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RootChordNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_RootChordNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_RootChordQuality_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_RootChordQuality_default_instance_;
    new (ptr) ::mead101::mead::RootChordQuality();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::RootChordQuality::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RootChordQuality_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RootChordQuality_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_RootChordQuality_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Sample_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Sample_default_instance_;
    new (ptr) ::mead101::mead::Sample();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Sample::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Sample_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Sample_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_TextWithFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Timing_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ResourceSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_SampleFeature_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_SampleFeature_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_SampleFeature_default_instance_;
    new (ptr) ::mead101::mead::SampleFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::SampleFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SampleFeature_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SampleFeature_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_SessionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_SessionType_default_instance_;
    new (ptr) ::mead101::mead::SessionType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::SessionType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SessionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SessionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_SessionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_SimilarParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_SimilarParty_default_instance_;
    new (ptr) ::mead101::mead::SimilarParty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::SimilarParty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimilarParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SimilarParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Annotation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_PartyWithNames_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_SimilarRelease_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_SimilarRelease_default_instance_;
    new (ptr) ::mead101::mead::SimilarRelease();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::SimilarRelease::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimilarRelease_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SimilarRelease_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Annotation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Release_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_SimilarResource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_SimilarResource_default_instance_;
    new (ptr) ::mead101::mead::SimilarResource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::SimilarResource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimilarResource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SimilarResource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Annotation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Resource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_SimilarWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_SimilarWork_default_instance_;
    new (ptr) ::mead101::mead::SimilarWork();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::SimilarWork::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimilarWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SimilarWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Annotation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Work_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_Source_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Source_default_instance_;
    new (ptr) ::mead101::mead::Source();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Source::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Source_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_Source_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Person_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Category_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Generator_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Icon_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Id_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Link_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Logo_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Text_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_DateTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_SubGenreCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_SubGenreCategory_default_instance_;
    new (ptr) ::mead101::mead::SubGenreCategory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::SubGenreCategory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubGenreCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubGenreCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_SubGenreCategoryValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_SubGenreCategoryValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_SubGenreCategoryValue_default_instance_;
    new (ptr) ::mead101::mead::SubGenreCategoryValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::SubGenreCategoryValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubGenreCategoryValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubGenreCategoryValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_SubGenre_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Tempo_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Tempo_default_instance_;
    new (ptr) ::mead101::mead::Tempo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Tempo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tempo_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Tempo_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_TempoValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_TempoValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_TempoValue_default_instance_;
    new (ptr) ::mead101::mead::TempoValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::TempoValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TempoValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TempoValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Tempo_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Text_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Text_default_instance_;
    new (ptr) ::mead101::mead::Text();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Text::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Text_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Text_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_TextType_ATOM_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_TextWithFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_TextWithFormat_default_instance_;
    new (ptr) ::mead101::mead::TextWithFormat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::TextWithFormat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TextWithFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TextWithFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_TextCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_TextWithoutTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_TextWithoutTerritory_default_instance_;
    new (ptr) ::mead101::mead::TextWithoutTerritory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::TextWithoutTerritory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TextWithoutTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TextWithoutTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_TextCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Theme_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Theme_default_instance_;
    new (ptr) ::mead101::mead::Theme();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Theme::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Theme_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Theme_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
      &scc_info_TextWithoutTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ThemeValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_ThemeValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ThemeValue_default_instance_;
    new (ptr) ::mead101::mead::ThemeValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ThemeValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ThemeValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ThemeValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Theme_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_TimeSignature_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_TimeSignature_default_instance_;
    new (ptr) ::mead101::mead::TimeSignature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::TimeSignature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TimeSignature_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TimeSignature_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Meter_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_TimeSignatureModulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_TempoValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_TimeSignatureModulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_TimeSignatureModulation_default_instance_;
    new (ptr) ::mead101::mead::TimeSignatureModulation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::TimeSignatureModulation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TimeSignatureModulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TimeSignatureModulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Meter_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Tempo_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_Timing_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Timing_default_instance_;
    new (ptr) ::mead101::mead::Timing();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Timing::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timing_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Timing_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_TitleTextWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_TitleTextWithPronunciation_default_instance_;
    new (ptr) ::mead101::mead::TitleTextWithPronunciation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::TitleTextWithPronunciation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TitleTextWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TitleTextWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_Pronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_TitleWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_TitleWithPronunciation_default_instance_;
    new (ptr) ::mead101::mead::TitleWithPronunciation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::TitleWithPronunciation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TitleWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TitleWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_TitleTextWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_TitleType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_URI_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_URI_default_instance_;
    new (ptr) ::mead101::mead::URI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::URI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_URI_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_URI_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_Usage_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Usage_default_instance_;
    new (ptr) ::mead101::mead::Usage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Usage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Usage_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Usage_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_TextWithFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_RelatedResource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_EventDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_UsagePeriod_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_UsagePeriod_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_UsagePeriod_default_instance_;
    new (ptr) ::mead101::mead::UsagePeriod();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::UsagePeriod::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsagePeriod_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsagePeriod_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_UsedMusicalWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_UsedMusicalWork_default_instance_;
    new (ptr) ::mead101::mead::UsedMusicalWork();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::UsedMusicalWork::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsedMusicalWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UsedMusicalWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_Venue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Venue_default_instance_;
    new (ptr) ::mead101::mead::Venue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Venue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Venue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Venue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_VocalRegister_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_VocalRegister_default_instance_;
    new (ptr) ::mead101::mead::VocalRegister();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::VocalRegister::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VocalRegister_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VocalRegister_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_VocalRegisterValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_VocalRegisterValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_VocalRegisterValue_default_instance_;
    new (ptr) ::mead101::mead::VocalRegisterValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::VocalRegisterValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VocalRegisterValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VocalRegisterValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_VocalRegister_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Work_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_Work_default_instance_;
    new (ptr) ::mead101::mead::Work();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::Work::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Work_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Work_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_WorkTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_PartyWithNames_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_WorkHierarchy_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_WorkHierarchy_default_instance_;
    new (ptr) ::mead101::mead::WorkHierarchy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::WorkHierarchy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_WorkHierarchy_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_WorkHierarchy_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_ChildWorkHierarchy_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Form_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_WorkTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_WorkInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_WorkInformation_default_instance_;
    new (ptr) ::mead101::mead::WorkInformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::WorkInformation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<21> scc_info_WorkInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 21, 0, InitDefaultsscc_info_WorkInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_AlternativeTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ArtisticInfluence_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Award_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_ClassicalPeriod_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_CommentaryNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_DanceAndRhythmStyle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_DerivedRecording_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Epoch_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Form_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Harmony_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_SimilarWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Lyrics_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Mood_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_RelatedWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_SubGenreCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Instrument_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_Theme_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_TimeSignature_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_VocalRegister_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_WorkHierarchy_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_WorkSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_WorkInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_WorkInformationList_default_instance_;
    new (ptr) ::mead101::mead::WorkInformationList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::WorkInformationList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WorkInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_WorkInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_WorkRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_WorkRelationshipType_default_instance_;
    new (ptr) ::mead101::mead::WorkRelationshipType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::WorkRelationshipType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WorkRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_WorkRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,}};

static void InitDefaultsscc_info_WorkSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_WorkSummary_default_instance_;
    new (ptr) ::mead101::mead::WorkSummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::WorkSummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WorkSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_WorkSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {
      &scc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_TitleWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
      &scc_info_PartyNameWithTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,}};

static void InitDefaultsscc_info_WorkTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_WorkTitle_default_instance_;
    new (ptr) ::mead101::mead::WorkTitle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::WorkTitle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorkTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static void InitDefaultsscc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::mead::_ddex_IsoDate_default_instance_;
    new (ptr) ::mead101::mead::ddex_IsoDate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::mead::ddex_IsoDate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto[160];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AbsolutePitch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AbsolutePitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AbsolutePitch, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AbsolutePitch, value_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AllTerritoryCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AllTerritoryCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AllTerritoryCode, identifier_type_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AllTerritoryCode, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AlternativeTitle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AlternativeTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AlternativeTitle, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AlternativeTitle, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AlternativeTitle, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AlternativeTitle, sub_title_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AlternativeTitle, title_text_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AlternativeTitle, title_type_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AlternativeTitle, user_defined_value_),
  0,
  ~0u,
  1,
  3,
  4,
  5,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Annotation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Annotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Annotation, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Annotation, text_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ArtistType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ArtistType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ArtistType, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ArtistType, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ArtistType, value_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ArtistTypeValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ArtistTypeValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ArtistTypeValue, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ArtistTypeValue, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ArtistTypeValue, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ArtisticInfluence, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ArtisticInfluence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ArtisticInfluence, description_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ArtisticInfluence, is_influenced_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ArtisticInfluence, is_influencer_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ArtisticInfluence, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ArtisticInfluence, party_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ArtisticInfluence, release_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ArtisticInfluence, resource_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ArtisticInfluence, work_),
  ~0u,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Award, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Award, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Award, award_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Award, awarded_party_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Award, awarding_body_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Award, comment_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Award, date_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Award, is_winner_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Award, metadata_source_reference_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AwardForParty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AwardForParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AwardForParty, award_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AwardForParty, awarded_party_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AwardForParty, awarded_release_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AwardForParty, awarded_resource_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AwardForParty, awarded_work_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AwardForParty, awarding_body_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AwardForParty, comment_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AwardForParty, date_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AwardForParty, is_winner_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::AwardForParty, metadata_source_reference_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  7,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::BeatsPerMinute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::BeatsPerMinute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::BeatsPerMinute, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::BeatsPerMinute, modulation_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::BeatsPerMinute, value_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Biography, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Biography, author_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Biography, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Biography, text_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::BiographyText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::BiographyText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::BiographyText, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::BiographyText, format_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::BiographyText, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::BiographyText, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::BiographyText, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::BiographyText, ext_value_),
  4,
  5,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::CatalogNumber, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::CatalogNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::CatalogNumber, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::CatalogNumber, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Category, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Category, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Category, any_attribute_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Category, label_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Category, scheme_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Category, term_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ChartEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ChartEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ChartEntry, comment_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ChartEntry, date_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ChartEntry, duration_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ChartEntry, position_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ChartName, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ChartName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ChartName, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ChartName, name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ChartName, pronunciation_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ChildWorkHierarchy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ChildWorkHierarchy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ChildWorkHierarchy, child_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ChildWorkHierarchy, form_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ChildWorkHierarchy, is_complete_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ChildWorkHierarchy, is_described_element_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ChildWorkHierarchy, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ChildWorkHierarchy, work_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ChildWorkHierarchy, work_title_),
  ~0u,
  0,
  2,
  3,
  4,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ClassicalPeriod, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ClassicalPeriod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ClassicalPeriod, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ClassicalPeriod, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ClassicalPeriod, name_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::CommentaryNote, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::CommentaryNote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::CommentaryNote, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::CommentaryNote, author_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::CommentaryNote, commentary_note_type_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::CommentaryNote, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::CommentaryNote, text_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::CommentaryNoteType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::CommentaryNoteType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::CommentaryNoteType, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::CommentaryNoteType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::CommentaryNoteType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Content, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Content, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Content, any_attribute_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Content, any_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Content, src_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Content, type_),
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::CurrentTerritoryCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::CurrentTerritoryCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::CurrentTerritoryCode, identifier_type_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::CurrentTerritoryCode, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DanceAndRhythmStyle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DanceAndRhythmStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DanceAndRhythmStyle, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DanceAndRhythmStyle, description_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DanceAndRhythmStyle, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DanceAndRhythmStyle, value_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DanceAndRhythmStyleValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DanceAndRhythmStyleValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DanceAndRhythmStyleValue, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DanceAndRhythmStyleValue, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DanceAndRhythmStyleValue, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Date, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Date, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Date, is_approximate_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Date, ext_value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DateTime, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DateTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DateTime, any_attribute_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DateTime, ext_value_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DerivedRecording, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DerivedRecording, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DerivedRecording, display_artist_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DerivedRecording, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DerivedRecording, related_resource_type_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DerivedRecording, resource_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DerivedRecording, title_),
  0,
  ~0u,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DetailedHashSum, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DetailedHashSum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DetailedHashSum, algorithm_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DetailedHashSum, data_type_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DetailedHashSum, hash_sum_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DetailedHashSum, parameter_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DetailedHashSum, version_),
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DetailedPartyId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DetailedPartyId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DetailedPartyId, cisac_society_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DetailedPartyId, d_p_i_d_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DetailedPartyId, i_p_n_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DetailedPartyId, i_s_n_i_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DetailedPartyId, ipi_name_number_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DetailedPartyId, proprietary_id_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayArtist, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayArtist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayArtist, d_p_i_d_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayArtist, display_artist_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayArtist, i_p_n_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayArtist, i_s_n_i_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayArtist, ipi_name_number_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayArtist, proprietary_id_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayArtistNameWithDefault, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayArtistNameWithDefault, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayArtistNameWithDefault, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayArtistNameWithDefault, is_default_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayArtistNameWithDefault, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayArtistNameWithDefault, ext_value_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayArtistNameWithPronunciation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayArtistNameWithPronunciation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayArtistNameWithPronunciation, name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayArtistNameWithPronunciation, pronunciation_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplaySubTitle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplaySubTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplaySubTitle, is_displayed_in_title_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplaySubTitle, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplaySubTitle, pronunciation_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplaySubTitle, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplaySubTitle, sub_title_type_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplaySubTitle, title_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplaySubTitle, user_defined_value_),
  4,
  0,
  ~0u,
  5,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayTitle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayTitle, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayTitle, is_default_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayTitle, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayTitle, sub_title_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::DisplayTitle, title_text_),
  1,
  3,
  0,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Duration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Duration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Duration, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Duration, unit_of_duration_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Duration, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Duration, ext_value_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Entry, party_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Entry, release_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Entry, resource_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Entry, subscription_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Entry, work_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Entry, any_attribute_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Entry, author_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Entry, category_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Entry, content_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Entry, contributor_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Entry, id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Entry, link_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Entry, published_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Entry, rights_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Entry, source_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Entry, summary_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Entry, title_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Entry, updated_),
  1,
  2,
  3,
  0,
  4,
  ~0u,
  ~0u,
  ~0u,
  5,
  ~0u,
  6,
  ~0u,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Epoch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Epoch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Epoch, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Epoch, end_date_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Epoch, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Epoch, related_artist_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Epoch, related_creation_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Epoch, start_date_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Epoch, value_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDate, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDate, is_after_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDate, is_approximate_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDate, is_before_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDate, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDate, location_description_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDate, ext_value_),
  2,
  4,
  5,
  6,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDateTime, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDateTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDateTime, is_after_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDateTime, is_approximate_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDateTime, is_before_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDateTime, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDateTime, location_description_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDateTime, territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDateTime, ext_value_),
  4,
  5,
  6,
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDateWithoutFlags, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDateWithoutFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDateWithoutFlags, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDateWithoutFlags, is_approximate_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDateWithoutFlags, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDateWithoutFlags, location_description_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::EventDateWithoutFlags, ext_value_),
  2,
  4,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Feed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Feed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Feed, any_attribute_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Feed, any_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Feed, author_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Feed, category_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Feed, contributor_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Feed, entry_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Feed, generator_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Feed, icon_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Feed, id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Feed, link_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Feed, logo_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Feed, rights_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Feed, subtitle_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Feed, title_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Feed, updated_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::File, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::File, file_size_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::File, hash_sum_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::File, u_r_i_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Flag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Flag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Flag, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Flag, value_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::FocusTrack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::FocusTrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::FocusTrack, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::FocusTrack, comment_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::FocusTrack, display_artist_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::FocusTrack, is_default_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::FocusTrack, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::FocusTrack, period_of_being_focus_track_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::FocusTrack, resource_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::FocusTrack, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::FocusTrack, title_),
  0,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  1,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Form, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Form, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Form, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Form, value_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::FormValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::FormValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::FormValue, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::FormValue, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::FormValue, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Generator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Generator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Generator, any_attribute_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Generator, ext_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Generator, uri_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Generator, version_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::GenreCategory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::GenreCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::GenreCategory, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::GenreCategory, description_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::GenreCategory, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::GenreCategory, value_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::GenreCategoryValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::GenreCategoryValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::GenreCategoryValue, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::GenreCategoryValue, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::GenreCategoryValue, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::GenreCategoryValue, ext_value_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Harmony, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Harmony, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Harmony, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Harmony, mode_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Harmony, modulation_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Harmony, root_chord_note_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Harmony, root_chord_quality_),
  ~0u,
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HarmonyModulation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HarmonyModulation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HarmonyModulation, end_bar_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HarmonyModulation, end_point_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HarmonyModulation, mode_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HarmonyModulation, root_chord_note_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HarmonyModulation, root_chord_quality_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HarmonyModulation, start_bar_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HarmonyModulation, start_point_),
  4,
  3,
  0,
  1,
  2,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HashSumAlgorithmType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HashSumAlgorithmType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HashSumAlgorithmType, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HashSumAlgorithmType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HashSumAlgorithmType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HistoricChartingInformation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HistoricChartingInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HistoricChartingInformation, chart_entry_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HistoricChartingInformation, chart_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HistoricChartingInformation, comment_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HistoricChartingInformation, duration_in_charts_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HistoricChartingInformation, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HistoricChartingInformation, territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HistoricChartingInformation, top_position_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HistoricChartingInformationForParty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HistoricChartingInformationForParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HistoricChartingInformationForParty, chart_entry_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HistoricChartingInformationForParty, chart_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HistoricChartingInformationForParty, charted_release_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HistoricChartingInformationForParty, charted_resource_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HistoricChartingInformationForParty, charted_work_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HistoricChartingInformationForParty, comment_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HistoricChartingInformationForParty, duration_in_charts_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HistoricChartingInformationForParty, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HistoricChartingInformationForParty, territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::HistoricChartingInformationForParty, top_position_),
  ~0u,
  ~0u,
  0,
  1,
  2,
  ~0u,
  3,
  ~0u,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Icon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Icon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Icon, any_attribute_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Icon, ext_value_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Id, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Id, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Id, any_attribute_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Id, ext_value_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Image, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Image, file_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Image, image_type_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Image, metadata_source_reference_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ImageType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ImageType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ImageType, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ImageType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ImageType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Instrument, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Instrument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Instrument, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Instrument, value_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::InstrumentUsed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::InstrumentUsed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::InstrumentUsed, is_featured_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::InstrumentUsed, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::InstrumentUsed, value_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::InstrumentValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::InstrumentValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::InstrumentValue, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::InstrumentValue, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::InstrumentValue, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Link, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Link, any_attribute_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Link, href_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Link, hreflang_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Link, length_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Link, rel_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Link, title_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Link, type_),
  ~0u,
  0,
  1,
  5,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::LocationAndDateOfSession, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::LocationAndDateOfSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::LocationAndDateOfSession, comment_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::LocationAndDateOfSession, contributor_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::LocationAndDateOfSession, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::LocationAndDateOfSession, period_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::LocationAndDateOfSession, session_type_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::LocationAndDateOfSession, venue_),
  0,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Logo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Logo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Logo, any_attribute_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Logo, ext_value_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Lyrics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Lyrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Lyrics, is_misquoted_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Lyrics, lyrics_type_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Lyrics, lyrics_type_namespace_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Lyrics, lyrics_type_user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Lyrics, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Lyrics, pronunciation_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Lyrics, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Lyrics, text_),
  4,
  2,
  0,
  1,
  ~0u,
  ~0u,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::LyricsText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::LyricsText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::LyricsText, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::LyricsText, format_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::LyricsText, format_namespace_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::LyricsText, format_user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::LyricsText, is_complete_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::LyricsText, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::LyricsText, ext_value_),
  4,
  5,
  0,
  1,
  6,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MeadMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MeadMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MeadMessage, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MeadMessage, message_header_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MeadMessage, metadata_source_list_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MeadMessage, party_information_list_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MeadMessage, release_information_list_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MeadMessage, resource_information_list_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MeadMessage, subscription_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MeadMessage, work_information_list_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MeadMessage, any_value_),
  0,
  2,
  3,
  4,
  5,
  6,
  1,
  7,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MessageAuditTrail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MessageAuditTrail, message_audit_trail_event_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MessageAuditTrailEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MessageAuditTrailEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MessageAuditTrailEvent, date_time_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MessageAuditTrailEvent, messaging_party_descriptor_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MessageHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MessageHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MessageHeader, message_audit_trail_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MessageHeader, message_control_type_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MessageHeader, message_created_date_time_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MessageHeader, message_file_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MessageHeader, message_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MessageHeader, message_recipient_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MessageHeader, message_sender_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MessageHeader, message_thread_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MessageHeader, sent_on_behalf_of_),
  4,
  5,
  0,
  1,
  2,
  ~0u,
  6,
  3,
  7,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MessagingPartyWithoutCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MessagingPartyWithoutCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MessagingPartyWithoutCode, party_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MessagingPartyWithoutCode, party_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MessagingPartyWithoutCode, trading_name_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MetadataSource, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MetadataSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MetadataSource, metadata_source_type_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MetadataSource, party_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MetadataSource, party_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MetadataSource, source_reference_),
  1,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MetadataSourceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MetadataSourceList, metadata_source_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MetadataSourceType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MetadataSourceType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MetadataSourceType, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MetadataSourceType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MetadataSourceType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Meter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Meter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Meter, note_equivalent_to_beat_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Meter, number_of_beats_in_bar_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Mode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Mode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Mode, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Mode, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Mode, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Modulation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Modulation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Modulation, end_bar_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Modulation, end_point_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Modulation, start_bar_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Modulation, start_point_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Modulation, value_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Mood, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Mood, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Mood, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Mood, description_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Mood, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Mood, value_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MoodValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MoodValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MoodValue, applies_to_composition_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MoodValue, applies_to_lyrics_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MoodValue, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MoodValue, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MoodValue, ext_value_),
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MusicalWorkId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MusicalWorkId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MusicalWorkId, composer_catalog_number_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MusicalWorkId, i_s_w_c_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MusicalWorkId, opus_number_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::MusicalWorkId, proprietary_id_),
  ~0u,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Name, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Name, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Name, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Name, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::NameWithPronunciation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::NameWithPronunciation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::NameWithPronunciation, name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::NameWithPronunciation, pronunciation_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::NameWithPronunciationAndScriptCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::NameWithPronunciationAndScriptCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::NameWithPronunciationAndScriptCode, name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::NameWithPronunciationAndScriptCode, pronunciation_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Party, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Party, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Party, d_p_i_d_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Party, i_p_n_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Party, i_s_n_i_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Party, ipi_name_number_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Party, party_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Party, proprietary_id_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyDescriptor, party_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyDescriptor, party_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyInformation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyInformation, artist_type_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyInformation, artistic_influence_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyInformation, award_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyInformation, biography_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyInformation, classical_period_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyInformation, commentary_note_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyInformation, epoch_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyInformation, focus_track_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyInformation, historic_charting_information_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyInformation, image_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyInformation, is_similar_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyInformation, party_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyInformation, pseudonym_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyInformation, related_creation_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyInformation, vocal_register_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyInformationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyInformationList, party_information_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyName, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyName, abbreviated_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyName, full_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyName, full_name_ascii_transcribed_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyName, full_name_indexed_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyName, key_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyName, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyName, names_after_key_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyName, names_before_key_name_),
  2,
  3,
  0,
  4,
  5,
  1,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithPronunciation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithPronunciation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithPronunciation, abbreviated_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithPronunciation, full_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithPronunciation, full_name_ascii_transcribed_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithPronunciation, full_name_indexed_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithPronunciation, key_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithPronunciation, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithPronunciation, names_after_key_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithPronunciation, names_before_key_name_),
  1,
  2,
  3,
  4,
  5,
  0,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithTerritory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithTerritory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithTerritory, abbreviated_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithTerritory, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithTerritory, full_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithTerritory, full_name_ascii_transcribed_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithTerritory, full_name_indexed_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithTerritory, key_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithTerritory, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithTerritory, names_after_key_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithTerritory, names_before_key_name_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithoutCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithoutCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithoutCode, abbreviated_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithoutCode, full_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithoutCode, full_name_ascii_transcribed_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithoutCode, full_name_indexed_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithoutCode, key_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithoutCode, names_after_key_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyNameWithoutCode, names_before_key_name_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyWithNames, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyWithNames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyWithNames, d_p_i_d_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyWithNames, i_p_n_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyWithNames, i_s_n_i_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyWithNames, ipi_name_number_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyWithNames, name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyWithNames, proprietary_id_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyWithRole, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyWithRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyWithRole, d_p_i_d_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyWithRole, i_p_n_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyWithRole, i_s_n_i_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyWithRole, ipi_name_number_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyWithRole, party_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyWithRole, proprietary_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PartyWithRole, role_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Period, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Period, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Period, end_date_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Period, end_date_time_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Period, start_date_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Period, start_date_time_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PeriodValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PeriodValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PeriodValue, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PeriodValue, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PeriodValue, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PeriodWithTime, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PeriodWithTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PeriodWithTime, end_date_time_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::PeriodWithTime, start_date_time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Person, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Person, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Person, any_attribute_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Person, any_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Person, email_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Person, name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Person, uri_),
  ~0u,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Pronunciation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Pronunciation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Pronunciation, encoding_namespace_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Pronunciation, encoding_type_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Pronunciation, encoding_user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Pronunciation, is_canonical_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Pronunciation, language_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Pronunciation, ext_value_),
  0,
  4,
  1,
  5,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ProprietaryId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ProprietaryId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ProprietaryId, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ProprietaryId, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Pseudonym, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Pseudonym, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Pseudonym, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Pseudonym, is_default_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Pseudonym, is_official_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Pseudonym, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Pseudonym, name_),
  0,
  2,
  3,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RecordingPart, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RecordingPart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RecordingPart, comment_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RecordingPart, end_point_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RecordingPart, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RecordingPart, recording_part_type_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RecordingPart, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RecordingPart, start_point_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RecordingPart, unit_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RecordingPart, usage_information_),
  ~0u,
  2,
  ~0u,
  0,
  4,
  3,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RecordingPartType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RecordingPartType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RecordingPartType, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RecordingPartType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RecordingPartType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RelatedCreation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RelatedCreation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RelatedCreation, musical_work_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RelatedCreation, release_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RelatedCreation, resource_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RelatedCreation, title_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RelatedResource, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RelatedResource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RelatedResource, resource_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RelatedResource, resource_relationship_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RelatedResourceType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RelatedResourceType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RelatedResourceType, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RelatedResourceType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RelatedResourceType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RelatedWork, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RelatedWork, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RelatedWork, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RelatedWork, work_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RelatedWork, work_relationship_type_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RelatedWork, work_title_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RelatedWork, writer_),
  ~0u,
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Release, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Release, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Release, display_artist_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Release, g_rid_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Release, i_c_p_n_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Release, proprietary_release_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Release, release_title_),
  ~0u,
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseId, catalog_number_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseId, g_rid_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseId, i_c_p_n_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseId, i_s_r_c_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseId, proprietary_id_),
  3,
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseInformation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseInformation, alternative_title_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseInformation, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseInformation, artistic_influence_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseInformation, award_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseInformation, commentary_note_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseInformation, epoch_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseInformation, genre_category_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseInformation, historic_charting_information_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseInformation, image_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseInformation, is_similar_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseInformation, mood_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseInformation, priority_period_end_date_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseInformation, priority_period_start_date_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseInformation, release_summary_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseInformation, sub_genre_category_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseInformation, theme_),
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseInformationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseInformationList, release_information_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseSummary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseSummary, display_artist_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseSummary, display_title_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseSummary, release_id_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseTitle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseTitle, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ReleaseTitle, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Resource, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Resource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Resource, catalog_number_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Resource, display_artist_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Resource, i_s_r_c_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Resource, proprietary_resource_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Resource, resource_title_),
  0,
  ~0u,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceContributorRole, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceContributorRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceContributorRole, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceContributorRole, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceContributorRole, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceId, catalog_number_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceId, i_s_a_n_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceId, i_s_b_n_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceId, i_s_m_n_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceId, i_s_r_c_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceId, i_s_s_n_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceId, proprietary_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceId, s_i_c_i_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceId, v_i_s_a_n_),
  7,
  0,
  1,
  2,
  3,
  4,
  ~0u,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, absolute_pitch_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, alternative_title_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, artistic_influence_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, award_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, beats_per_minute_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, commentary_note_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, dance_and_rhythm_style_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, epoch_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, genre_category_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, harmony_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, historic_charting_information_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, image_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, instrument_used_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, is_cover_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, is_original_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, is_similar_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, location_and_date_of_session_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, lyric_theme_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, lyrics_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, mood_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, priority_period_end_date_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, priority_period_start_date_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, programmatic_theme_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, recording_part_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, related_resource_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, resource_summary_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, sample_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, sub_genre_category_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, time_signature_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, usage_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, used_musical_work_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformation, vocal_register_),
  0,
  ~0u,
  1,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  ~0u,
  ~0u,
  ~0u,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  6,
  7,
  ~0u,
  ~0u,
  ~0u,
  8,
  ~0u,
  9,
  10,
  ~0u,
  ~0u,
  11,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceInformationList, resource_information_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceRelationship, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceRelationship, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceRelationship, display_artist_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceRelationship, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceRelationship, related_resource_type_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceRelationship, resource_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceRelationship, title_),
  0,
  ~0u,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceRelationshipType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceRelationshipType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceRelationshipType, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceRelationshipType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceRelationshipType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceSummary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceSummary, display_artist_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceSummary, display_title_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceSummary, resource_id_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceTitle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceTitle, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ResourceTitle, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RootChordNote, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RootChordNote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RootChordNote, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RootChordNote, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RootChordNote, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RootChordQuality, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RootChordQuality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RootChordQuality, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RootChordQuality, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::RootChordQuality, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Sample, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Sample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Sample, contains_samples_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Sample, description_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Sample, host_timing_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Sample, is_contained_in_sample_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Sample, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Sample, related_resource_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Sample, sample_feature_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Sample, sample_timing_),
  1,
  ~0u,
  ~0u,
  2,
  ~0u,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SampleFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SampleFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SampleFeature, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SampleFeature, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SessionType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SessionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SessionType, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SessionType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SessionType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SimilarParty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SimilarParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SimilarParty, description_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SimilarParty, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SimilarParty, party_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SimilarRelease, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SimilarRelease, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SimilarRelease, description_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SimilarRelease, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SimilarRelease, release_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SimilarResource, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SimilarResource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SimilarResource, description_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SimilarResource, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SimilarResource, resource_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SimilarWork, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SimilarWork, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SimilarWork, description_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SimilarWork, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SimilarWork, work_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Source, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Source, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Source, any_attribute_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Source, any_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Source, author_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Source, category_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Source, contributor_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Source, generator_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Source, icon_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Source, id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Source, link_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Source, logo_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Source, rights_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Source, subtitle_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Source, title_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Source, updated_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SubGenreCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SubGenreCategory, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SubGenreCategory, value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SubGenreCategoryValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SubGenreCategoryValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SubGenreCategoryValue, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SubGenreCategoryValue, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::SubGenreCategoryValue, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Tempo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Tempo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Tempo, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Tempo, value_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TempoValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TempoValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TempoValue, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TempoValue, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TempoValue, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Text, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Text, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Text, any_attribute_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Text, any_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Text, type_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TextWithFormat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TextWithFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TextWithFormat, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TextWithFormat, format_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TextWithFormat, is_default_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TextWithFormat, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TextWithFormat, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TextWithFormat, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TextWithFormat, ext_value_),
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TextWithoutTerritory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TextWithoutTerritory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TextWithoutTerritory, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TextWithoutTerritory, format_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TextWithoutTerritory, is_default_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TextWithoutTerritory, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TextWithoutTerritory, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TextWithoutTerritory, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TextWithoutTerritory, ext_value_),
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Theme, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Theme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Theme, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Theme, description_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Theme, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Theme, value_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ThemeValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ThemeValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ThemeValue, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ThemeValue, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ThemeValue, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TimeSignature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TimeSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TimeSignature, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TimeSignature, meter_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TimeSignature, modulation_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TimeSignature, no_meter_available_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TimeSignature, tempo_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TimeSignature, too_many_tempi_),
  ~0u,
  0,
  ~0u,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TimeSignatureModulation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TimeSignatureModulation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TimeSignatureModulation, end_bar_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TimeSignatureModulation, end_point_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TimeSignatureModulation, meter_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TimeSignatureModulation, no_meter_available_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TimeSignatureModulation, start_bar_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TimeSignatureModulation, start_point_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TimeSignatureModulation, tempo_),
  3,
  2,
  0,
  4,
  6,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Timing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Timing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Timing, duration_used_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Timing, start_point_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TitleTextWithPronunciation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TitleTextWithPronunciation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TitleTextWithPronunciation, pronunciation_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TitleTextWithPronunciation, title_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TitleWithPronunciation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TitleWithPronunciation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TitleWithPronunciation, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TitleWithPronunciation, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TitleWithPronunciation, sub_title_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TitleWithPronunciation, title_text_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TitleWithPronunciation, title_type_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::TitleWithPronunciation, user_defined_value_),
  0,
  1,
  3,
  4,
  5,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::URI, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::URI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::URI, any_attribute_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::URI, ext_value_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Usage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Usage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Usage, description_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Usage, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Usage, relevant_resource_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Usage, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Usage, usage_date_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Usage, usage_period_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::UsagePeriod, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::UsagePeriod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::UsagePeriod, end_date_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::UsagePeriod, start_date_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::UsedMusicalWork, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::UsedMusicalWork, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::UsedMusicalWork, resource_musical_work_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Venue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Venue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Venue, location_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Venue, territory_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Venue, venue_address_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Venue, venue_name_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Venue, venue_room_),
  0,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::VocalRegister, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::VocalRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::VocalRegister, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::VocalRegister, value_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::VocalRegisterValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::VocalRegisterValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::VocalRegisterValue, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::VocalRegisterValue, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::VocalRegisterValue, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Work, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Work, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Work, i_s_w_c_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Work, proprietary_work_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Work, work_title_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::Work, writer_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkHierarchy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkHierarchy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkHierarchy, child_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkHierarchy, form_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkHierarchy, is_complete_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkHierarchy, is_described_element_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkHierarchy, metadata_source_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkHierarchy, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkHierarchy, work_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkHierarchy, work_title_),
  ~0u,
  0,
  2,
  3,
  ~0u,
  4,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, alternative_title_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, artistic_influence_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, award_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, classical_period_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, commentary_note_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, dance_and_rhythm_style_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, derived_recording_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, epoch_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, form_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, harmony_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, is_similar_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, lyrics_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, lyrics_mood_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, musical_work_reference_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, related_work_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, sub_genre_category_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, target_instrument_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, theme_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, time_signature_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, vocal_register_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, work_hierarchy_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformation, work_summary_),
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  4,
  ~0u,
  ~0u,
  5,
  6,
  ~0u,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkInformationList, work_information_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkRelationshipType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkRelationshipType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkRelationshipType, namespace__),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkRelationshipType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkRelationshipType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkSummary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkSummary, musical_work_id_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkSummary, work_title_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkSummary, writer_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkTitle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkTitle, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::WorkTitle, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ddex_IsoDate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ddex_IsoDate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::mead::ddex_IsoDate, auto_value_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::mead101::mead::AbsolutePitch)},
  { 9, 16, sizeof(::mead101::mead::AllTerritoryCode)},
  { 18, 30, sizeof(::mead101::mead::AlternativeTitle)},
  { 37, 44, sizeof(::mead101::mead::Annotation)},
  { 46, 54, sizeof(::mead101::mead::ArtistType)},
  { 57, 65, sizeof(::mead101::mead::ArtistTypeValue)},
  { 68, 81, sizeof(::mead101::mead::ArtisticInfluence)},
  { 89, 101, sizeof(::mead101::mead::Award)},
  { 108, 123, sizeof(::mead101::mead::AwardForParty)},
  { 133, 141, sizeof(::mead101::mead::BeatsPerMinute)},
  { 144, -1, sizeof(::mead101::mead::Biography)},
  { 152, 163, sizeof(::mead101::mead::BiographyText)},
  { 169, 176, sizeof(::mead101::mead::CatalogNumber)},
  { 178, 187, sizeof(::mead101::mead::Category)},
  { 191, 200, sizeof(::mead101::mead::ChartEntry)},
  { 204, 212, sizeof(::mead101::mead::ChartName)},
  { 215, 227, sizeof(::mead101::mead::ChildWorkHierarchy)},
  { 234, 242, sizeof(::mead101::mead::ClassicalPeriod)},
  { 245, 255, sizeof(::mead101::mead::CommentaryNote)},
  { 260, 268, sizeof(::mead101::mead::CommentaryNoteType)},
  { 271, 280, sizeof(::mead101::mead::Content)},
  { 284, 291, sizeof(::mead101::mead::CurrentTerritoryCode)},
  { 293, 302, sizeof(::mead101::mead::DanceAndRhythmStyle)},
  { 306, 314, sizeof(::mead101::mead::DanceAndRhythmStyleValue)},
  { 317, 324, sizeof(::mead101::mead::Date)},
  { 326, 333, sizeof(::mead101::mead::DateTime)},
  { 335, 345, sizeof(::mead101::mead::DerivedRecording)},
  { 350, 360, sizeof(::mead101::mead::DetailedHashSum)},
  { 365, 376, sizeof(::mead101::mead::DetailedPartyId)},
  { 382, 393, sizeof(::mead101::mead::DisplayArtist)},
  { 399, 408, sizeof(::mead101::mead::DisplayArtistNameWithDefault)},
  { 412, 419, sizeof(::mead101::mead::DisplayArtistNameWithPronunciation)},
  { 421, 433, sizeof(::mead101::mead::DisplaySubTitle)},
  { 440, 450, sizeof(::mead101::mead::DisplayTitle)},
  { 455, 464, sizeof(::mead101::mead::Duration)},
  { 468, 491, sizeof(::mead101::mead::Entry)},
  { 509, 521, sizeof(::mead101::mead::Epoch)},
  { 528, 540, sizeof(::mead101::mead::EventDate)},
  { 547, 559, sizeof(::mead101::mead::EventDateTime)},
  { 566, 576, sizeof(::mead101::mead::EventDateWithoutFlags)},
  { 581, 601, sizeof(::mead101::mead::Feed)},
  { 616, 624, sizeof(::mead101::mead::File)},
  { 627, 634, sizeof(::mead101::mead::Flag)},
  { 636, 650, sizeof(::mead101::mead::FocusTrack)},
  { 659, 666, sizeof(::mead101::mead::Form)},
  { 668, 676, sizeof(::mead101::mead::FormValue)},
  { 679, 688, sizeof(::mead101::mead::Generator)},
  { 692, 701, sizeof(::mead101::mead::GenreCategory)},
  { 705, 714, sizeof(::mead101::mead::GenreCategoryValue)},
  { 718, 728, sizeof(::mead101::mead::Harmony)},
  { 733, 745, sizeof(::mead101::mead::HarmonyModulation)},
  { 752, 760, sizeof(::mead101::mead::HashSumAlgorithmType)},
  { 763, 775, sizeof(::mead101::mead::HistoricChartingInformation)},
  { 782, 797, sizeof(::mead101::mead::HistoricChartingInformationForParty)},
  { 807, 814, sizeof(::mead101::mead::Icon)},
  { 816, 823, sizeof(::mead101::mead::Id)},
  { 825, 833, sizeof(::mead101::mead::Image)},
  { 836, 844, sizeof(::mead101::mead::ImageType)},
  { 847, 854, sizeof(::mead101::mead::Instrument)},
  { 856, 864, sizeof(::mead101::mead::InstrumentUsed)},
  { 867, 875, sizeof(::mead101::mead::InstrumentValue)},
  { 878, 890, sizeof(::mead101::mead::Link)},
  { 897, 908, sizeof(::mead101::mead::LocationAndDateOfSession)},
  { 914, 921, sizeof(::mead101::mead::Logo)},
  { 923, 936, sizeof(::mead101::mead::Lyrics)},
  { 944, 956, sizeof(::mead101::mead::LyricsText)},
  { 963, 977, sizeof(::mead101::mead::MeadMessage)},
  { 986, -1, sizeof(::mead101::mead::MessageAuditTrail)},
  { 992, 999, sizeof(::mead101::mead::MessageAuditTrailEvent)},
  { 1001, 1015, sizeof(::mead101::mead::MessageHeader)},
  { 1024, 1032, sizeof(::mead101::mead::MessagingPartyWithoutCode)},
  { 1035, 1044, sizeof(::mead101::mead::MetadataSource)},
  { 1048, -1, sizeof(::mead101::mead::MetadataSourceList)},
  { 1054, 1062, sizeof(::mead101::mead::MetadataSourceType)},
  { 1065, 1072, sizeof(::mead101::mead::Meter)},
  { 1074, 1082, sizeof(::mead101::mead::Mode)},
  { 1085, 1095, sizeof(::mead101::mead::Modulation)},
  { 1100, 1109, sizeof(::mead101::mead::Mood)},
  { 1113, 1123, sizeof(::mead101::mead::MoodValue)},
  { 1128, 1137, sizeof(::mead101::mead::MusicalWorkId)},
  { 1141, 1148, sizeof(::mead101::mead::Name)},
  { 1150, 1157, sizeof(::mead101::mead::NameWithPronunciation)},
  { 1159, 1166, sizeof(::mead101::mead::NameWithPronunciationAndScriptCode)},
  { 1168, 1179, sizeof(::mead101::mead::Party)},
  { 1185, -1, sizeof(::mead101::mead::PartyDescriptor)},
  { 1192, 1212, sizeof(::mead101::mead::PartyInformation)},
  { 1227, -1, sizeof(::mead101::mead::PartyInformationList)},
  { 1233, 1246, sizeof(::mead101::mead::PartyName)},
  { 1254, 1267, sizeof(::mead101::mead::PartyNameWithPronunciation)},
  { 1275, 1289, sizeof(::mead101::mead::PartyNameWithTerritory)},
  { 1298, 1310, sizeof(::mead101::mead::PartyNameWithoutCode)},
  { 1317, 1328, sizeof(::mead101::mead::PartyWithNames)},
  { 1334, 1346, sizeof(::mead101::mead::PartyWithRole)},
  { 1353, 1362, sizeof(::mead101::mead::Period)},
  { 1366, 1374, sizeof(::mead101::mead::PeriodValue)},
  { 1377, 1384, sizeof(::mead101::mead::PeriodWithTime)},
  { 1386, 1396, sizeof(::mead101::mead::Person)},
  { 1401, 1412, sizeof(::mead101::mead::Pronunciation)},
  { 1418, 1425, sizeof(::mead101::mead::ProprietaryId)},
  { 1427, 1437, sizeof(::mead101::mead::Pseudonym)},
  { 1442, 1455, sizeof(::mead101::mead::RecordingPart)},
  { 1463, 1471, sizeof(::mead101::mead::RecordingPartType)},
  { 1474, 1483, sizeof(::mead101::mead::RelatedCreation)},
  { 1487, 1494, sizeof(::mead101::mead::RelatedResource)},
  { 1496, 1504, sizeof(::mead101::mead::RelatedResourceType)},
  { 1507, 1517, sizeof(::mead101::mead::RelatedWork)},
  { 1522, 1532, sizeof(::mead101::mead::Release)},
  { 1537, 1547, sizeof(::mead101::mead::ReleaseId)},
  { 1552, 1573, sizeof(::mead101::mead::ReleaseInformation)},
  { 1589, -1, sizeof(::mead101::mead::ReleaseInformationList)},
  { 1595, 1603, sizeof(::mead101::mead::ReleaseSummary)},
  { 1606, 1613, sizeof(::mead101::mead::ReleaseTitle)},
  { 1615, 1625, sizeof(::mead101::mead::Resource)},
  { 1630, 1638, sizeof(::mead101::mead::ResourceContributorRole)},
  { 1641, 1655, sizeof(::mead101::mead::ResourceId)},
  { 1664, 1702, sizeof(::mead101::mead::ResourceInformation)},
  { 1735, -1, sizeof(::mead101::mead::ResourceInformationList)},
  { 1741, 1751, sizeof(::mead101::mead::ResourceRelationship)},
  { 1756, 1764, sizeof(::mead101::mead::ResourceRelationshipType)},
  { 1767, 1775, sizeof(::mead101::mead::ResourceSummary)},
  { 1778, 1785, sizeof(::mead101::mead::ResourceTitle)},
  { 1787, 1795, sizeof(::mead101::mead::RootChordNote)},
  { 1798, 1806, sizeof(::mead101::mead::RootChordQuality)},
  { 1809, 1822, sizeof(::mead101::mead::Sample)},
  { 1830, 1837, sizeof(::mead101::mead::SampleFeature)},
  { 1839, 1847, sizeof(::mead101::mead::SessionType)},
  { 1850, 1858, sizeof(::mead101::mead::SimilarParty)},
  { 1861, 1869, sizeof(::mead101::mead::SimilarRelease)},
  { 1872, 1880, sizeof(::mead101::mead::SimilarResource)},
  { 1883, 1891, sizeof(::mead101::mead::SimilarWork)},
  { 1894, 1913, sizeof(::mead101::mead::Source)},
  { 1927, -1, sizeof(::mead101::mead::SubGenreCategory)},
  { 1934, 1942, sizeof(::mead101::mead::SubGenreCategoryValue)},
  { 1945, 1952, sizeof(::mead101::mead::Tempo)},
  { 1954, 1962, sizeof(::mead101::mead::TempoValue)},
  { 1965, 1973, sizeof(::mead101::mead::Text)},
  { 1976, 1988, sizeof(::mead101::mead::TextWithFormat)},
  { 1995, 2007, sizeof(::mead101::mead::TextWithoutTerritory)},
  { 2014, 2023, sizeof(::mead101::mead::Theme)},
  { 2027, 2035, sizeof(::mead101::mead::ThemeValue)},
  { 2038, 2049, sizeof(::mead101::mead::TimeSignature)},
  { 2055, 2067, sizeof(::mead101::mead::TimeSignatureModulation)},
  { 2074, 2081, sizeof(::mead101::mead::Timing)},
  { 2083, 2090, sizeof(::mead101::mead::TitleTextWithPronunciation)},
  { 2092, 2103, sizeof(::mead101::mead::TitleWithPronunciation)},
  { 2109, 2116, sizeof(::mead101::mead::URI)},
  { 2118, 2129, sizeof(::mead101::mead::Usage)},
  { 2135, 2142, sizeof(::mead101::mead::UsagePeriod)},
  { 2144, -1, sizeof(::mead101::mead::UsedMusicalWork)},
  { 2151, 2161, sizeof(::mead101::mead::Venue)},
  { 2166, 2173, sizeof(::mead101::mead::VocalRegister)},
  { 2175, 2183, sizeof(::mead101::mead::VocalRegisterValue)},
  { 2186, 2195, sizeof(::mead101::mead::Work)},
  { 2199, 2212, sizeof(::mead101::mead::WorkHierarchy)},
  { 2220, 2247, sizeof(::mead101::mead::WorkInformation)},
  { 2269, -1, sizeof(::mead101::mead::WorkInformationList)},
  { 2275, 2283, sizeof(::mead101::mead::WorkRelationshipType)},
  { 2286, 2294, sizeof(::mead101::mead::WorkSummary)},
  { 2297, 2304, sizeof(::mead101::mead::WorkTitle)},
  { 2306, 2312, sizeof(::mead101::mead::ddex_IsoDate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_AbsolutePitch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_AllTerritoryCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_AlternativeTitle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Annotation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ArtistType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ArtistTypeValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ArtisticInfluence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Award_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_AwardForParty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_BeatsPerMinute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Biography_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_BiographyText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_CatalogNumber_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Category_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ChartEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ChartName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ChildWorkHierarchy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ClassicalPeriod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_CommentaryNote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_CommentaryNoteType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Content_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_CurrentTerritoryCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_DanceAndRhythmStyle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_DanceAndRhythmStyleValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Date_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_DateTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_DerivedRecording_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_DetailedHashSum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_DetailedPartyId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_DisplayArtist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_DisplayArtistNameWithDefault_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_DisplayArtistNameWithPronunciation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_DisplaySubTitle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_DisplayTitle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Duration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Epoch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_EventDate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_EventDateTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_EventDateWithoutFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Feed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_File_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Flag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_FocusTrack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Form_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_FormValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Generator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_GenreCategory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_GenreCategoryValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Harmony_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_HarmonyModulation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_HashSumAlgorithmType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_HistoricChartingInformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_HistoricChartingInformationForParty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Icon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Id_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ImageType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Instrument_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_InstrumentUsed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_InstrumentValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Link_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_LocationAndDateOfSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Logo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Lyrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_LyricsText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_MeadMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_MessageAuditTrail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_MessageAuditTrailEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_MessageHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_MessagingPartyWithoutCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_MetadataSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_MetadataSourceList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_MetadataSourceType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Meter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Mode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Modulation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Mood_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_MoodValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_MusicalWorkId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Name_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_NameWithPronunciation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_NameWithPronunciationAndScriptCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Party_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_PartyDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_PartyInformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_PartyInformationList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_PartyName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_PartyNameWithPronunciation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_PartyNameWithTerritory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_PartyNameWithoutCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_PartyWithNames_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_PartyWithRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Period_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_PeriodValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_PeriodWithTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Person_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Pronunciation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ProprietaryId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Pseudonym_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_RecordingPart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_RecordingPartType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_RelatedCreation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_RelatedResource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_RelatedResourceType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_RelatedWork_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Release_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ReleaseId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ReleaseInformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ReleaseInformationList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ReleaseSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ReleaseTitle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Resource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ResourceContributorRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ResourceId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ResourceInformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ResourceInformationList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ResourceRelationship_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ResourceRelationshipType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ResourceSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ResourceTitle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_RootChordNote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_RootChordQuality_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Sample_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_SampleFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_SessionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_SimilarParty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_SimilarRelease_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_SimilarResource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_SimilarWork_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Source_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_SubGenreCategory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_SubGenreCategoryValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Tempo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_TempoValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Text_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_TextWithFormat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_TextWithoutTerritory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Theme_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ThemeValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_TimeSignature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_TimeSignatureModulation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Timing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_TitleTextWithPronunciation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_TitleWithPronunciation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_URI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Usage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_UsagePeriod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_UsedMusicalWork_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Venue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_VocalRegister_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_VocalRegisterValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_Work_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_WorkHierarchy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_WorkInformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_WorkInformationList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_WorkRelationshipType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_WorkSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_WorkTitle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::mead::_ddex_IsoDate_default_instance_),
};

const char descriptor_table_protodef_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,ddex-xmltoproto/generated/mead101/mead"
  ".proto\022\014mead101.mead\032+ddex-xmltoproto/ge"
  "nerated/mead101/avs.proto\"A\n\rAbsolutePit"
  "ch\022!\n\031metadata_source_reference\030\001 \003(\t\022\r\n"
  "\005value\030\002 \001(\001\"\225\001\n\020AllTerritoryCode\022O\n\017ide"
  "ntifier_type\030\001 \001(\01326.mead101.avs.Territo"
  "ryCodeTypeIncludingDeprecatedCodes\0220\n\tex"
  "t_value\030\002 \001(\0132\035.mead101.avs.AllTerritory"
  "Code\"\255\002\n\020AlternativeTitle\022 \n\030language_an"
  "d_script_code\030\001 \001(\t\022!\n\031metadata_source_r"
  "eference\030\002 \003(\t\022\021\n\tnamespace\030\003 \001(\t\022;\n\tsub"
  "_title\030\004 \001(\0132(.mead101.mead.TitleTextWit"
  "hPronunciation\022<\n\ntitle_text\030\005 \001(\0132(.mea"
  "d101.mead.TitleTextWithPronunciation\022*\n\n"
  "title_type\030\006 \001(\0132\026.mead101.avs.TitleType"
  "\022\032\n\022user_defined_value\030\007 \001(\t\"[\n\nAnnotati"
  "on\022!\n\031metadata_source_reference\030\001 \003(\t\022*\n"
  "\004text\030\002 \001(\0132\034.mead101.mead.TextWithForma"
  "t\"\243\001\n\nArtistType\022D\n\031applicable_territory"
  "_code\030\001 \001(\0132!.mead101.avs.CurrentTerrito"
  "ryCode\022!\n\031metadata_source_reference\030\002 \003("
  "\t\022,\n\005value\030\003 \001(\0132\035.mead101.mead.ArtistTy"
  "peValue\"l\n\017ArtistTypeValue\022\021\n\tnamespace\030"
  "\001 \001(\t\022\032\n\022user_defined_value\030\002 \001(\t\022*\n\text"
  "_value\030\003 \001(\0132\027.mead101.avs.ArtistType\"\270\002"
  "\n\021ArtisticInfluence\0221\n\013description\030\001 \003(\013"
  "2\034.mead101.mead.TextWithFormat\022\025\n\ris_inf"
  "luenced\030\002 \001(\010\022\025\n\ris_influencer\030\003 \001(\010\022!\n\031"
  "metadata_source_reference\030\004 \003(\t\022+\n\005party"
  "\030\005 \003(\0132\034.mead101.mead.PartyWithNames\022&\n\007"
  "release\030\006 \003(\0132\025.mead101.mead.Release\022(\n\010"
  "resource\030\007 \003(\0132\026.mead101.mead.Resource\022 "
  "\n\004work\030\010 \003(\0132\022.mead101.mead.Work\"\267\002\n\005Awa"
  "rd\0227\n\naward_name\030\001 \001(\0132#.mead101.mead.Na"
  "meWithPronunciation\0223\n\rawarded_party\030\002 \001"
  "(\0132\034.mead101.mead.PartyWithNames\0224\n\rawar"
  "ding_body\030\003 \001(\0132\035.mead101.mead.PartyDesc"
  "riptor\022-\n\007comment\030\004 \003(\0132\034.mead101.mead.T"
  "extWithFormat\022%\n\004date\030\005 \001(\0132\027.mead101.me"
  "ad.EventDate\022\021\n\tis_winner\030\006 \001(\010\022!\n\031metad"
  "ata_source_reference\030\007 \003(\t\"\313\003\n\rAwardForP"
  "arty\0227\n\naward_name\030\001 \001(\0132#.mead101.mead."
  "NameWithPronunciation\0223\n\rawarded_party\030\002"
  " \001(\0132\034.mead101.mead.PartyWithNames\022.\n\017aw"
  "arded_release\030\003 \001(\0132\025.mead101.mead.Relea"
  "se\0220\n\020awarded_resource\030\004 \001(\0132\026.mead101.m"
  "ead.Resource\022(\n\014awarded_work\030\005 \001(\0132\022.mea"
  "d101.mead.Work\0224\n\rawarding_body\030\006 \001(\0132\035."
  "mead101.mead.PartyDescriptor\022-\n\007comment\030"
  "\007 \003(\0132\034.mead101.mead.TextWithFormat\022%\n\004d"
  "ate\030\010 \001(\0132\027.mead101.mead.EventDate\022\021\n\tis"
  "_winner\030\t \001(\010\022!\n\031metadata_source_referen"
  "ce\030\n \003(\t\"p\n\016BeatsPerMinute\022!\n\031metadata_s"
  "ource_reference\030\001 \003(\t\022,\n\nmodulation\030\002 \003("
  "\0132\030.mead101.mead.Modulation\022\r\n\005value\030\003 \001"
  "(\001\"\207\001\n\tBiography\022,\n\006author\030\001 \003(\0132\034.mead1"
  "01.mead.PartyWithNames\022!\n\031metadata_sourc"
  "e_reference\030\002 \003(\t\022)\n\004text\030\003 \003(\0132\033.mead10"
  "1.mead.BiographyText\"\345\001\n\rBiographyText\022D"
  "\n\031applicable_territory_code\030\001 \001(\0132!.mead"
  "101.avs.CurrentTerritoryCode\022*\n\006format\030\002"
  " \001(\0132\032.mead101.avs.TextCodecType\022 \n\030lang"
  "uage_and_script_code\030\003 \001(\t\022\021\n\tnamespace\030"
  "\004 \001(\t\022\032\n\022user_defined_value\030\005 \001(\t\022\021\n\text"
  "_value\030\006 \001(\t\"5\n\rCatalogNumber\022\021\n\tnamespa"
  "ce\030\001 \001(\t\022\021\n\text_value\030\002 \001(\t\"T\n\010Category\022"
  "\033\n\023any_attribute_value\030\001 \003(\t\022\r\n\005label\030\002 "
  "\001(\t\022\016\n\006scheme\030\003 \001(\t\022\014\n\004term\030\004 \001(\t\"\241\001\n\nCh"
  "artEntry\022-\n\007comment\030\001 \003(\0132\034.mead101.mead"
  ".TextWithFormat\022(\n\004date\030\002 \001(\0132\032.mead101."
  "mead.ddex_IsoDate\022(\n\010duration\030\003 \001(\0132\026.me"
  "ad101.mead.Duration\022\020\n\010position\030\004 \001(\005\"o\n"
  "\tChartName\022 \n\030language_and_script_code\030\001"
  " \001(\t\022\014\n\004name\030\002 \001(\t\0222\n\rpronunciation\030\003 \003("
  "\0132\033.mead101.mead.Pronunciation\"\216\002\n\022Child"
  "WorkHierarchy\022/\n\005child\030\001 \003(\0132 .mead101.m"
  "ead.ChildWorkHierarchy\022 \n\004form\030\002 \001(\0132\022.m"
  "ead101.mead.Form\022\023\n\013is_complete\030\003 \001(\010\022\034\n"
  "\024is_described_element\030\004 \001(\010\022\027\n\017sequence_"
  "number\030\005 \001(\005\022,\n\007work_id\030\006 \001(\0132\033.mead101."
  "mead.MusicalWorkId\022+\n\nwork_title\030\007 \003(\0132\027"
  ".mead101.mead.WorkTitle\"\243\001\n\017ClassicalPer"
  "iod\022D\n\031applicable_territory_code\030\001 \001(\0132!"
  ".mead101.avs.CurrentTerritoryCode\022!\n\031met"
  "adata_source_reference\030\002 \003(\t\022\'\n\004name\030\003 \001"
  "(\0132\031.mead101.mead.PeriodValue\"\231\002\n\016Commen"
  "taryNote\022D\n\031applicable_territory_code\030\001 "
  "\001(\0132!.mead101.avs.CurrentTerritoryCode\022,"
  "\n\006author\030\002 \003(\0132\034.mead101.mead.PartyWithN"
  "ames\022>\n\024commentary_note_type\030\003 \003(\0132 .mea"
  "d101.mead.CommentaryNoteType\022!\n\031metadata"
  "_source_reference\030\004 \003(\t\0220\n\004text\030\005 \003(\0132\"."
  "mead101.mead.TextWithoutTerritory\"w\n\022Com"
  "mentaryNoteType\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022us"
  "er_defined_value\030\002 \001(\t\0222\n\text_value\030\003 \001("
  "\0132\037.mead101.avs.CommentaryNoteType\"T\n\007Co"
  "ntent\022\033\n\023any_attribute_value\030\001 \003(\t\022\021\n\tan"
  "y_value\030\002 \003(\t\022\013\n\003src\030\003 \001(\t\022\014\n\004type\030\004 \001(\t"
  "\"\205\001\n\024CurrentTerritoryCode\0227\n\017identifier_"
  "type\030\001 \001(\0132\036.mead101.avs.TerritoryCodeTy"
  "pe\0224\n\text_value\030\002 \001(\0132!.mead101.avs.Curr"
  "entTerritoryCode\"\356\001\n\023DanceAndRhythmStyle"
  "\022D\n\031applicable_territory_code\030\001 \001(\0132!.me"
  "ad101.avs.CurrentTerritoryCode\0227\n\013descri"
  "ption\030\002 \003(\0132\".mead101.mead.TextWithoutTe"
  "rritory\022!\n\031metadata_source_reference\030\003 \003"
  "(\t\0225\n\005value\030\004 \001(\0132&.mead101.mead.DanceAn"
  "dRhythmStyleValue\"~\n\030DanceAndRhythmStyle"
  "Value\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022user_defined"
  "_value\030\002 \001(\t\0223\n\text_value\030\003 \001(\0132 .mead10"
  "1.avs.DanceAndRhythmStyle\"M\n\004Date\022\026\n\016is_"
  "approximate\030\001 \001(\010\022-\n\text_value\030\002 \001(\0132\032.m"
  "ead101.mead.ddex_IsoDate\":\n\010DateTime\022\033\n\023"
  "any_attribute_value\030\001 \003(\t\022\021\n\text_value\030\002"
  " \001(\t\"\244\002\n\020DerivedRecording\022G\n\023display_art"
  "ist_name\030\001 \001(\0132*.mead101.mead.DisplayArt"
  "istNameWithDefault\022!\n\031metadata_source_re"
  "ference\030\002 \003(\t\022@\n\025related_resource_type\030\003"
  " \001(\0132!.mead101.mead.RelatedResourceType\022"
  "-\n\013resource_id\030\004 \001(\0132\030.mead101.mead.Reso"
  "urceId\0223\n\005title\030\005 \003(\0132$.mead101.mead.Tit"
  "leWithPronunciation\"\264\001\n\017DetailedHashSum\022"
  "5\n\talgorithm\030\001 \001(\0132\".mead101.mead.HashSu"
  "mAlgorithmType\022.\n\tdata_type\030\002 \001(\0132\033.mead"
  "101.avs.BinaryDataType\022\026\n\016hash_sum_value"
  "\030\003 \001(\t\022\021\n\tparameter\030\004 \001(\t\022\017\n\007version\030\005 \001"
  "(\t\"\252\001\n\017DetailedPartyId\022\030\n\020cisac_society_"
  "id\030\001 \001(\t\022\017\n\007d_p_i_d\030\002 \001(\t\022\r\n\005i_p_n\030\003 \001(\t"
  "\022\017\n\007i_s_n_i\030\004 \001(\t\022\027\n\017ipi_name_number\030\005 \001"
  "(\t\0223\n\016proprietary_id\030\006 \003(\0132\033.mead101.mea"
  "d.ProprietaryId\"\253\001\n\rDisplayArtist\022\017\n\007d_p"
  "_i_d\030\001 \001(\t\022\033\n\023display_artist_name\030\002 \001(\t\022"
  "\r\n\005i_p_n\030\003 \001(\t\022\017\n\007i_s_n_i\030\004 \001(\t\022\027\n\017ipi_n"
  "ame_number\030\005 \001(\t\0223\n\016proprietary_id\030\006 \003(\013"
  "2\033.mead101.mead.ProprietaryId\"\255\001\n\034Displa"
  "yArtistNameWithDefault\022D\n\031applicable_ter"
  "ritory_code\030\001 \001(\0132!.mead101.avs.CurrentT"
  "erritoryCode\022\022\n\nis_default\030\002 \001(\010\022 \n\030lang"
  "uage_and_script_code\030\003 \001(\t\022\021\n\text_value\030"
  "\004 \001(\t\"\222\001\n\"DisplayArtistNameWithPronuncia"
  "tion\0228\n\004name\030\001 \001(\0132*.mead101.mead.Displa"
  "yArtistNameWithDefault\0222\n\rpronunciation\030"
  "\002 \003(\0132\033.mead101.mead.Pronunciation\"\323\001\n\017D"
  "isplaySubTitle\022\035\n\025is_displayed_in_title\030"
  "\001 \001(\010\022\021\n\tnamespace\030\002 \001(\t\0222\n\rpronunciatio"
  "n\030\003 \003(\0132\033.mead101.mead.Pronunciation\022\027\n\017"
  "sequence_number\030\004 \001(\005\022\026\n\016sub_title_type\030"
  "\005 \001(\t\022\r\n\005title\030\006 \001(\t\022\032\n\022user_defined_val"
  "ue\030\007 \001(\t\"\372\001\n\014DisplayTitle\022D\n\031applicable_"
  "territory_code\030\001 \001(\0132!.mead101.avs.Curre"
  "ntTerritoryCode\022\022\n\nis_default\030\002 \001(\010\022 \n\030l"
  "anguage_and_script_code\030\003 \001(\t\0220\n\tsub_tit"
  "le\030\004 \003(\0132\035.mead101.mead.DisplaySubTitle\022"
  "<\n\ntitle_text\030\005 \001(\0132(.mead101.mead.Title"
  "TextWithPronunciation\"\203\001\n\010Duration\022\021\n\tna"
  "mespace\030\001 \001(\t\0225\n\020unit_of_duration\030\002 \001(\0132"
  "\033.mead101.avs.UnitOfDuration\022\032\n\022user_def"
  "ined_value\030\003 \001(\t\022\021\n\text_value\030\004 \001(\t\"\236\005\n\005"
  "Entry\022\"\n\005party\030\001 \001(\0132\023.mead101.mead.Part"
  "y\022&\n\007release\030\002 \001(\0132\025.mead101.mead.Releas"
  "e\022(\n\010resource\030\003 \001(\0132\026.mead101.mead.Resou"
  "rce\022\027\n\017subscription_id\030\004 \001(\t\022 \n\004work\030\005 \001"
  "(\0132\022.mead101.mead.Work\022\033\n\023any_attribute_"
  "value\030\006 \003(\t\022$\n\006author\030\007 \003(\0132\024.mead101.me"
  "ad.Person\022(\n\010category\030\010 \003(\0132\026.mead101.me"
  "ad.Category\022&\n\007content\030\t \001(\0132\025.mead101.m"
  "ead.Content\022)\n\013contributor\030\n \003(\0132\024.mead1"
  "01.mead.Person\022\034\n\002id\030\013 \001(\0132\020.mead101.mea"
  "d.Id\022 \n\004link\030\014 \003(\0132\022.mead101.mead.Link\022)"
  "\n\tpublished\030\r \001(\0132\026.mead101.mead.DateTim"
  "e\022\"\n\006rights\030\016 \001(\0132\022.mead101.mead.Text\022$\n"
  "\006source\030\017 \001(\0132\024.mead101.mead.Source\022#\n\007s"
  "ummary\030\020 \001(\0132\022.mead101.mead.Text\022!\n\005titl"
  "e\030\021 \001(\0132\022.mead101.mead.Text\022\'\n\007updated\030\022"
  " \001(\0132\026.mead101.mead.DateTime\"\320\002\n\005Epoch\022D"
  "\n\031applicable_territory_code\030\001 \001(\0132!.mead"
  "101.avs.CurrentTerritoryCode\022$\n\010end_date"
  "\030\002 \001(\0132\022.mead101.mead.Date\022!\n\031metadata_s"
  "ource_reference\030\003 \003(\t\0224\n\016related_artist\030"
  "\004 \003(\0132\034.mead101.mead.PartyWithNames\0227\n\020r"
  "elated_creation\030\005 \003(\0132\035.mead101.mead.Rel"
  "atedCreation\022&\n\nstart_date\030\006 \001(\0132\022.mead1"
  "01.mead.Date\022!\n\005value\030\007 \003(\0132\022.mead101.me"
  "ad.Name\"\371\001\n\tEventDate\022@\n\031applicable_terr"
  "itory_code\030\001 \001(\0132\035.mead101.avs.AllTerrit"
  "oryCode\022\020\n\010is_after\030\002 \001(\010\022\026\n\016is_approxim"
  "ate\030\003 \001(\010\022\021\n\tis_before\030\004 \001(\010\022 \n\030language"
  "_and_script_code\030\005 \001(\t\022\034\n\024location_descr"
  "iption\030\006 \001(\t\022-\n\text_value\030\007 \001(\0132\032.mead10"
  "1.mead.ddex_IsoDate\"\326\001\n\rEventDateTime\022\020\n"
  "\010is_after\030\001 \001(\010\022\026\n\016is_approximate\030\002 \001(\010\022"
  "\021\n\tis_before\030\003 \001(\010\022 \n\030language_and_scrip"
  "t_code\030\004 \001(\t\022\034\n\024location_description\030\005 \001"
  "(\t\0225\n\016territory_code\030\006 \001(\0132\035.mead101.avs"
  ".AllTerritoryCode\022\021\n\text_value\030\007 \001(\t\"\340\001\n"
  "\025EventDateWithoutFlags\022@\n\031applicable_ter"
  "ritory_code\030\001 \001(\0132\035.mead101.avs.AllTerri"
  "toryCode\022\026\n\016is_approximate\030\002 \001(\010\022 \n\030lang"
  "uage_and_script_code\030\003 \001(\t\022\034\n\024location_d"
  "escription\030\004 \001(\t\022-\n\text_value\030\005 \001(\0132\032.me"
  "ad101.mead.ddex_IsoDate\"\233\004\n\004Feed\022\033\n\023any_"
  "attribute_value\030\001 \003(\t\022\021\n\tany_value\030\002 \003(\t"
  "\022$\n\006author\030\003 \003(\0132\024.mead101.mead.Person\022("
  "\n\010category\030\004 \003(\0132\026.mead101.mead.Category"
  "\022)\n\013contributor\030\005 \003(\0132\024.mead101.mead.Per"
  "son\022\"\n\005entry\030\006 \003(\0132\023.mead101.mead.Entry\022"
  "*\n\tgenerator\030\007 \001(\0132\027.mead101.mead.Genera"
  "tor\022 \n\004icon\030\010 \001(\0132\022.mead101.mead.Icon\022\034\n"
  "\002id\030\t \001(\0132\020.mead101.mead.Id\022 \n\004link\030\n \003("
  "\0132\022.mead101.mead.Link\022 \n\004logo\030\013 \001(\0132\022.me"
  "ad101.mead.Logo\022\"\n\006rights\030\014 \001(\0132\022.mead10"
  "1.mead.Text\022$\n\010subtitle\030\r \001(\0132\022.mead101."
  "mead.Text\022!\n\005title\030\016 \001(\0132\022.mead101.mead."
  "Text\022\'\n\007updated\030\017 \001(\0132\026.mead101.mead.Dat"
  "eTime\"Y\n\004File\022\021\n\tfile_size\030\001 \001(\001\022/\n\010hash"
  "_sum\030\002 \001(\0132\035.mead101.mead.DetailedHashSu"
  "m\022\r\n\005u_r_i\030\003 \001(\t\"8\n\004Flag\022!\n\031metadata_sou"
  "rce_reference\030\001 \003(\t\022\r\n\005value\030\002 \001(\010\"\315\003\n\nF"
  "ocusTrack\022D\n\031applicable_territory_code\030\001"
  " \001(\0132!.mead101.avs.CurrentTerritoryCode\022"
  "3\n\007comment\030\002 \003(\0132\".mead101.mead.TextWith"
  "outTerritory\022M\n\023display_artist_name\030\003 \003("
  "\01320.mead101.mead.DisplayArtistNameWithPr"
  "onunciation\022\022\n\nis_default\030\004 \001(\010\022!\n\031metad"
  "ata_source_reference\030\005 \003(\t\022A\n\033period_of_"
  "being_focus_track\030\006 \003(\0132\034.mead101.mead.P"
  "eriodWithTime\022-\n\013resource_id\030\007 \001(\0132\030.mea"
  "d101.mead.ResourceId\022\027\n\017sequence_number\030"
  "\010 \001(\005\0223\n\005title\030\t \003(\0132$.mead101.mead.Titl"
  "eWithPronunciation\"Q\n\004Form\022!\n\031metadata_s"
  "ource_reference\030\001 \003(\t\022&\n\005value\030\002 \001(\0132\027.m"
  "ead101.mead.FormValue\"`\n\tFormValue\022\021\n\tna"
  "mespace\030\001 \001(\t\022\032\n\022user_defined_value\030\002 \001("
  "\t\022$\n\text_value\030\003 \001(\0132\021.mead101.avs.Form\""
  "Y\n\tGenerator\022\033\n\023any_attribute_value\030\001 \003("
  "\t\022\021\n\text_value\030\002 \001(\t\022\013\n\003uri\030\003 \001(\t\022\017\n\007ver"
  "sion\030\004 \001(\t\"\342\001\n\rGenreCategory\022D\n\031applicab"
  "le_territory_code\030\001 \001(\0132!.mead101.avs.Cu"
  "rrentTerritoryCode\0227\n\013description\030\002 \003(\0132"
  "\".mead101.mead.TextWithoutTerritory\022!\n\031m"
  "etadata_source_reference\030\003 \003(\t\022/\n\005value\030"
  "\004 \001(\0132 .mead101.mead.GenreCategoryValue\""
  "\226\001\n\022GenreCategoryValue\022 \n\030language_and_s"
  "cript_code\030\001 \001(\t\022\021\n\tnamespace\030\002 \001(\t\022\032\n\022u"
  "ser_defined_value\030\003 \001(\t\022/\n\text_value\030\004 \001"
  "(\0132\034.mead101.avs.ClassifiedGenre\"\365\001\n\007Har"
  "mony\022!\n\031metadata_source_reference\030\001 \003(\t\022"
  " \n\004mode\030\002 \001(\0132\022.mead101.mead.Mode\0223\n\nmod"
  "ulation\030\003 \003(\0132\037.mead101.mead.HarmonyModu"
  "lation\0224\n\017root_chord_note\030\004 \001(\0132\033.mead10"
  "1.mead.RootChordNote\022:\n\022root_chord_quali"
  "ty\030\005 \001(\0132\036.mead101.mead.RootChordQuality"
  "\"\363\001\n\021HarmonyModulation\022\017\n\007end_bar\030\001 \001(\005\022"
  "\021\n\tend_point\030\002 \001(\001\022 \n\004mode\030\003 \001(\0132\022.mead1"
  "01.mead.Mode\0224\n\017root_chord_note\030\004 \001(\0132\033."
  "mead101.mead.RootChordNote\022:\n\022root_chord"
  "_quality\030\005 \001(\0132\036.mead101.mead.RootChordQ"
  "uality\022\021\n\tstart_bar\030\006 \001(\005\022\023\n\013start_point"
  "\030\007 \001(\001\"{\n\024HashSumAlgorithmType\022\021\n\tnamesp"
  "ace\030\001 \001(\t\022\032\n\022user_defined_value\030\002 \001(\t\0224\n"
  "\text_value\030\003 \001(\0132!.mead101.avs.HashSumAl"
  "gorithmType\"\321\002\n\033HistoricChartingInformat"
  "ion\022-\n\013chart_entry\030\001 \003(\0132\030.mead101.mead."
  "ChartEntry\022+\n\nchart_name\030\002 \003(\0132\027.mead101"
  ".mead.ChartName\022-\n\007comment\030\003 \003(\0132\034.mead1"
  "01.mead.TextWithFormat\0222\n\022duration_in_ch"
  "arts\030\004 \001(\0132\026.mead101.mead.Duration\022!\n\031me"
  "tadata_source_reference\030\005 \003(\t\022:\n\016territo"
  "ry_code\030\006 \001(\0132\".mead101.mead.CurrentTerr"
  "itoryCode\022\024\n\014top_position\030\007 \001(\005\"\345\003\n#Hist"
  "oricChartingInformationForParty\022-\n\013chart"
  "_entry\030\001 \003(\0132\030.mead101.mead.ChartEntry\022+"
  "\n\nchart_name\030\002 \003(\0132\027.mead101.mead.ChartN"
  "ame\022.\n\017charted_release\030\003 \001(\0132\025.mead101.m"
  "ead.Release\0220\n\020charted_resource\030\004 \001(\0132\026."
  "mead101.mead.Resource\022(\n\014charted_work\030\005 "
  "\001(\0132\022.mead101.mead.Work\022-\n\007comment\030\006 \003(\013"
  "2\034.mead101.mead.TextWithFormat\0222\n\022durati"
  "on_in_charts\030\007 \001(\0132\026.mead101.mead.Durati"
  "on\022!\n\031metadata_source_reference\030\010 \003(\t\022:\n"
  "\016territory_code\030\t \001(\0132\".mead101.mead.Cur"
  "rentTerritoryCode\022\024\n\014top_position\030\n \001(\005\""
  "6\n\004Icon\022\033\n\023any_attribute_value\030\001 \003(\t\022\021\n\t"
  "ext_value\030\002 \001(\t\"4\n\002Id\022\033\n\023any_attribute_v"
  "alue\030\001 \003(\t\022\021\n\text_value\030\002 \001(\t\"y\n\005Image\022 "
  "\n\004file\030\001 \001(\0132\022.mead101.mead.File\022+\n\nimag"
  "e_type\030\002 \003(\0132\027.mead101.mead.ImageType\022!\n"
  "\031metadata_source_reference\030\003 \003(\t\"e\n\tImag"
  "eType\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022user_defined"
  "_value\030\002 \001(\t\022)\n\text_value\030\003 \001(\0132\026.mead10"
  "1.avs.ImageType\"]\n\nInstrument\022!\n\031metadat"
  "a_source_reference\030\001 \003(\t\022,\n\005value\030\002 \001(\0132"
  "\035.mead101.mead.InstrumentValue\"v\n\016Instru"
  "mentUsed\022\023\n\013is_featured\030\001 \001(\010\022!\n\031metadat"
  "a_source_reference\030\002 \003(\t\022,\n\005value\030\003 \001(\0132"
  "\035.mead101.mead.InstrumentValue\"p\n\017Instru"
  "mentValue\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022user_def"
  "ined_value\030\002 \001(\t\022.\n\text_value\030\003 \001(\0132\033.me"
  "ad101.avs.InstrumentType\"}\n\004Link\022\033\n\023any_"
  "attribute_value\030\001 \003(\t\022\014\n\004href\030\002 \001(\t\022\020\n\010h"
  "reflang\030\003 \001(\t\022\016\n\006length\030\004 \001(\r\022\013\n\003rel\030\005 \001"
  "(\t\022\r\n\005title\030\006 \001(\t\022\014\n\004type\030\007 \001(\t\"\231\002\n\030Loca"
  "tionAndDateOfSession\022-\n\007comment\030\001 \001(\0132\034."
  "mead101.mead.TextWithFormat\0220\n\013contribut"
  "or\030\002 \003(\0132\033.mead101.mead.PartyWithRole\022!\n"
  "\031metadata_source_reference\030\003 \003(\t\022$\n\006peri"
  "od\030\004 \001(\0132\024.mead101.mead.Period\022/\n\014sessio"
  "n_type\030\005 \003(\0132\031.mead101.mead.SessionType\022"
  "\"\n\005venue\030\006 \003(\0132\023.mead101.mead.Venue\"6\n\004L"
  "ogo\022\033\n\023any_attribute_value\030\001 \003(\t\022\021\n\text_"
  "value\030\002 \001(\t\"\253\002\n\006Lyrics\022\024\n\014is_misquoted\030\001"
  " \001(\010\022,\n\013lyrics_type\030\002 \001(\0132\027.mead101.avs."
  "LyricsType\022\035\n\025lyrics_type_namespace\030\003 \001("
  "\t\022&\n\036lyrics_type_user_defined_value\030\004 \001("
  "\t\022!\n\031metadata_source_reference\030\005 \003(\t\0222\n\r"
  "pronunciation\030\006 \003(\0132\033.mead101.mead.Pronu"
  "nciation\022\027\n\017sequence_number\030\007 \001(\005\022&\n\004tex"
  "t\030\010 \001(\0132\030.mead101.mead.LyricsText\"\205\002\n\nLy"
  "ricsText\022D\n\031applicable_territory_code\030\001 "
  "\001(\0132!.mead101.avs.CurrentTerritoryCode\022*"
  "\n\006format\030\002 \001(\0132\032.mead101.avs.TextCodecTy"
  "pe\022\030\n\020format_namespace\030\003 \001(\t\022!\n\031format_u"
  "ser_defined_value\030\004 \001(\t\022\023\n\013is_complete\030\005"
  " \001(\010\022 \n\030language_and_script_code\030\006 \001(\t\022\021"
  "\n\text_value\030\007 \001(\t\"\350\003\n\013MeadMessage\022 \n\030lan"
  "guage_and_script_code\030\001 \001(\t\0223\n\016message_h"
  "eader\030\002 \001(\0132\033.mead101.mead.MessageHeader"
  "\022>\n\024metadata_source_list\030\003 \001(\0132 .mead101"
  ".mead.MetadataSourceList\022B\n\026party_inform"
  "ation_list\030\004 \001(\0132\".mead101.mead.PartyInf"
  "ormationList\022F\n\030release_information_list"
  "\030\005 \001(\0132$.mead101.mead.ReleaseInformation"
  "List\022H\n\031resource_information_list\030\006 \001(\0132"
  "%.mead101.mead.ResourceInformationList\022\027"
  "\n\017subscription_id\030\007 \001(\t\022@\n\025work_informat"
  "ion_list\030\010 \001(\0132!.mead101.mead.WorkInform"
  "ationList\022\021\n\tany_value\030\t \003(\t\"\\\n\021MessageA"
  "uditTrail\022G\n\031message_audit_trail_event\030\001"
  " \003(\0132$.mead101.mead.MessageAuditTrailEve"
  "nt\"x\n\026MessageAuditTrailEvent\022\021\n\tdate_tim"
  "e\030\001 \001(\t\022K\n\032messaging_party_descriptor\030\002 "
  "\001(\0132\'.mead101.mead.MessagingPartyWithout"
  "Code\"\302\003\n\rMessageHeader\022<\n\023message_audit_"
  "trail\030\001 \001(\0132\037.mead101.mead.MessageAuditT"
  "rail\022=\n\024message_control_type\030\002 \001(\0132\037.mea"
  "d101.avs.MessageControlType\022!\n\031message_c"
  "reated_date_time\030\003 \001(\t\022\031\n\021message_file_n"
  "ame\030\004 \001(\t\022\022\n\nmessage_id\030\005 \001(\t\022B\n\021message"
  "_recipient\030\006 \003(\0132\'.mead101.mead.Messagin"
  "gPartyWithoutCode\022\?\n\016message_sender\030\007 \001("
  "\0132\'.mead101.mead.MessagingPartyWithoutCo"
  "de\022\031\n\021message_thread_id\030\010 \001(\t\022B\n\021sent_on"
  "_behalf_of\030\t \001(\0132\'.mead101.mead.Messagin"
  "gPartyWithoutCode\"{\n\031MessagingPartyWitho"
  "utCode\022\020\n\010party_id\030\001 \001(\t\0226\n\nparty_name\030\002"
  " \001(\0132\".mead101.mead.PartyNameWithoutCode"
  "\022\024\n\014trading_name\030\003 \001(\t\"\325\001\n\016MetadataSourc"
  "e\022>\n\024metadata_source_type\030\001 \001(\0132 .mead10"
  "1.mead.MetadataSourceType\022/\n\010party_id\030\002 "
  "\003(\0132\035.mead101.mead.DetailedPartyId\0228\n\npa"
  "rty_name\030\003 \003(\0132$.mead101.mead.PartyNameW"
  "ithTerritory\022\030\n\020source_reference\030\004 \001(\t\"K"
  "\n\022MetadataSourceList\0225\n\017metadata_source\030"
  "\001 \003(\0132\034.mead101.mead.MetadataSource\"w\n\022M"
  "etadataSourceType\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022"
  "user_defined_value\030\002 \001(\t\0222\n\text_value\030\003 "
  "\001(\0132\037.mead101.avs.MetadataSourceType\"H\n\005"
  "Meter\022\037\n\027note_equivalent_to_beat\030\001 \001(\005\022\036"
  "\n\026number_of_beats_in_bar\030\002 \001(\005\"[\n\004Mode\022\021"
  "\n\tnamespace\030\001 \001(\t\022\032\n\022user_defined_value\030"
  "\002 \001(\t\022$\n\text_value\030\003 \001(\0132\021.mead101.avs.M"
  "ode\"g\n\nModulation\022\017\n\007end_bar\030\001 \001(\005\022\021\n\ten"
  "d_point\030\002 \001(\001\022\021\n\tstart_bar\030\003 \001(\005\022\023\n\013star"
  "t_point\030\004 \001(\001\022\r\n\005value\030\005 \001(\001\"\320\001\n\004Mood\022D\n"
  "\031applicable_territory_code\030\001 \001(\0132!.mead1"
  "01.avs.CurrentTerritoryCode\0227\n\013descripti"
  "on\030\002 \003(\0132\".mead101.mead.TextWithoutTerri"
  "tory\022!\n\031metadata_source_reference\030\003 \003(\t\022"
  "&\n\005value\030\004 \001(\0132\027.mead101.mead.MoodValue\""
  "\237\001\n\tMoodValue\022\036\n\026applies_to_composition\030"
  "\001 \001(\010\022\031\n\021applies_to_lyrics\030\002 \001(\010\022\021\n\tname"
  "space\030\003 \001(\t\022\032\n\022user_defined_value\030\004 \001(\t\022"
  "(\n\text_value\030\005 \001(\0132\025.mead101.avs.MoodTyp"
  "e\"\213\001\n\rMusicalWorkId\022\037\n\027composer_catalog_"
  "number\030\001 \003(\t\022\017\n\007i_s_w_c\030\002 \001(\t\022\023\n\013opus_nu"
  "mber\030\003 \001(\t\0223\n\016proprietary_id\030\004 \003(\0132\033.mea"
  "d101.mead.ProprietaryId\";\n\004Name\022 \n\030langu"
  "age_and_script_code\030\001 \001(\t\022\021\n\text_value\030\002"
  " \001(\t\"Y\n\025NameWithPronunciation\022\014\n\004name\030\001 "
  "\001(\t\0222\n\rpronunciation\030\002 \003(\0132\033.mead101.mea"
  "d.Pronunciation\"z\n\"NameWithPronunciation"
  "AndScriptCode\022 \n\004name\030\001 \001(\0132\022.mead101.me"
  "ad.Name\0222\n\rpronunciation\030\002 \003(\0132\033.mead101"
  ".mead.Pronunciation\"\232\001\n\005Party\022\017\n\007d_p_i_d"
  "\030\001 \001(\t\022\r\n\005i_p_n\030\002 \001(\t\022\017\n\007i_s_n_i\030\003 \001(\t\022\027"
  "\n\017ipi_name_number\030\004 \001(\t\022\022\n\nparty_name\030\005 "
  "\001(\t\0223\n\016proprietary_id\030\006 \003(\0132\033.mead101.me"
  "ad.ProprietaryId\"o\n\017PartyDescriptor\022/\n\010p"
  "arty_id\030\001 \003(\0132\035.mead101.mead.DetailedPar"
  "tyId\022+\n\nparty_name\030\002 \003(\0132\027.mead101.mead."
  "PartyName\"\216\006\n\020PartyInformation\022-\n\013artist"
  "_type\030\001 \003(\0132\030.mead101.mead.ArtistType\022;\n"
  "\022artistic_influence\030\002 \003(\0132\037.mead101.mead"
  ".ArtisticInfluence\022*\n\005award\030\003 \003(\0132\033.mead"
  "101.mead.AwardForParty\022*\n\tbiography\030\004 \003("
  "\0132\027.mead101.mead.Biography\0227\n\020classical_"
  "period\030\005 \001(\0132\035.mead101.mead.ClassicalPer"
  "iod\0225\n\017commentary_note\030\006 \003(\0132\034.mead101.m"
  "ead.CommentaryNote\022\"\n\005epoch\030\007 \003(\0132\023.mead"
  "101.mead.Epoch\022-\n\013focus_track\030\010 \003(\0132\030.me"
  "ad101.mead.FocusTrack\022X\n\035historic_charti"
  "ng_information\030\t \003(\01321.mead101.mead.Hist"
  "oricChartingInformationForParty\022\"\n\005image"
  "\030\n \003(\0132\023.mead101.mead.Image\022.\n\nis_simila"
  "r\030\013 \003(\0132\032.mead101.mead.SimilarParty\022+\n\005p"
  "arty\030\014 \001(\0132\034.mead101.mead.PartyWithNames"
  "\022*\n\tpseudonym\030\r \003(\0132\027.mead101.mead.Pseud"
  "onym\0227\n\020related_creation\030\016 \003(\0132\035.mead101"
  ".mead.RelatedCreation\0223\n\016vocal_register\030"
  "\017 \001(\0132\033.mead101.mead.VocalRegister\"Q\n\024Pa"
  "rtyInformationList\0229\n\021party_information\030"
  "\001 \003(\0132\036.mead101.mead.PartyInformation\"\341\002"
  "\n\tPartyName\022,\n\020abbreviated_name\030\001 \001(\0132\022."
  "mead101.mead.Name\022%\n\tfull_name\030\002 \001(\0132\022.m"
  "ead101.mead.Name\022#\n\033full_name_ascii_tran"
  "scribed\030\003 \001(\t\022-\n\021full_name_indexed\030\004 \001(\013"
  "2\022.mead101.mead.Name\022$\n\010key_name\030\005 \001(\0132\022"
  ".mead101.mead.Name\022 \n\030language_and_scrip"
  "t_code\030\006 \001(\t\0220\n\024names_after_key_name\030\007 \001"
  "(\0132\022.mead101.mead.Name\0221\n\025names_before_k"
  "ey_name\030\010 \001(\0132\022.mead101.mead.Name\"\313\004\n\032Pa"
  "rtyNameWithPronunciation\022J\n\020abbreviated_"
  "name\030\001 \001(\01320.mead101.mead.NameWithPronun"
  "ciationAndScriptCode\022C\n\tfull_name\030\002 \001(\0132"
  "0.mead101.mead.NameWithPronunciationAndS"
  "criptCode\022H\n\033full_name_ascii_transcribed"
  "\030\003 \001(\0132#.mead101.mead.NameWithPronunciat"
  "ion\022K\n\021full_name_indexed\030\004 \001(\01320.mead101"
  ".mead.NameWithPronunciationAndScriptCode"
  "\022B\n\010key_name\030\005 \001(\01320.mead101.mead.NameWi"
  "thPronunciationAndScriptCode\022 \n\030language"
  "_and_script_code\030\006 \001(\t\022N\n\024names_after_ke"
  "y_name\030\007 \001(\01320.mead101.mead.NameWithPron"
  "unciationAndScriptCode\022O\n\025names_before_k"
  "ey_name\030\010 \001(\01320.mead101.mead.NameWithPro"
  "nunciationAndScriptCode\"\215\005\n\026PartyNameWit"
  "hTerritory\022J\n\020abbreviated_name\030\001 \001(\01320.m"
  "ead101.mead.NameWithPronunciationAndScri"
  "ptCode\022D\n\031applicable_territory_code\030\002 \001("
  "\0132!.mead101.avs.CurrentTerritoryCode\022C\n\t"
  "full_name\030\003 \001(\01320.mead101.mead.NameWithP"
  "ronunciationAndScriptCode\022H\n\033full_name_a"
  "scii_transcribed\030\004 \001(\0132#.mead101.mead.Na"
  "meWithPronunciation\022K\n\021full_name_indexed"
  "\030\005 \001(\01320.mead101.mead.NameWithPronunciat"
  "ionAndScriptCode\022B\n\010key_name\030\006 \001(\01320.mea"
  "d101.mead.NameWithPronunciationAndScript"
  "Code\022 \n\030language_and_script_code\030\007 \001(\t\022N"
  "\n\024names_after_key_name\030\010 \001(\01320.mead101.m"
  "ead.NameWithPronunciationAndScriptCode\022O"
  "\n\025names_before_key_name\030\t \001(\01320.mead101."
  "mead.NameWithPronunciationAndScriptCode\""
  "\322\001\n\024PartyNameWithoutCode\022\030\n\020abbreviated_"
  "name\030\001 \001(\t\022\021\n\tfull_name\030\002 \001(\t\022#\n\033full_na"
  "me_ascii_transcribed\030\003 \001(\t\022\031\n\021full_name_"
  "indexed\030\004 \001(\t\022\020\n\010key_name\030\005 \001(\t\022\034\n\024names"
  "_after_key_name\030\006 \001(\t\022\035\n\025names_before_ke"
  "y_name\030\007 \001(\t\"\303\001\n\016PartyWithNames\022\017\n\007d_p_i"
  "_d\030\001 \001(\t\022\r\n\005i_p_n\030\002 \001(\t\022\017\n\007i_s_n_i\030\003 \001(\t"
  "\022\027\n\017ipi_name_number\030\004 \001(\t\0222\n\004name\030\005 \003(\0132"
  "$.mead101.mead.PartyNameWithTerritory\0223\n"
  "\016proprietary_id\030\006 \003(\0132\033.mead101.mead.Pro"
  "prietaryId\"\201\002\n\rPartyWithRole\022\017\n\007d_p_i_d\030"
  "\001 \001(\t\022\r\n\005i_p_n\030\002 \001(\t\022\017\n\007i_s_n_i\030\003 \001(\t\022\027\n"
  "\017ipi_name_number\030\004 \001(\t\022<\n\nparty_name\030\005 \001"
  "(\0132(.mead101.mead.PartyNameWithPronuncia"
  "tion\0223\n\016proprietary_id\030\006 \003(\0132\033.mead101.m"
  "ead.ProprietaryId\0223\n\004role\030\007 \001(\0132%.mead10"
  "1.mead.ResourceContributorRole\"\312\001\n\006Perio"
  "d\022)\n\010end_date\030\001 \001(\0132\027.mead101.mead.Event"
  "Date\0222\n\rend_date_time\030\002 \001(\0132\033.mead101.me"
  "ad.EventDateTime\022+\n\nstart_date\030\003 \001(\0132\027.m"
  "ead101.mead.EventDate\0224\n\017start_date_time"
  "\030\004 \001(\0132\033.mead101.mead.EventDateTime\"d\n\013P"
  "eriodValue\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022user_de"
  "fined_value\030\002 \001(\t\022&\n\text_value\030\003 \001(\0132\023.m"
  "ead101.avs.Period\"@\n\016PeriodWithTime\022\025\n\re"
  "nd_date_time\030\001 \001(\t\022\027\n\017start_date_time\030\002 "
  "\001(\t\"u\n\006Person\022\033\n\023any_attribute_value\030\001 \003"
  "(\t\022\021\n\tany_value\030\002 \001(\t\022\r\n\005email\030\003 \001(\t\022\014\n\004"
  "name\030\004 \001(\t\022\036\n\003uri\030\005 \001(\0132\021.mead101.mead.U"
  "RI\"\302\001\n\rPronunciation\022\032\n\022encoding_namespa"
  "ce\030\001 \001(\t\0220\n\rencoding_type\030\002 \001(\0132\031.mead10"
  "1.avs.EncodingType\022#\n\033encoding_user_defi"
  "ned_value\030\003 \001(\t\022\024\n\014is_canonical\030\004 \001(\010\022\025\n"
  "\rlanguage_code\030\005 \001(\t\022\021\n\text_value\030\006 \001(\t\""
  "5\n\rProprietaryId\022\021\n\tnamespace\030\001 \001(\t\022\021\n\te"
  "xt_value\030\002 \001(\t\"\325\001\n\tPseudonym\022D\n\031applicab"
  "le_territory_code\030\001 \001(\0132!.mead101.avs.Cu"
  "rrentTerritoryCode\022\022\n\nis_default\030\002 \001(\010\022\023"
  "\n\013is_official\030\003 \001(\010\022!\n\031metadata_source_r"
  "eference\030\004 \003(\t\0226\n\004name\030\005 \001(\0132(.mead101.m"
  "ead.PartyNameWithPronunciation\"\301\002\n\rRecor"
  "dingPart\022)\n\007comment\030\001 \003(\0132\030.mead101.mead"
  ".Annotation\022\021\n\tend_point\030\002 \001(\001\022!\n\031metada"
  "ta_source_reference\030\003 \003(\t\022<\n\023recording_p"
  "art_type\030\004 \001(\0132\037.mead101.mead.RecordingP"
  "artType\022\027\n\017sequence_number\030\005 \001(\005\022\023\n\013star"
  "t_point\030\006 \001(\001\022*\n\004unit\030\007 \001(\0132\034.mead101.av"
  "s.UnitOfCuePoints\0227\n\021usage_information\030\010"
  " \003(\0132\034.mead101.mead.TextWithFormat\"u\n\021Re"
  "cordingPartType\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022us"
  "er_defined_value\030\002 \001(\t\0221\n\text_value\030\003 \001("
  "\0132\036.mead101.avs.RecordingPartType\"\330\001\n\017Re"
  "latedCreation\0224\n\017musical_work_id\030\001 \001(\0132\033"
  ".mead101.mead.MusicalWorkId\022+\n\nrelease_i"
  "d\030\002 \001(\0132\027.mead101.mead.ReleaseId\022-\n\013reso"
  "urce_id\030\003 \001(\0132\030.mead101.mead.ResourceId\022"
  "3\n\005title\030\004 \001(\0132$.mead101.mead.TitleWithP"
  "ronunciation\"\214\001\n\017RelatedResource\022-\n\013reso"
  "urce_id\030\001 \001(\0132\030.mead101.mead.ResourceId\022"
  "J\n\032resource_relationship_type\030\002 \001(\0132&.me"
  "ad101.mead.ResourceRelationshipType\"y\n\023R"
  "elatedResourceType\022\021\n\tnamespace\030\001 \001(\t\022\032\n"
  "\022user_defined_value\030\002 \001(\t\0223\n\text_value\030\003"
  " \001(\0132 .mead101.avs.RelatedResourceType\"\375"
  "\001\n\013RelatedWork\022!\n\031metadata_source_refere"
  "nce\030\001 \003(\t\022,\n\007work_id\030\002 \001(\0132\033.mead101.mea"
  "d.MusicalWorkId\022B\n\026work_relationship_typ"
  "e\030\003 \001(\0132\".mead101.mead.WorkRelationshipT"
  "ype\022+\n\nwork_title\030\004 \003(\0132\027.mead101.mead.W"
  "orkTitle\022,\n\006writer\030\005 \003(\0132\034.mead101.mead."
  "PartyWithNames\"\261\001\n\007Release\0223\n\016display_ar"
  "tist\030\001 \003(\0132\033.mead101.mead.DisplayArtist\022"
  "\r\n\005g_rid\030\002 \001(\t\022\017\n\007i_c_p_n\030\003 \001(\t\022\036\n\026propr"
  "ietary_release_id\030\004 \001(\t\0221\n\rrelease_title"
  "\030\005 \003(\0132\032.mead101.mead.ReleaseTitle\"\246\001\n\tR"
  "eleaseId\0223\n\016catalog_number\030\001 \001(\0132\033.mead1"
  "01.mead.CatalogNumber\022\r\n\005g_rid\030\002 \001(\t\022\017\n\007"
  "i_c_p_n\030\003 \001(\t\022\017\n\007i_s_r_c\030\004 \001(\t\0223\n\016propri"
  "etary_id\030\005 \003(\0132\033.mead101.mead.Proprietar"
  "yId\"\345\006\n\022ReleaseInformation\0229\n\021alternativ"
  "e_title\030\001 \003(\0132\036.mead101.mead.Alternative"
  "Title\022D\n\031applicable_territory_code\030\002 \001(\013"
  "2!.mead101.avs.CurrentTerritoryCode\022;\n\022a"
  "rtistic_influence\030\003 \003(\0132\037.mead101.mead.A"
  "rtisticInfluence\022\"\n\005award\030\004 \003(\0132\023.mead10"
  "1.mead.Award\0225\n\017commentary_note\030\005 \003(\0132\034."
  "mead101.mead.CommentaryNote\022\"\n\005epoch\030\006 \003"
  "(\0132\023.mead101.mead.Epoch\0223\n\016genre_categor"
  "y\030\007 \003(\0132\033.mead101.mead.GenreCategory\022P\n\035"
  "historic_charting_information\030\010 \003(\0132).me"
  "ad101.mead.HistoricChartingInformation\022\""
  "\n\005image\030\t \003(\0132\023.mead101.mead.Image\0220\n\nis"
  "_similar\030\n \003(\0132\034.mead101.mead.SimilarRel"
  "ease\022 \n\004mood\030\013 \003(\0132\022.mead101.mead.Mood\022<"
  "\n\030priority_period_end_date\030\014 \001(\0132\032.mead1"
  "01.mead.ddex_IsoDate\022>\n\032priority_period_"
  "start_date\030\r \001(\0132\032.mead101.mead.ddex_Iso"
  "Date\0225\n\017release_summary\030\016 \001(\0132\034.mead101."
  "mead.ReleaseSummary\022:\n\022sub_genre_categor"
  "y\030\017 \001(\0132\036.mead101.mead.SubGenreCategory\022"
  "\"\n\005theme\030\020 \003(\0132\023.mead101.mead.Theme\"W\n\026R"
  "eleaseInformationList\022=\n\023release_informa"
  "tion\030\001 \003(\0132 .mead101.mead.ReleaseInforma"
  "tion\"\256\001\n\016ReleaseSummary\022<\n\016display_artis"
  "t\030\001 \003(\0132$.mead101.mead.PartyNameWithTerr"
  "itory\0221\n\rdisplay_title\030\002 \003(\0132\032.mead101.m"
  "ead.DisplayTitle\022+\n\nrelease_id\030\003 \001(\0132\027.m"
  "ead101.mead.ReleaseId\"C\n\014ReleaseTitle\022 \n"
  "\030language_and_script_code\030\001 \001(\t\022\021\n\text_v"
  "alue\030\002 \001(\t\"\276\001\n\010Resource\022\026\n\016catalog_numbe"
  "r\030\001 \001(\t\0223\n\016display_artist\030\002 \003(\0132\033.mead10"
  "1.mead.DisplayArtist\022\017\n\007i_s_r_c\030\003 \001(\t\022\037\n"
  "\027proprietary_resource_id\030\004 \001(\t\0223\n\016resour"
  "ce_title\030\005 \003(\0132\033.mead101.mead.ResourceTi"
  "tle\"\201\001\n\027ResourceContributorRole\022\021\n\tnames"
  "pace\030\001 \001(\t\022\032\n\022user_defined_value\030\002 \001(\t\0227"
  "\n\text_value\030\003 \001(\0132$.mead101.avs.Resource"
  "ContributorRole\"\357\001\n\nResourceId\0223\n\016catalo"
  "g_number\030\001 \001(\0132\033.mead101.mead.CatalogNum"
  "ber\022\017\n\007i_s_a_n\030\002 \001(\t\022\017\n\007i_s_b_n\030\003 \001(\t\022\017\n"
  "\007i_s_m_n\030\004 \001(\t\022\017\n\007i_s_r_c\030\005 \001(\t\022\017\n\007i_s_s"
  "_n\030\006 \001(\t\0223\n\016proprietary_id\030\007 \003(\0132\033.mead1"
  "01.mead.ProprietaryId\022\017\n\007s_i_c_i\030\010 \001(\t\022\021"
  "\n\tv_i_s_a_n\030\t \001(\t\"\323\r\n\023ResourceInformatio"
  "n\0223\n\016absolute_pitch\030\001 \001(\0132\033.mead101.mead"
  ".AbsolutePitch\0229\n\021alternative_title\030\002 \003("
  "\0132\036.mead101.mead.AlternativeTitle\022D\n\031app"
  "licable_territory_code\030\003 \001(\0132!.mead101.a"
  "vs.CurrentTerritoryCode\022;\n\022artistic_infl"
  "uence\030\004 \003(\0132\037.mead101.mead.ArtisticInflu"
  "ence\022\"\n\005award\030\005 \003(\0132\023.mead101.mead.Award"
  "\0226\n\020beats_per_minute\030\006 \001(\0132\034.mead101.mea"
  "d.BeatsPerMinute\0225\n\017commentary_note\030\007 \003("
  "\0132\034.mead101.mead.CommentaryNote\022A\n\026dance"
  "_and_rhythm_style\030\010 \003(\0132!.mead101.mead.D"
  "anceAndRhythmStyle\022\"\n\005epoch\030\t \003(\0132\023.mead"
  "101.mead.Epoch\0223\n\016genre_category\030\n \003(\0132\033"
  ".mead101.mead.GenreCategory\022&\n\007harmony\030\013"
  " \001(\0132\025.mead101.mead.Harmony\022P\n\035historic_"
  "charting_information\030\014 \003(\0132).mead101.mea"
  "d.HistoricChartingInformation\022\"\n\005image\030\r"
  " \003(\0132\023.mead101.mead.Image\0225\n\017instrument_"
  "used\030\016 \003(\0132\034.mead101.mead.InstrumentUsed"
  "\022$\n\010is_cover\030\017 \001(\0132\022.mead101.mead.Flag\022\'"
  "\n\013is_original\030\020 \001(\0132\022.mead101.mead.Flag\022"
  "1\n\nis_similar\030\021 \003(\0132\035.mead101.mead.Simil"
  "arResource\022L\n\034location_and_date_of_sessi"
  "on\030\022 \003(\0132&.mead101.mead.LocationAndDateO"
  "fSession\022(\n\013lyric_theme\030\023 \003(\0132\023.mead101."
  "mead.Theme\022$\n\006lyrics\030\024 \003(\0132\024.mead101.mea"
  "d.Lyrics\022 \n\004mood\030\025 \003(\0132\022.mead101.mead.Mo"
  "od\022<\n\030priority_period_end_date\030\026 \001(\0132\032.m"
  "ead101.mead.ddex_IsoDate\022>\n\032priority_per"
  "iod_start_date\030\027 \001(\0132\032.mead101.mead.ddex"
  "_IsoDate\022/\n\022programmatic_theme\030\030 \003(\0132\023.m"
  "ead101.mead.Theme\0223\n\016recording_part\030\031 \003("
  "\0132\033.mead101.mead.RecordingPart\022<\n\020relate"
  "d_resource\030\032 \003(\0132\".mead101.mead.Resource"
  "Relationship\0227\n\020resource_summary\030\033 \001(\0132\035"
  ".mead101.mead.ResourceSummary\022$\n\006sample\030"
  "\034 \003(\0132\024.mead101.mead.Sample\022:\n\022sub_genre"
  "_category\030\035 \001(\0132\036.mead101.mead.SubGenreC"
  "ategory\0223\n\016time_signature\030\036 \001(\0132\033.mead10"
  "1.mead.TimeSignature\022\"\n\005usage\030\037 \003(\0132\023.me"
  "ad101.mead.Usage\0228\n\021used_musical_work\030  "
  "\003(\0132\035.mead101.mead.UsedMusicalWork\0223\n\016vo"
  "cal_register\030! \001(\0132\033.mead101.mead.VocalR"
  "egister\"Z\n\027ResourceInformationList\022\?\n\024re"
  "source_information\030\001 \003(\0132!.mead101.mead."
  "ResourceInformation\"\250\002\n\024ResourceRelation"
  "ship\022G\n\023display_artist_name\030\001 \001(\0132*.mead"
  "101.mead.DisplayArtistNameWithDefault\022!\n"
  "\031metadata_source_reference\030\002 \003(\t\022@\n\025rela"
  "ted_resource_type\030\003 \001(\0132!.mead101.mead.R"
  "elatedResourceType\022-\n\013resource_id\030\004 \001(\0132"
  "\030.mead101.mead.ResourceId\0223\n\005title\030\005 \003(\013"
  "2$.mead101.mead.TitleWithPronunciation\"\203"
  "\001\n\030ResourceRelationshipType\022\021\n\tnamespace"
  "\030\001 \001(\t\022\032\n\022user_defined_value\030\002 \001(\t\0228\n\tex"
  "t_value\030\003 \001(\0132%.mead101.avs.ResourceRela"
  "tionshipType\"\261\001\n\017ResourceSummary\022<\n\016disp"
  "lay_artist\030\001 \003(\0132$.mead101.mead.PartyNam"
  "eWithTerritory\0221\n\rdisplay_title\030\002 \003(\0132\032."
  "mead101.mead.DisplayTitle\022-\n\013resource_id"
  "\030\003 \001(\0132\030.mead101.mead.ResourceId\"D\n\rReso"
  "urceTitle\022 \n\030language_and_script_code\030\001 "
  "\001(\t\022\021\n\text_value\030\002 \001(\t\"m\n\rRootChordNote\022"
  "\021\n\tnamespace\030\001 \001(\t\022\032\n\022user_defined_value"
  "\030\002 \001(\t\022-\n\text_value\030\003 \001(\0132\032.mead101.avs."
  "RootChordNote\"s\n\020RootChordQuality\022\021\n\tnam"
  "espace\030\001 \001(\t\022\032\n\022user_defined_value\030\002 \001(\t"
  "\0220\n\text_value\030\003 \001(\0132\035.mead101.avs.RootCh"
  "ordQuality\"\336\002\n\006Sample\022\030\n\020contains_sample"
  "s\030\001 \001(\010\0221\n\013description\030\002 \003(\0132\034.mead101.m"
  "ead.TextWithFormat\022)\n\013host_timing\030\003 \003(\0132"
  "\024.mead101.mead.Timing\022\036\n\026is_contained_in"
  "_sample\030\004 \001(\010\022!\n\031metadata_source_referen"
  "ce\030\005 \003(\t\0227\n\020related_resource\030\006 \001(\0132\035.mea"
  "d101.mead.ResourceSummary\0223\n\016sample_feat"
  "ure\030\007 \003(\0132\033.mead101.mead.SampleFeature\022+"
  "\n\rsample_timing\030\010 \003(\0132\024.mead101.mead.Tim"
  "ing\"D\n\rSampleFeature\022 \n\030language_and_scr"
  "ipt_code\030\001 \001(\t\022\021\n\text_value\030\002 \001(\t\"i\n\013Ses"
  "sionType\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022user_defi"
  "ned_value\030\002 \001(\t\022+\n\text_value\030\003 \001(\0132\030.mea"
  "d101.avs.SessionType\"\215\001\n\014SimilarParty\022-\n"
  "\013description\030\001 \003(\0132\030.mead101.mead.Annota"
  "tion\022!\n\031metadata_source_reference\030\002 \003(\t\022"
  "+\n\005party\030\003 \001(\0132\034.mead101.mead.PartyWithN"
  "ames\"\212\001\n\016SimilarRelease\022-\n\013description\030\001"
  " \003(\0132\030.mead101.mead.Annotation\022!\n\031metada"
  "ta_source_reference\030\002 \003(\t\022&\n\007release\030\003 \001"
  "(\0132\025.mead101.mead.Release\"\215\001\n\017SimilarRes"
  "ource\022-\n\013description\030\001 \003(\0132\030.mead101.mea"
  "d.Annotation\022!\n\031metadata_source_referenc"
  "e\030\002 \003(\t\022(\n\010resource\030\003 \001(\0132\026.mead101.mead"
  ".Resource\"\201\001\n\013SimilarWork\022-\n\013description"
  "\030\001 \003(\0132\030.mead101.mead.Annotation\022!\n\031meta"
  "data_source_reference\030\002 \003(\t\022 \n\004work\030\003 \001("
  "\0132\022.mead101.mead.Work\"\371\003\n\006Source\022\033\n\023any_"
  "attribute_value\030\001 \003(\t\022\021\n\tany_value\030\002 \003(\t"
  "\022$\n\006author\030\003 \003(\0132\024.mead101.mead.Person\022("
  "\n\010category\030\004 \003(\0132\026.mead101.mead.Category"
  "\022)\n\013contributor\030\005 \003(\0132\024.mead101.mead.Per"
  "son\022*\n\tgenerator\030\006 \001(\0132\027.mead101.mead.Ge"
  "nerator\022 \n\004icon\030\007 \001(\0132\022.mead101.mead.Ico"
  "n\022\034\n\002id\030\010 \001(\0132\020.mead101.mead.Id\022 \n\004link\030"
  "\t \003(\0132\022.mead101.mead.Link\022 \n\004logo\030\n \001(\0132"
  "\022.mead101.mead.Logo\022\"\n\006rights\030\013 \001(\0132\022.me"
  "ad101.mead.Text\022$\n\010subtitle\030\014 \001(\0132\022.mead"
  "101.mead.Text\022!\n\005title\030\r \001(\0132\022.mead101.m"
  "ead.Text\022\'\n\007updated\030\016 \001(\0132\026.mead101.mead"
  ".DateTime\"i\n\020SubGenreCategory\022!\n\031metadat"
  "a_source_reference\030\001 \003(\t\0222\n\005value\030\002 \003(\0132"
  "#.mead101.mead.SubGenreCategoryValue\"p\n\025"
  "SubGenreCategoryValue\022\021\n\tnamespace\030\001 \001(\t"
  "\022\032\n\022user_defined_value\030\002 \001(\t\022(\n\text_valu"
  "e\030\003 \001(\0132\025.mead101.avs.SubGenre\"S\n\005Tempo\022"
  "!\n\031metadata_source_reference\030\001 \003(\t\022\'\n\005va"
  "lue\030\002 \001(\0132\030.mead101.mead.TempoValue\"b\n\nT"
  "empoValue\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022user_def"
  "ined_value\030\002 \001(\t\022%\n\text_value\030\003 \001(\0132\022.me"
  "ad101.avs.Tempo\"`\n\004Text\022\033\n\023any_attribute"
  "_value\030\001 \003(\t\022\021\n\tany_value\030\002 \001(\t\022(\n\004type\030"
  "\003 \001(\0132\032.mead101.avs.TextType_ATOM\"\372\001\n\016Te"
  "xtWithFormat\022D\n\031applicable_territory_cod"
  "e\030\001 \001(\0132!.mead101.avs.CurrentTerritoryCo"
  "de\022*\n\006format\030\002 \001(\0132\032.mead101.avs.TextCod"
  "ecType\022\022\n\nis_default\030\003 \001(\010\022 \n\030language_a"
  "nd_script_code\030\004 \001(\t\022\021\n\tnamespace\030\005 \001(\t\022"
  "\032\n\022user_defined_value\030\006 \001(\t\022\021\n\text_value"
  "\030\007 \001(\t\"\200\002\n\024TextWithoutTerritory\022D\n\031appli"
  "cable_territory_code\030\001 \001(\0132!.mead101.avs"
  ".CurrentTerritoryCode\022*\n\006format\030\002 \001(\0132\032."
  "mead101.avs.TextCodecType\022\022\n\nis_default\030"
  "\003 \001(\010\022 \n\030language_and_script_code\030\004 \001(\t\022"
  "\021\n\tnamespace\030\005 \001(\t\022\032\n\022user_defined_value"
  "\030\006 \001(\t\022\021\n\text_value\030\007 \001(\t\"\322\001\n\005Theme\022D\n\031a"
  "pplicable_territory_code\030\001 \001(\0132!.mead101"
  ".avs.CurrentTerritoryCode\0227\n\013description"
  "\030\002 \003(\0132\".mead101.mead.TextWithoutTerrito"
  "ry\022!\n\031metadata_source_reference\030\003 \003(\t\022\'\n"
  "\005value\030\004 \001(\0132\030.mead101.mead.ThemeValue\"b"
  "\n\nThemeValue\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022user_"
  "defined_value\030\002 \001(\t\022%\n\text_value\030\003 \001(\0132\022"
  ".mead101.avs.Theme\"\356\001\n\rTimeSignature\022!\n\031"
  "metadata_source_reference\030\001 \003(\t\022\"\n\005meter"
  "\030\002 \001(\0132\023.mead101.mead.Meter\0229\n\nmodulatio"
  "n\030\003 \003(\0132%.mead101.mead.TimeSignatureModu"
  "lation\022\032\n\022no_meter_available\030\004 \001(\010\022\'\n\005te"
  "mpo\030\005 \001(\0132\030.mead101.mead.TempoValue\022\026\n\016t"
  "oo_many_tempi\030\006 \001(\010\"\311\001\n\027TimeSignatureMod"
  "ulation\022\017\n\007end_bar\030\001 \001(\005\022\021\n\tend_point\030\002 "
  "\001(\001\022\"\n\005meter\030\003 \001(\0132\023.mead101.mead.Meter\022"
  "\032\n\022no_meter_available\030\004 \001(\010\022\021\n\tstart_bar"
  "\030\005 \001(\005\022\023\n\013start_point\030\006 \001(\001\022\"\n\005tempo\030\007 \001"
  "(\0132\023.mead101.mead.Tempo\"4\n\006Timing\022\025\n\rdur"
  "ation_used\030\001 \001(\t\022\023\n\013start_point\030\002 \001(\t\"_\n"
  "\032TitleTextWithPronunciation\0222\n\rpronuncia"
  "tion\030\001 \003(\0132\033.mead101.mead.Pronunciation\022"
  "\r\n\005title\030\002 \001(\t\"\220\002\n\026TitleWithPronunciatio"
  "n\022 \n\030language_and_script_code\030\001 \001(\t\022\021\n\tn"
  "amespace\030\002 \001(\t\022;\n\tsub_title\030\003 \001(\0132(.mead"
  "101.mead.TitleTextWithPronunciation\022<\n\nt"
  "itle_text\030\004 \001(\0132(.mead101.mead.TitleText"
  "WithPronunciation\022*\n\ntitle_type\030\005 \001(\0132\026."
  "mead101.avs.TitleType\022\032\n\022user_defined_va"
  "lue\030\006 \001(\t\"5\n\003URI\022\033\n\023any_attribute_value\030"
  "\001 \003(\t\022\021\n\text_value\030\002 \001(\t\"\216\002\n\005Usage\0221\n\013de"
  "scription\030\001 \003(\0132\034.mead101.mead.TextWithF"
  "ormat\022!\n\031metadata_source_reference\030\002 \003(\t"
  "\0228\n\021relevant_resource\030\003 \003(\0132\035.mead101.me"
  "ad.RelatedResource\022\027\n\017sequence_number\030\004 "
  "\001(\005\022+\n\nusage_date\030\005 \003(\0132\027.mead101.mead.E"
  "ventDate\022/\n\014usage_period\030\006 \003(\0132\031.mead101"
  ".mead.UsagePeriod\"}\n\013UsagePeriod\0225\n\010end_"
  "date\030\001 \001(\0132#.mead101.mead.EventDateWitho"
  "utFlags\0227\n\nstart_date\030\002 \001(\0132#.mead101.me"
  "ad.EventDateWithoutFlags\"]\n\017UsedMusicalW"
  "ork\022!\n\031metadata_source_reference\030\001 \003(\t\022\'"
  "\n\037resource_musical_work_reference\030\002 \003(\t\""
  "\225\001\n\005Venue\022\025\n\rlocation_code\030\001 \001(\t\0226\n\016terr"
  "itory_code\030\002 \001(\0132\036.mead101.mead.AllTerri"
  "toryCode\022\025\n\rvenue_address\030\003 \001(\t\022\022\n\nvenue"
  "_name\030\004 \001(\t\022\022\n\nvenue_room\030\005 \001(\t\"c\n\rVocal"
  "Register\022!\n\031metadata_source_reference\030\001 "
  "\003(\t\022/\n\005value\030\002 \001(\0132 .mead101.mead.VocalR"
  "egisterValue\"r\n\022VocalRegisterValue\022\021\n\tna"
  "mespace\030\001 \001(\t\022\032\n\022user_defined_value\030\002 \001("
  "\t\022-\n\text_value\030\003 \001(\0132\032.mead101.avs.Vocal"
  "Register\"\217\001\n\004Work\022\017\n\007i_s_w_c\030\001 \001(\t\022\033\n\023pr"
  "oprietary_work_id\030\002 \001(\t\022+\n\nwork_title\030\003 "
  "\003(\0132\027.mead101.mead.WorkTitle\022,\n\006writer\030\004"
  " \003(\0132\034.mead101.mead.PartyWithNames\"\254\002\n\rW"
  "orkHierarchy\022/\n\005child\030\001 \003(\0132 .mead101.me"
  "ad.ChildWorkHierarchy\022 \n\004form\030\002 \001(\0132\022.me"
  "ad101.mead.Form\022\023\n\013is_complete\030\003 \001(\010\022\034\n\024"
  "is_described_element\030\004 \001(\010\022!\n\031metadata_s"
  "ource_reference\030\005 \003(\t\022\027\n\017sequence_number"
  "\030\006 \001(\005\022,\n\007work_id\030\007 \001(\0132\033.mead101.mead.M"
  "usicalWorkId\022+\n\nwork_title\030\010 \003(\0132\027.mead1"
  "01.mead.WorkTitle\"\275\010\n\017WorkInformation\0229\n"
  "\021alternative_title\030\001 \003(\0132\036.mead101.mead."
  "AlternativeTitle\022;\n\022artistic_influence\030\002"
  " \003(\0132\037.mead101.mead.ArtisticInfluence\022\"\n"
  "\005award\030\003 \003(\0132\023.mead101.mead.Award\0227\n\020cla"
  "ssical_period\030\004 \001(\0132\035.mead101.mead.Class"
  "icalPeriod\0225\n\017commentary_note\030\005 \003(\0132\034.me"
  "ad101.mead.CommentaryNote\022A\n\026dance_and_r"
  "hythm_style\030\006 \003(\0132!.mead101.mead.DanceAn"
  "dRhythmStyle\0229\n\021derived_recording\030\007 \003(\0132"
  "\036.mead101.mead.DerivedRecording\022\"\n\005epoch"
  "\030\010 \003(\0132\023.mead101.mead.Epoch\022 \n\004form\030\t \001("
  "\0132\022.mead101.mead.Form\022&\n\007harmony\030\n \001(\0132\025"
  ".mead101.mead.Harmony\022-\n\nis_similar\030\013 \003("
  "\0132\031.mead101.mead.SimilarWork\022$\n\006lyrics\030\014"
  " \003(\0132\024.mead101.mead.Lyrics\022\'\n\013lyrics_moo"
  "d\030\r \003(\0132\022.mead101.mead.Mood\022\036\n\026musical_w"
  "ork_reference\030\016 \001(\t\022/\n\014related_work\030\017 \003("
  "\0132\031.mead101.mead.RelatedWork\022:\n\022sub_genr"
  "e_category\030\020 \001(\0132\036.mead101.mead.SubGenre"
  "Category\0223\n\021target_instrument\030\021 \003(\0132\030.me"
  "ad101.mead.Instrument\022\"\n\005theme\030\022 \003(\0132\023.m"
  "ead101.mead.Theme\0223\n\016time_signature\030\023 \001("
  "\0132\033.mead101.mead.TimeSignature\0223\n\016vocal_"
  "register\030\024 \001(\0132\033.mead101.mead.VocalRegis"
  "ter\0223\n\016work_hierarchy\030\025 \003(\0132\033.mead101.me"
  "ad.WorkHierarchy\022/\n\014work_summary\030\026 \001(\0132\031"
  ".mead101.mead.WorkSummary\"N\n\023WorkInforma"
  "tionList\0227\n\020work_information\030\001 \003(\0132\035.mea"
  "d101.mead.WorkInformation\"{\n\024WorkRelatio"
  "nshipType\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022user_def"
  "ined_value\030\002 \001(\t\0224\n\text_value\030\003 \001(\0132!.me"
  "ad101.avs.WorkRelationshipType\"\263\001\n\013WorkS"
  "ummary\0224\n\017musical_work_id\030\001 \001(\0132\033.mead10"
  "1.mead.MusicalWorkId\0228\n\nwork_title\030\002 \003(\013"
  "2$.mead101.mead.TitleWithPronunciation\0224"
  "\n\006writer\030\003 \003(\0132$.mead101.mead.PartyNameW"
  "ithTerritory\"@\n\tWorkTitle\022 \n\030language_an"
  "d_script_code\030\001 \001(\t\022\021\n\text_value\030\002 \001(\t\"\""
  "\n\014ddex_IsoDate\022\022\n\nauto_value\030\001 \001(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto_deps[1] = {
  &::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto_sccs[160] = {
  &scc_info_AbsolutePitch_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_AlternativeTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Annotation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ArtistType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ArtistTypeValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ArtisticInfluence_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Award_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_AwardForParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_BeatsPerMinute_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Biography_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_BiographyText_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_CatalogNumber_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Category_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ChartEntry_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ChartName_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ChildWorkHierarchy_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ClassicalPeriod_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_CommentaryNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_CommentaryNoteType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Content_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_DanceAndRhythmStyle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_DanceAndRhythmStyleValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Date_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_DateTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_DerivedRecording_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_DetailedHashSum_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_DetailedPartyId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_DisplayArtistNameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_DisplaySubTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Duration_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Entry_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Epoch_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_EventDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_EventDateTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Feed_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_File_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Flag_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_FocusTrack_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Form_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_FormValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Generator_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_GenreCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_GenreCategoryValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Harmony_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_HarmonyModulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_HistoricChartingInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_HistoricChartingInformationForParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Icon_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Id_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Image_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Instrument_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_InstrumentUsed_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_InstrumentValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Link_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_LocationAndDateOfSession_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Logo_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Lyrics_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_LyricsText_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_MeadMessage_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_MessageAuditTrail_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_MessageAuditTrailEvent_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_MessageHeader_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_MessagingPartyWithoutCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_MetadataSource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_MetadataSourceList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_MetadataSourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Meter_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Mode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Modulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Mood_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_MoodValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Name_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_NameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_NameWithPronunciationAndScriptCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Party_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_PartyDescriptor_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_PartyInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_PartyInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_PartyName_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_PartyNameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_PartyNameWithTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_PartyNameWithoutCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_PartyWithNames_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_PartyWithRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Period_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_PeriodValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_PeriodWithTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Person_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Pronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Pseudonym_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_RecordingPart_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_RecordingPartType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_RelatedCreation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_RelatedResource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_RelatedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_RelatedWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Release_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ReleaseInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ReleaseInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ReleaseSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ReleaseTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Resource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ResourceContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ResourceId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ResourceInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ResourceInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ResourceRelationship_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ResourceRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ResourceSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ResourceTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_RootChordNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_RootChordQuality_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Sample_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_SampleFeature_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_SessionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_SimilarParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_SimilarRelease_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_SimilarResource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_SimilarWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Source_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_SubGenreCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_SubGenreCategoryValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Tempo_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_TempoValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Text_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_TextWithFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_TextWithoutTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Theme_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ThemeValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_TimeSignature_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_TimeSignatureModulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Timing_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_TitleTextWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_TitleWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_URI_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Usage_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_UsagePeriod_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_UsedMusicalWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Venue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_VocalRegister_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_VocalRegisterValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_Work_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_WorkHierarchy_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_WorkInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_WorkInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_WorkRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_WorkSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_WorkTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
  &scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto = {
  false, false, descriptor_table_protodef_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto, "ddex-xmltoproto/generated/mead101/mead.proto", 32914,
  &descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto_once, descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto_sccs, descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto_deps, 160, 1,
  schemas, file_default_instances, TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto::offsets,
  file_level_metadata_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto, 160, file_level_enum_descriptors_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto, file_level_service_descriptors_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto)), true);
namespace mead101 {
namespace mead {

// ===================================================================

void AbsolutePitch::InitAsDefaultInstance() {
}
class AbsolutePitch::_Internal {
 public:
  using HasBits = decltype(std::declval<AbsolutePitch>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AbsolutePitch::AbsolutePitch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.AbsolutePitch)
}
AbsolutePitch::AbsolutePitch(const AbsolutePitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:mead101.mead.AbsolutePitch)
}

void AbsolutePitch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AbsolutePitch_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  value_ = 0;
}

AbsolutePitch::~AbsolutePitch() {
  // @@protoc_insertion_point(destructor:mead101.mead.AbsolutePitch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AbsolutePitch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AbsolutePitch::ArenaDtor(void* object) {
  AbsolutePitch* _this = reinterpret_cast< AbsolutePitch* >(object);
  (void)_this;
}
void AbsolutePitch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AbsolutePitch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AbsolutePitch& AbsolutePitch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AbsolutePitch_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void AbsolutePitch::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.AbsolutePitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_reference_.Clear();
  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbsolutePitch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string metadata_source_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.AbsolutePitch.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AbsolutePitch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.AbsolutePitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.AbsolutePitch.metadata_source_reference");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional double value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.AbsolutePitch)
  return target;
}

size_t AbsolutePitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.AbsolutePitch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // optional double value = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbsolutePitch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.AbsolutePitch)
  GOOGLE_DCHECK_NE(&from, this);
  const AbsolutePitch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AbsolutePitch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.AbsolutePitch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.AbsolutePitch)
    MergeFrom(*source);
  }
}

void AbsolutePitch::MergeFrom(const AbsolutePitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.AbsolutePitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
}

void AbsolutePitch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.AbsolutePitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbsolutePitch::CopyFrom(const AbsolutePitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.AbsolutePitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbsolutePitch::IsInitialized() const {
  return true;
}

void AbsolutePitch::InternalSwap(AbsolutePitch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AbsolutePitch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllTerritoryCode::InitAsDefaultInstance() {
  ::mead101::mead::_AllTerritoryCode_default_instance_._instance.get_mutable()->identifier_type_ = const_cast< ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes*>(
      ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes::internal_default_instance());
  ::mead101::mead::_AllTerritoryCode_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::AllTerritoryCode*>(
      ::mead101::avs::AllTerritoryCode::internal_default_instance());
}
class AllTerritoryCode::_Internal {
 public:
  using HasBits = decltype(std::declval<AllTerritoryCode>()._has_bits_);
  static const ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes& identifier_type(const AllTerritoryCode* msg);
  static void set_has_identifier_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::avs::AllTerritoryCode& ext_value(const AllTerritoryCode* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes&
AllTerritoryCode::_Internal::identifier_type(const AllTerritoryCode* msg) {
  return *msg->identifier_type_;
}
const ::mead101::avs::AllTerritoryCode&
AllTerritoryCode::_Internal::ext_value(const AllTerritoryCode* msg) {
  return *msg->ext_value_;
}
void AllTerritoryCode::clear_identifier_type() {
  if (identifier_type_ != nullptr) identifier_type_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void AllTerritoryCode::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
AllTerritoryCode::AllTerritoryCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.AllTerritoryCode)
}
AllTerritoryCode::AllTerritoryCode(const AllTerritoryCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_identifier_type()) {
    identifier_type_ = new ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes(*from.identifier_type_);
  } else {
    identifier_type_ = nullptr;
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::AllTerritoryCode(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.AllTerritoryCode)
}

void AllTerritoryCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&identifier_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ext_value_) -
      reinterpret_cast<char*>(&identifier_type_)) + sizeof(ext_value_));
}

AllTerritoryCode::~AllTerritoryCode() {
  // @@protoc_insertion_point(destructor:mead101.mead.AllTerritoryCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllTerritoryCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete identifier_type_;
  if (this != internal_default_instance()) delete ext_value_;
}

void AllTerritoryCode::ArenaDtor(void* object) {
  AllTerritoryCode* _this = reinterpret_cast< AllTerritoryCode* >(object);
  (void)_this;
}
void AllTerritoryCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllTerritoryCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllTerritoryCode& AllTerritoryCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void AllTerritoryCode::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.AllTerritoryCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(identifier_type_ != nullptr);
      identifier_type_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllTerritoryCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.avs.TerritoryCodeTypeIncludingDeprecatedCodes identifier_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.AllTerritoryCode ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllTerritoryCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.AllTerritoryCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.avs.TerritoryCodeTypeIncludingDeprecatedCodes identifier_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::identifier_type(this), target, stream);
  }

  // optional .mead101.avs.AllTerritoryCode ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.AllTerritoryCode)
  return target;
}

size_t AllTerritoryCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.AllTerritoryCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .mead101.avs.TerritoryCodeTypeIncludingDeprecatedCodes identifier_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *identifier_type_);
    }

    // optional .mead101.avs.AllTerritoryCode ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllTerritoryCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.AllTerritoryCode)
  GOOGLE_DCHECK_NE(&from, this);
  const AllTerritoryCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllTerritoryCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.AllTerritoryCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.AllTerritoryCode)
    MergeFrom(*source);
  }
}

void AllTerritoryCode::MergeFrom(const AllTerritoryCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.AllTerritoryCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_identifier_type()->::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes::MergeFrom(from._internal_identifier_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ext_value()->::mead101::avs::AllTerritoryCode::MergeFrom(from._internal_ext_value());
    }
  }
}

void AllTerritoryCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.AllTerritoryCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllTerritoryCode::CopyFrom(const AllTerritoryCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.AllTerritoryCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllTerritoryCode::IsInitialized() const {
  return true;
}

void AllTerritoryCode::InternalSwap(AllTerritoryCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllTerritoryCode, ext_value_)
      + sizeof(AllTerritoryCode::ext_value_)
      - PROTOBUF_FIELD_OFFSET(AllTerritoryCode, identifier_type_)>(
          reinterpret_cast<char*>(&identifier_type_),
          reinterpret_cast<char*>(&other->identifier_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllTerritoryCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlternativeTitle::InitAsDefaultInstance() {
  ::mead101::mead::_AlternativeTitle_default_instance_._instance.get_mutable()->sub_title_ = const_cast< ::mead101::mead::TitleTextWithPronunciation*>(
      ::mead101::mead::TitleTextWithPronunciation::internal_default_instance());
  ::mead101::mead::_AlternativeTitle_default_instance_._instance.get_mutable()->title_text_ = const_cast< ::mead101::mead::TitleTextWithPronunciation*>(
      ::mead101::mead::TitleTextWithPronunciation::internal_default_instance());
  ::mead101::mead::_AlternativeTitle_default_instance_._instance.get_mutable()->title_type_ = const_cast< ::mead101::avs::TitleType*>(
      ::mead101::avs::TitleType::internal_default_instance());
}
class AlternativeTitle::_Internal {
 public:
  using HasBits = decltype(std::declval<AlternativeTitle>()._has_bits_);
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::TitleTextWithPronunciation& sub_title(const AlternativeTitle* msg);
  static void set_has_sub_title(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mead101::mead::TitleTextWithPronunciation& title_text(const AlternativeTitle* msg);
  static void set_has_title_text(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mead101::avs::TitleType& title_type(const AlternativeTitle* msg);
  static void set_has_title_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::mead::TitleTextWithPronunciation&
AlternativeTitle::_Internal::sub_title(const AlternativeTitle* msg) {
  return *msg->sub_title_;
}
const ::mead101::mead::TitleTextWithPronunciation&
AlternativeTitle::_Internal::title_text(const AlternativeTitle* msg) {
  return *msg->title_text_;
}
const ::mead101::avs::TitleType&
AlternativeTitle::_Internal::title_type(const AlternativeTitle* msg) {
  return *msg->title_type_;
}
void AlternativeTitle::clear_title_type() {
  if (title_type_ != nullptr) title_type_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
AlternativeTitle::AlternativeTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.AlternativeTitle)
}
AlternativeTitle::AlternativeTitle(const AlternativeTitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_sub_title()) {
    sub_title_ = new ::mead101::mead::TitleTextWithPronunciation(*from.sub_title_);
  } else {
    sub_title_ = nullptr;
  }
  if (from._internal_has_title_text()) {
    title_text_ = new ::mead101::mead::TitleTextWithPronunciation(*from.title_text_);
  } else {
    title_text_ = nullptr;
  }
  if (from._internal_has_title_type()) {
    title_type_ = new ::mead101::avs::TitleType(*from.title_type_);
  } else {
    title_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.AlternativeTitle)
}

void AlternativeTitle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlternativeTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sub_title_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&title_type_) -
      reinterpret_cast<char*>(&sub_title_)) + sizeof(title_type_));
}

AlternativeTitle::~AlternativeTitle() {
  // @@protoc_insertion_point(destructor:mead101.mead.AlternativeTitle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AlternativeTitle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sub_title_;
  if (this != internal_default_instance()) delete title_text_;
  if (this != internal_default_instance()) delete title_type_;
}

void AlternativeTitle::ArenaDtor(void* object) {
  AlternativeTitle* _this = reinterpret_cast< AlternativeTitle* >(object);
  (void)_this;
}
void AlternativeTitle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlternativeTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlternativeTitle& AlternativeTitle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlternativeTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void AlternativeTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.AlternativeTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(sub_title_ != nullptr);
      sub_title_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(title_text_ != nullptr);
      title_text_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(title_type_ != nullptr);
      title_type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlternativeTitle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language_and_script_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.AlternativeTitle.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.AlternativeTitle.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string namespace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.AlternativeTitle.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.TitleTextWithPronunciation sub_title = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_title(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.TitleTextWithPronunciation title_text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_title_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.TitleType title_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_title_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.AlternativeTitle.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlternativeTitle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.AlternativeTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language_and_script_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.AlternativeTitle.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language_and_script_code(), target);
  }

  // repeated string metadata_source_reference = 2;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.AlternativeTitle.metadata_source_reference");
    target = stream->WriteString(2, s, target);
  }

  // optional string namespace = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.AlternativeTitle.namespace");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_namespace_(), target);
  }

  // optional .mead101.mead.TitleTextWithPronunciation sub_title = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sub_title(this), target, stream);
  }

  // optional .mead101.mead.TitleTextWithPronunciation title_text = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::title_text(this), target, stream);
  }

  // optional .mead101.avs.TitleType title_type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::title_type(this), target, stream);
  }

  // optional string user_defined_value = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.AlternativeTitle.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_user_defined_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.AlternativeTitle)
  return target;
}

size_t AlternativeTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.AlternativeTitle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string language_and_script_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string namespace = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.mead.TitleTextWithPronunciation sub_title = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sub_title_);
    }

    // optional .mead101.mead.TitleTextWithPronunciation title_text = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *title_text_);
    }

    // optional .mead101.avs.TitleType title_type = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *title_type_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlternativeTitle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.AlternativeTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const AlternativeTitle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlternativeTitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.AlternativeTitle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.AlternativeTitle)
    MergeFrom(*source);
  }
}

void AlternativeTitle::MergeFrom(const AlternativeTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.AlternativeTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_sub_title()->::mead101::mead::TitleTextWithPronunciation::MergeFrom(from._internal_sub_title());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_title_text()->::mead101::mead::TitleTextWithPronunciation::MergeFrom(from._internal_title_text());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_title_type()->::mead101::avs::TitleType::MergeFrom(from._internal_title_type());
    }
  }
}

void AlternativeTitle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.AlternativeTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlternativeTitle::CopyFrom(const AlternativeTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.AlternativeTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlternativeTitle::IsInitialized() const {
  return true;
}

void AlternativeTitle::InternalSwap(AlternativeTitle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlternativeTitle, title_type_)
      + sizeof(AlternativeTitle::title_type_)
      - PROTOBUF_FIELD_OFFSET(AlternativeTitle, sub_title_)>(
          reinterpret_cast<char*>(&sub_title_),
          reinterpret_cast<char*>(&other->sub_title_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlternativeTitle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Annotation::InitAsDefaultInstance() {
  ::mead101::mead::_Annotation_default_instance_._instance.get_mutable()->text_ = const_cast< ::mead101::mead::TextWithFormat*>(
      ::mead101::mead::TextWithFormat::internal_default_instance());
}
class Annotation::_Internal {
 public:
  using HasBits = decltype(std::declval<Annotation>()._has_bits_);
  static const ::mead101::mead::TextWithFormat& text(const Annotation* msg);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mead101::mead::TextWithFormat&
Annotation::_Internal::text(const Annotation* msg) {
  return *msg->text_;
}
Annotation::Annotation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Annotation)
}
Annotation::Annotation(const Annotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_text()) {
    text_ = new ::mead101::mead::TextWithFormat(*from.text_);
  } else {
    text_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Annotation)
}

void Annotation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Annotation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  text_ = nullptr;
}

Annotation::~Annotation() {
  // @@protoc_insertion_point(destructor:mead101.mead.Annotation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Annotation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete text_;
}

void Annotation::ArenaDtor(void* object) {
  Annotation* _this = reinterpret_cast< Annotation* >(object);
  (void)_this;
}
void Annotation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Annotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Annotation& Annotation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Annotation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Annotation::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Annotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(text_ != nullptr);
    text_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Annotation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string metadata_source_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Annotation.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.TextWithFormat text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Annotation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Annotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Annotation.metadata_source_reference");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.TextWithFormat text = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::text(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Annotation)
  return target;
}

size_t Annotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Annotation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // optional .mead101.mead.TextWithFormat text = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Annotation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  const Annotation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Annotation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Annotation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Annotation)
    MergeFrom(*source);
  }
}

void Annotation::MergeFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  if (from._internal_has_text()) {
    _internal_mutable_text()->::mead101::mead::TextWithFormat::MergeFrom(from._internal_text());
  }
}

void Annotation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Annotation::CopyFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotation::IsInitialized() const {
  return true;
}

void Annotation::InternalSwap(Annotation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  swap(text_, other->text_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Annotation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArtistType::InitAsDefaultInstance() {
  ::mead101::mead::_ArtistType_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::mead101::avs::CurrentTerritoryCode*>(
      ::mead101::avs::CurrentTerritoryCode::internal_default_instance());
  ::mead101::mead::_ArtistType_default_instance_._instance.get_mutable()->value_ = const_cast< ::mead101::mead::ArtistTypeValue*>(
      ::mead101::mead::ArtistTypeValue::internal_default_instance());
}
class ArtistType::_Internal {
 public:
  using HasBits = decltype(std::declval<ArtistType>()._has_bits_);
  static const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code(const ArtistType* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::ArtistTypeValue& value(const ArtistType* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mead101::avs::CurrentTerritoryCode&
ArtistType::_Internal::applicable_territory_code(const ArtistType* msg) {
  return *msg->applicable_territory_code_;
}
const ::mead101::mead::ArtistTypeValue&
ArtistType::_Internal::value(const ArtistType* msg) {
  return *msg->value_;
}
void ArtistType::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ArtistType::ArtistType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ArtistType)
}
ArtistType::ArtistType(const ArtistType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::mead101::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::mead101::mead::ArtistTypeValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ArtistType)
}

void ArtistType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArtistType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(value_));
}

ArtistType::~ArtistType() {
  // @@protoc_insertion_point(destructor:mead101.mead.ArtistType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArtistType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete value_;
}

void ArtistType::ArenaDtor(void* object) {
  ArtistType* _this = reinterpret_cast< ArtistType* >(object);
  (void)_this;
}
void ArtistType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArtistType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtistType& ArtistType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArtistType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ArtistType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ArtistType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtistType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ArtistType.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ArtistTypeValue value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArtistType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ArtistType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // repeated string metadata_source_reference = 2;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ArtistType.metadata_source_reference");
    target = stream->WriteString(2, s, target);
  }

  // optional .mead101.mead.ArtistTypeValue value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ArtistType)
  return target;
}

size_t ArtistType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ArtistType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .mead101.mead.ArtistTypeValue value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtistType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ArtistType)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtistType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArtistType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ArtistType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ArtistType)
    MergeFrom(*source);
  }
}

void ArtistType::MergeFrom(const ArtistType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ArtistType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_applicable_territory_code()->::mead101::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::mead101::mead::ArtistTypeValue::MergeFrom(from._internal_value());
    }
  }
}

void ArtistType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ArtistType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtistType::CopyFrom(const ArtistType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ArtistType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtistType::IsInitialized() const {
  return true;
}

void ArtistType::InternalSwap(ArtistType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArtistType, value_)
      + sizeof(ArtistType::value_)
      - PROTOBUF_FIELD_OFFSET(ArtistType, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtistType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArtistTypeValue::InitAsDefaultInstance() {
  ::mead101::mead::_ArtistTypeValue_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::ArtistType*>(
      ::mead101::avs::ArtistType::internal_default_instance());
}
class ArtistTypeValue::_Internal {
 public:
  using HasBits = decltype(std::declval<ArtistTypeValue>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::ArtistType& ext_value(const ArtistTypeValue* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::ArtistType&
ArtistTypeValue::_Internal::ext_value(const ArtistTypeValue* msg) {
  return *msg->ext_value_;
}
void ArtistTypeValue::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ArtistTypeValue::ArtistTypeValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ArtistTypeValue)
}
ArtistTypeValue::ArtistTypeValue(const ArtistTypeValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::ArtistType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ArtistTypeValue)
}

void ArtistTypeValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArtistTypeValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

ArtistTypeValue::~ArtistTypeValue() {
  // @@protoc_insertion_point(destructor:mead101.mead.ArtistTypeValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArtistTypeValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void ArtistTypeValue::ArenaDtor(void* object) {
  ArtistTypeValue* _this = reinterpret_cast< ArtistTypeValue* >(object);
  (void)_this;
}
void ArtistTypeValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArtistTypeValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtistTypeValue& ArtistTypeValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArtistTypeValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ArtistTypeValue::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ArtistTypeValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtistTypeValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ArtistTypeValue.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ArtistTypeValue.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.ArtistType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArtistTypeValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ArtistTypeValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ArtistTypeValue.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ArtistTypeValue.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.ArtistType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ArtistTypeValue)
  return target;
}

size_t ArtistTypeValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ArtistTypeValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.ArtistType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtistTypeValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ArtistTypeValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtistTypeValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArtistTypeValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ArtistTypeValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ArtistTypeValue)
    MergeFrom(*source);
  }
}

void ArtistTypeValue::MergeFrom(const ArtistTypeValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ArtistTypeValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::ArtistType::MergeFrom(from._internal_ext_value());
    }
  }
}

void ArtistTypeValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ArtistTypeValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtistTypeValue::CopyFrom(const ArtistTypeValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ArtistTypeValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtistTypeValue::IsInitialized() const {
  return true;
}

void ArtistTypeValue::InternalSwap(ArtistTypeValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtistTypeValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArtisticInfluence::InitAsDefaultInstance() {
}
class ArtisticInfluence::_Internal {
 public:
  using HasBits = decltype(std::declval<ArtisticInfluence>()._has_bits_);
  static void set_has_is_influenced(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_influencer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ArtisticInfluence::ArtisticInfluence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  description_(arena),
  metadata_source_reference_(arena),
  party_(arena),
  release_(arena),
  resource_(arena),
  work_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ArtisticInfluence)
}
ArtisticInfluence::ArtisticInfluence(const ArtisticInfluence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      description_(from.description_),
      metadata_source_reference_(from.metadata_source_reference_),
      party_(from.party_),
      release_(from.release_),
      resource_(from.resource_),
      work_(from.work_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_influenced_, &from.is_influenced_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_influencer_) -
    reinterpret_cast<char*>(&is_influenced_)) + sizeof(is_influencer_));
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ArtisticInfluence)
}

void ArtisticInfluence::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArtisticInfluence_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&is_influenced_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_influencer_) -
      reinterpret_cast<char*>(&is_influenced_)) + sizeof(is_influencer_));
}

ArtisticInfluence::~ArtisticInfluence() {
  // @@protoc_insertion_point(destructor:mead101.mead.ArtisticInfluence)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArtisticInfluence::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArtisticInfluence::ArenaDtor(void* object) {
  ArtisticInfluence* _this = reinterpret_cast< ArtisticInfluence* >(object);
  (void)_this;
}
void ArtisticInfluence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArtisticInfluence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtisticInfluence& ArtisticInfluence::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArtisticInfluence_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ArtisticInfluence::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ArtisticInfluence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.Clear();
  metadata_source_reference_.Clear();
  party_.Clear();
  release_.Clear();
  resource_.Clear();
  work_.Clear();
  ::memset(&is_influenced_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_influencer_) -
      reinterpret_cast<char*>(&is_influenced_)) + sizeof(is_influencer_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtisticInfluence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.TextWithFormat description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_description(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_influenced = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_influenced(&has_bits);
          is_influenced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_influencer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_influencer(&has_bits);
          is_influencer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ArtisticInfluence.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.PartyWithNames party = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_party(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Release release = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_release(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Resource resource = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Work work = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_work(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArtisticInfluence::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ArtisticInfluence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.TextWithFormat description = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_description_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_description(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool is_influenced = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_influenced(), target);
  }

  // optional bool is_influencer = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_influencer(), target);
  }

  // repeated string metadata_source_reference = 4;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ArtisticInfluence.metadata_source_reference");
    target = stream->WriteString(4, s, target);
  }

  // repeated .mead101.mead.PartyWithNames party = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_party_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_party(i), target, stream);
  }

  // repeated .mead101.mead.Release release = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_release_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_release(i), target, stream);
  }

  // repeated .mead101.mead.Resource resource = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_resource(i), target, stream);
  }

  // repeated .mead101.mead.Work work = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_work_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_work(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ArtisticInfluence)
  return target;
}

size_t ArtisticInfluence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ArtisticInfluence)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.TextWithFormat description = 1;
  total_size += 1UL * this->_internal_description_size();
  for (const auto& msg : this->description_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metadata_source_reference = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // repeated .mead101.mead.PartyWithNames party = 5;
  total_size += 1UL * this->_internal_party_size();
  for (const auto& msg : this->party_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Release release = 6;
  total_size += 1UL * this->_internal_release_size();
  for (const auto& msg : this->release_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Resource resource = 7;
  total_size += 1UL * this->_internal_resource_size();
  for (const auto& msg : this->resource_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Work work = 8;
  total_size += 1UL * this->_internal_work_size();
  for (const auto& msg : this->work_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool is_influenced = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_influencer = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtisticInfluence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ArtisticInfluence)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtisticInfluence* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArtisticInfluence>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ArtisticInfluence)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ArtisticInfluence)
    MergeFrom(*source);
  }
}

void ArtisticInfluence::MergeFrom(const ArtisticInfluence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ArtisticInfluence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  description_.MergeFrom(from.description_);
  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  party_.MergeFrom(from.party_);
  release_.MergeFrom(from.release_);
  resource_.MergeFrom(from.resource_);
  work_.MergeFrom(from.work_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      is_influenced_ = from.is_influenced_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_influencer_ = from.is_influencer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ArtisticInfluence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ArtisticInfluence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtisticInfluence::CopyFrom(const ArtisticInfluence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ArtisticInfluence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtisticInfluence::IsInitialized() const {
  return true;
}

void ArtisticInfluence::InternalSwap(ArtisticInfluence* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.InternalSwap(&other->description_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  party_.InternalSwap(&other->party_);
  release_.InternalSwap(&other->release_);
  resource_.InternalSwap(&other->resource_);
  work_.InternalSwap(&other->work_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArtisticInfluence, is_influencer_)
      + sizeof(ArtisticInfluence::is_influencer_)
      - PROTOBUF_FIELD_OFFSET(ArtisticInfluence, is_influenced_)>(
          reinterpret_cast<char*>(&is_influenced_),
          reinterpret_cast<char*>(&other->is_influenced_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtisticInfluence::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Award::InitAsDefaultInstance() {
  ::mead101::mead::_Award_default_instance_._instance.get_mutable()->award_name_ = const_cast< ::mead101::mead::NameWithPronunciation*>(
      ::mead101::mead::NameWithPronunciation::internal_default_instance());
  ::mead101::mead::_Award_default_instance_._instance.get_mutable()->awarded_party_ = const_cast< ::mead101::mead::PartyWithNames*>(
      ::mead101::mead::PartyWithNames::internal_default_instance());
  ::mead101::mead::_Award_default_instance_._instance.get_mutable()->awarding_body_ = const_cast< ::mead101::mead::PartyDescriptor*>(
      ::mead101::mead::PartyDescriptor::internal_default_instance());
  ::mead101::mead::_Award_default_instance_._instance.get_mutable()->date_ = const_cast< ::mead101::mead::EventDate*>(
      ::mead101::mead::EventDate::internal_default_instance());
}
class Award::_Internal {
 public:
  using HasBits = decltype(std::declval<Award>()._has_bits_);
  static const ::mead101::mead::NameWithPronunciation& award_name(const Award* msg);
  static void set_has_award_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::PartyWithNames& awarded_party(const Award* msg);
  static void set_has_awarded_party(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::PartyDescriptor& awarding_body(const Award* msg);
  static void set_has_awarding_body(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::EventDate& date(const Award* msg);
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_winner(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::mead101::mead::NameWithPronunciation&
Award::_Internal::award_name(const Award* msg) {
  return *msg->award_name_;
}
const ::mead101::mead::PartyWithNames&
Award::_Internal::awarded_party(const Award* msg) {
  return *msg->awarded_party_;
}
const ::mead101::mead::PartyDescriptor&
Award::_Internal::awarding_body(const Award* msg) {
  return *msg->awarding_body_;
}
const ::mead101::mead::EventDate&
Award::_Internal::date(const Award* msg) {
  return *msg->date_;
}
Award::Award(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  comment_(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Award)
}
Award::Award(const Award& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      comment_(from.comment_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_award_name()) {
    award_name_ = new ::mead101::mead::NameWithPronunciation(*from.award_name_);
  } else {
    award_name_ = nullptr;
  }
  if (from._internal_has_awarded_party()) {
    awarded_party_ = new ::mead101::mead::PartyWithNames(*from.awarded_party_);
  } else {
    awarded_party_ = nullptr;
  }
  if (from._internal_has_awarding_body()) {
    awarding_body_ = new ::mead101::mead::PartyDescriptor(*from.awarding_body_);
  } else {
    awarding_body_ = nullptr;
  }
  if (from._internal_has_date()) {
    date_ = new ::mead101::mead::EventDate(*from.date_);
  } else {
    date_ = nullptr;
  }
  is_winner_ = from.is_winner_;
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Award)
}

void Award::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Award_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&award_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_winner_) -
      reinterpret_cast<char*>(&award_name_)) + sizeof(is_winner_));
}

Award::~Award() {
  // @@protoc_insertion_point(destructor:mead101.mead.Award)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Award::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete award_name_;
  if (this != internal_default_instance()) delete awarded_party_;
  if (this != internal_default_instance()) delete awarding_body_;
  if (this != internal_default_instance()) delete date_;
}

void Award::ArenaDtor(void* object) {
  Award* _this = reinterpret_cast< Award* >(object);
  (void)_this;
}
void Award::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Award::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Award& Award::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Award_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Award::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Award)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comment_.Clear();
  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(award_name_ != nullptr);
      award_name_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(awarded_party_ != nullptr);
      awarded_party_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(awarding_body_ != nullptr);
      awarding_body_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(date_ != nullptr);
      date_->Clear();
    }
  }
  is_winner_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Award::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.NameWithPronunciation award_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_award_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.PartyWithNames awarded_party = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_awarded_party(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.PartyDescriptor awarding_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_awarding_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.TextWithFormat comment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_comment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.EventDate date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_winner = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_winner(&has_bits);
          is_winner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Award.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Award::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Award)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.NameWithPronunciation award_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::award_name(this), target, stream);
  }

  // optional .mead101.mead.PartyWithNames awarded_party = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::awarded_party(this), target, stream);
  }

  // optional .mead101.mead.PartyDescriptor awarding_body = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::awarding_body(this), target, stream);
  }

  // repeated .mead101.mead.TextWithFormat comment = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_comment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_comment(i), target, stream);
  }

  // optional .mead101.mead.EventDate date = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::date(this), target, stream);
  }

  // optional bool is_winner = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_winner(), target);
  }

  // repeated string metadata_source_reference = 7;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Award.metadata_source_reference");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Award)
  return target;
}

size_t Award::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Award)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.TextWithFormat comment = 4;
  total_size += 1UL * this->_internal_comment_size();
  for (const auto& msg : this->comment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metadata_source_reference = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .mead101.mead.NameWithPronunciation award_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *award_name_);
    }

    // optional .mead101.mead.PartyWithNames awarded_party = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *awarded_party_);
    }

    // optional .mead101.mead.PartyDescriptor awarding_body = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *awarding_body_);
    }

    // optional .mead101.mead.EventDate date = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *date_);
    }

    // optional bool is_winner = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Award::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Award)
  GOOGLE_DCHECK_NE(&from, this);
  const Award* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Award>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Award)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Award)
    MergeFrom(*source);
  }
}

void Award::MergeFrom(const Award& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Award)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  comment_.MergeFrom(from.comment_);
  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_award_name()->::mead101::mead::NameWithPronunciation::MergeFrom(from._internal_award_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_awarded_party()->::mead101::mead::PartyWithNames::MergeFrom(from._internal_awarded_party());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_awarding_body()->::mead101::mead::PartyDescriptor::MergeFrom(from._internal_awarding_body());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_date()->::mead101::mead::EventDate::MergeFrom(from._internal_date());
    }
    if (cached_has_bits & 0x00000010u) {
      is_winner_ = from.is_winner_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Award::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Award)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Award::CopyFrom(const Award& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Award)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Award::IsInitialized() const {
  return true;
}

void Award::InternalSwap(Award* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  comment_.InternalSwap(&other->comment_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Award, is_winner_)
      + sizeof(Award::is_winner_)
      - PROTOBUF_FIELD_OFFSET(Award, award_name_)>(
          reinterpret_cast<char*>(&award_name_),
          reinterpret_cast<char*>(&other->award_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Award::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AwardForParty::InitAsDefaultInstance() {
  ::mead101::mead::_AwardForParty_default_instance_._instance.get_mutable()->award_name_ = const_cast< ::mead101::mead::NameWithPronunciation*>(
      ::mead101::mead::NameWithPronunciation::internal_default_instance());
  ::mead101::mead::_AwardForParty_default_instance_._instance.get_mutable()->awarded_party_ = const_cast< ::mead101::mead::PartyWithNames*>(
      ::mead101::mead::PartyWithNames::internal_default_instance());
  ::mead101::mead::_AwardForParty_default_instance_._instance.get_mutable()->awarded_release_ = const_cast< ::mead101::mead::Release*>(
      ::mead101::mead::Release::internal_default_instance());
  ::mead101::mead::_AwardForParty_default_instance_._instance.get_mutable()->awarded_resource_ = const_cast< ::mead101::mead::Resource*>(
      ::mead101::mead::Resource::internal_default_instance());
  ::mead101::mead::_AwardForParty_default_instance_._instance.get_mutable()->awarded_work_ = const_cast< ::mead101::mead::Work*>(
      ::mead101::mead::Work::internal_default_instance());
  ::mead101::mead::_AwardForParty_default_instance_._instance.get_mutable()->awarding_body_ = const_cast< ::mead101::mead::PartyDescriptor*>(
      ::mead101::mead::PartyDescriptor::internal_default_instance());
  ::mead101::mead::_AwardForParty_default_instance_._instance.get_mutable()->date_ = const_cast< ::mead101::mead::EventDate*>(
      ::mead101::mead::EventDate::internal_default_instance());
}
class AwardForParty::_Internal {
 public:
  using HasBits = decltype(std::declval<AwardForParty>()._has_bits_);
  static const ::mead101::mead::NameWithPronunciation& award_name(const AwardForParty* msg);
  static void set_has_award_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::PartyWithNames& awarded_party(const AwardForParty* msg);
  static void set_has_awarded_party(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::Release& awarded_release(const AwardForParty* msg);
  static void set_has_awarded_release(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::Resource& awarded_resource(const AwardForParty* msg);
  static void set_has_awarded_resource(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mead101::mead::Work& awarded_work(const AwardForParty* msg);
  static void set_has_awarded_work(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mead101::mead::PartyDescriptor& awarding_body(const AwardForParty* msg);
  static void set_has_awarding_body(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::mead101::mead::EventDate& date(const AwardForParty* msg);
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_winner(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::mead101::mead::NameWithPronunciation&
AwardForParty::_Internal::award_name(const AwardForParty* msg) {
  return *msg->award_name_;
}
const ::mead101::mead::PartyWithNames&
AwardForParty::_Internal::awarded_party(const AwardForParty* msg) {
  return *msg->awarded_party_;
}
const ::mead101::mead::Release&
AwardForParty::_Internal::awarded_release(const AwardForParty* msg) {
  return *msg->awarded_release_;
}
const ::mead101::mead::Resource&
AwardForParty::_Internal::awarded_resource(const AwardForParty* msg) {
  return *msg->awarded_resource_;
}
const ::mead101::mead::Work&
AwardForParty::_Internal::awarded_work(const AwardForParty* msg) {
  return *msg->awarded_work_;
}
const ::mead101::mead::PartyDescriptor&
AwardForParty::_Internal::awarding_body(const AwardForParty* msg) {
  return *msg->awarding_body_;
}
const ::mead101::mead::EventDate&
AwardForParty::_Internal::date(const AwardForParty* msg) {
  return *msg->date_;
}
AwardForParty::AwardForParty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  comment_(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.AwardForParty)
}
AwardForParty::AwardForParty(const AwardForParty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      comment_(from.comment_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_award_name()) {
    award_name_ = new ::mead101::mead::NameWithPronunciation(*from.award_name_);
  } else {
    award_name_ = nullptr;
  }
  if (from._internal_has_awarded_party()) {
    awarded_party_ = new ::mead101::mead::PartyWithNames(*from.awarded_party_);
  } else {
    awarded_party_ = nullptr;
  }
  if (from._internal_has_awarded_release()) {
    awarded_release_ = new ::mead101::mead::Release(*from.awarded_release_);
  } else {
    awarded_release_ = nullptr;
  }
  if (from._internal_has_awarded_resource()) {
    awarded_resource_ = new ::mead101::mead::Resource(*from.awarded_resource_);
  } else {
    awarded_resource_ = nullptr;
  }
  if (from._internal_has_awarded_work()) {
    awarded_work_ = new ::mead101::mead::Work(*from.awarded_work_);
  } else {
    awarded_work_ = nullptr;
  }
  if (from._internal_has_awarding_body()) {
    awarding_body_ = new ::mead101::mead::PartyDescriptor(*from.awarding_body_);
  } else {
    awarding_body_ = nullptr;
  }
  if (from._internal_has_date()) {
    date_ = new ::mead101::mead::EventDate(*from.date_);
  } else {
    date_ = nullptr;
  }
  is_winner_ = from.is_winner_;
  // @@protoc_insertion_point(copy_constructor:mead101.mead.AwardForParty)
}

void AwardForParty::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AwardForParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&award_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_winner_) -
      reinterpret_cast<char*>(&award_name_)) + sizeof(is_winner_));
}

AwardForParty::~AwardForParty() {
  // @@protoc_insertion_point(destructor:mead101.mead.AwardForParty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AwardForParty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete award_name_;
  if (this != internal_default_instance()) delete awarded_party_;
  if (this != internal_default_instance()) delete awarded_release_;
  if (this != internal_default_instance()) delete awarded_resource_;
  if (this != internal_default_instance()) delete awarded_work_;
  if (this != internal_default_instance()) delete awarding_body_;
  if (this != internal_default_instance()) delete date_;
}

void AwardForParty::ArenaDtor(void* object) {
  AwardForParty* _this = reinterpret_cast< AwardForParty* >(object);
  (void)_this;
}
void AwardForParty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AwardForParty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AwardForParty& AwardForParty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AwardForParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void AwardForParty::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.AwardForParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comment_.Clear();
  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(award_name_ != nullptr);
      award_name_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(awarded_party_ != nullptr);
      awarded_party_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(awarded_release_ != nullptr);
      awarded_release_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(awarded_resource_ != nullptr);
      awarded_resource_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(awarded_work_ != nullptr);
      awarded_work_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(awarding_body_ != nullptr);
      awarding_body_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(date_ != nullptr);
      date_->Clear();
    }
  }
  is_winner_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AwardForParty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.NameWithPronunciation award_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_award_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.PartyWithNames awarded_party = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_awarded_party(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Release awarded_release = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_awarded_release(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Resource awarded_resource = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_awarded_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Work awarded_work = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_awarded_work(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.PartyDescriptor awarding_body = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_awarding_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.TextWithFormat comment = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_comment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.EventDate date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_winner = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_winner(&has_bits);
          is_winner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.AwardForParty.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AwardForParty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.AwardForParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.NameWithPronunciation award_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::award_name(this), target, stream);
  }

  // optional .mead101.mead.PartyWithNames awarded_party = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::awarded_party(this), target, stream);
  }

  // optional .mead101.mead.Release awarded_release = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::awarded_release(this), target, stream);
  }

  // optional .mead101.mead.Resource awarded_resource = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::awarded_resource(this), target, stream);
  }

  // optional .mead101.mead.Work awarded_work = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::awarded_work(this), target, stream);
  }

  // optional .mead101.mead.PartyDescriptor awarding_body = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::awarding_body(this), target, stream);
  }

  // repeated .mead101.mead.TextWithFormat comment = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_comment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_comment(i), target, stream);
  }

  // optional .mead101.mead.EventDate date = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::date(this), target, stream);
  }

  // optional bool is_winner = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_winner(), target);
  }

  // repeated string metadata_source_reference = 10;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.AwardForParty.metadata_source_reference");
    target = stream->WriteString(10, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.AwardForParty)
  return target;
}

size_t AwardForParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.AwardForParty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.TextWithFormat comment = 7;
  total_size += 1UL * this->_internal_comment_size();
  for (const auto& msg : this->comment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metadata_source_reference = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .mead101.mead.NameWithPronunciation award_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *award_name_);
    }

    // optional .mead101.mead.PartyWithNames awarded_party = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *awarded_party_);
    }

    // optional .mead101.mead.Release awarded_release = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *awarded_release_);
    }

    // optional .mead101.mead.Resource awarded_resource = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *awarded_resource_);
    }

    // optional .mead101.mead.Work awarded_work = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *awarded_work_);
    }

    // optional .mead101.mead.PartyDescriptor awarding_body = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *awarding_body_);
    }

    // optional .mead101.mead.EventDate date = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *date_);
    }

    // optional bool is_winner = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AwardForParty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.AwardForParty)
  GOOGLE_DCHECK_NE(&from, this);
  const AwardForParty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AwardForParty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.AwardForParty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.AwardForParty)
    MergeFrom(*source);
  }
}

void AwardForParty::MergeFrom(const AwardForParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.AwardForParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  comment_.MergeFrom(from.comment_);
  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_award_name()->::mead101::mead::NameWithPronunciation::MergeFrom(from._internal_award_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_awarded_party()->::mead101::mead::PartyWithNames::MergeFrom(from._internal_awarded_party());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_awarded_release()->::mead101::mead::Release::MergeFrom(from._internal_awarded_release());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_awarded_resource()->::mead101::mead::Resource::MergeFrom(from._internal_awarded_resource());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_awarded_work()->::mead101::mead::Work::MergeFrom(from._internal_awarded_work());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_awarding_body()->::mead101::mead::PartyDescriptor::MergeFrom(from._internal_awarding_body());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_date()->::mead101::mead::EventDate::MergeFrom(from._internal_date());
    }
    if (cached_has_bits & 0x00000080u) {
      is_winner_ = from.is_winner_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AwardForParty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.AwardForParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AwardForParty::CopyFrom(const AwardForParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.AwardForParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AwardForParty::IsInitialized() const {
  return true;
}

void AwardForParty::InternalSwap(AwardForParty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  comment_.InternalSwap(&other->comment_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AwardForParty, is_winner_)
      + sizeof(AwardForParty::is_winner_)
      - PROTOBUF_FIELD_OFFSET(AwardForParty, award_name_)>(
          reinterpret_cast<char*>(&award_name_),
          reinterpret_cast<char*>(&other->award_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AwardForParty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BeatsPerMinute::InitAsDefaultInstance() {
}
class BeatsPerMinute::_Internal {
 public:
  using HasBits = decltype(std::declval<BeatsPerMinute>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BeatsPerMinute::BeatsPerMinute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_reference_(arena),
  modulation_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.BeatsPerMinute)
}
BeatsPerMinute::BeatsPerMinute(const BeatsPerMinute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metadata_source_reference_(from.metadata_source_reference_),
      modulation_(from.modulation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:mead101.mead.BeatsPerMinute)
}

void BeatsPerMinute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BeatsPerMinute_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  value_ = 0;
}

BeatsPerMinute::~BeatsPerMinute() {
  // @@protoc_insertion_point(destructor:mead101.mead.BeatsPerMinute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BeatsPerMinute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BeatsPerMinute::ArenaDtor(void* object) {
  BeatsPerMinute* _this = reinterpret_cast< BeatsPerMinute* >(object);
  (void)_this;
}
void BeatsPerMinute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BeatsPerMinute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeatsPerMinute& BeatsPerMinute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BeatsPerMinute_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void BeatsPerMinute::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.BeatsPerMinute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_reference_.Clear();
  modulation_.Clear();
  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BeatsPerMinute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string metadata_source_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.BeatsPerMinute.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Modulation modulation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_modulation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BeatsPerMinute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.BeatsPerMinute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.BeatsPerMinute.metadata_source_reference");
    target = stream->WriteString(1, s, target);
  }

  // repeated .mead101.mead.Modulation modulation = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_modulation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_modulation(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional double value = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.BeatsPerMinute)
  return target;
}

size_t BeatsPerMinute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.BeatsPerMinute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // repeated .mead101.mead.Modulation modulation = 2;
  total_size += 1UL * this->_internal_modulation_size();
  for (const auto& msg : this->modulation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional double value = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeatsPerMinute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.BeatsPerMinute)
  GOOGLE_DCHECK_NE(&from, this);
  const BeatsPerMinute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BeatsPerMinute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.BeatsPerMinute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.BeatsPerMinute)
    MergeFrom(*source);
  }
}

void BeatsPerMinute::MergeFrom(const BeatsPerMinute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.BeatsPerMinute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  modulation_.MergeFrom(from.modulation_);
  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
}

void BeatsPerMinute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.BeatsPerMinute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeatsPerMinute::CopyFrom(const BeatsPerMinute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.BeatsPerMinute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeatsPerMinute::IsInitialized() const {
  return true;
}

void BeatsPerMinute::InternalSwap(BeatsPerMinute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  modulation_.InternalSwap(&other->modulation_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BeatsPerMinute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Biography::InitAsDefaultInstance() {
}
class Biography::_Internal {
 public:
};

Biography::Biography(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  author_(arena),
  metadata_source_reference_(arena),
  text_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Biography)
}
Biography::Biography(const Biography& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      author_(from.author_),
      metadata_source_reference_(from.metadata_source_reference_),
      text_(from.text_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Biography)
}

void Biography::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Biography_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
}

Biography::~Biography() {
  // @@protoc_insertion_point(destructor:mead101.mead.Biography)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Biography::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Biography::ArenaDtor(void* object) {
  Biography* _this = reinterpret_cast< Biography* >(object);
  (void)_this;
}
void Biography::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Biography::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Biography& Biography::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Biography_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Biography::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Biography)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  author_.Clear();
  metadata_source_reference_.Clear();
  text_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Biography::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.PartyWithNames author = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_author(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Biography.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.BiographyText text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_text(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Biography::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Biography)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.PartyWithNames author = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_author_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_author(i), target, stream);
  }

  // repeated string metadata_source_reference = 2;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Biography.metadata_source_reference");
    target = stream->WriteString(2, s, target);
  }

  // repeated .mead101.mead.BiographyText text = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_text_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_text(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Biography)
  return target;
}

size_t Biography::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Biography)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.PartyWithNames author = 1;
  total_size += 1UL * this->_internal_author_size();
  for (const auto& msg : this->author_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metadata_source_reference = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // repeated .mead101.mead.BiographyText text = 3;
  total_size += 1UL * this->_internal_text_size();
  for (const auto& msg : this->text_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Biography::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Biography)
  GOOGLE_DCHECK_NE(&from, this);
  const Biography* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Biography>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Biography)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Biography)
    MergeFrom(*source);
  }
}

void Biography::MergeFrom(const Biography& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Biography)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  author_.MergeFrom(from.author_);
  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  text_.MergeFrom(from.text_);
}

void Biography::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Biography)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Biography::CopyFrom(const Biography& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Biography)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Biography::IsInitialized() const {
  return true;
}

void Biography::InternalSwap(Biography* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  author_.InternalSwap(&other->author_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  text_.InternalSwap(&other->text_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Biography::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BiographyText::InitAsDefaultInstance() {
  ::mead101::mead::_BiographyText_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::mead101::avs::CurrentTerritoryCode*>(
      ::mead101::avs::CurrentTerritoryCode::internal_default_instance());
  ::mead101::mead::_BiographyText_default_instance_._instance.get_mutable()->format_ = const_cast< ::mead101::avs::TextCodecType*>(
      ::mead101::avs::TextCodecType::internal_default_instance());
}
class BiographyText::_Internal {
 public:
  using HasBits = decltype(std::declval<BiographyText>()._has_bits_);
  static const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code(const BiographyText* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mead101::avs::TextCodecType& format(const BiographyText* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mead101::avs::CurrentTerritoryCode&
BiographyText::_Internal::applicable_territory_code(const BiographyText* msg) {
  return *msg->applicable_territory_code_;
}
const ::mead101::avs::TextCodecType&
BiographyText::_Internal::format(const BiographyText* msg) {
  return *msg->format_;
}
void BiographyText::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void BiographyText::clear_format() {
  if (format_ != nullptr) format_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
BiographyText::BiographyText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.BiographyText)
}
BiographyText::BiographyText(const BiographyText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::mead101::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_format()) {
    format_ = new ::mead101::avs::TextCodecType(*from.format_);
  } else {
    format_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.BiographyText)
}

void BiographyText::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BiographyText_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(format_));
}

BiographyText::~BiographyText() {
  // @@protoc_insertion_point(destructor:mead101.mead.BiographyText)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BiographyText::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete format_;
}

void BiographyText::ArenaDtor(void* object) {
  BiographyText* _this = reinterpret_cast< BiographyText* >(object);
  (void)_this;
}
void BiographyText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BiographyText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BiographyText& BiographyText::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BiographyText_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void BiographyText::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.BiographyText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(format_ != nullptr);
      format_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BiographyText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.TextCodecType format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.BiographyText.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string namespace = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.BiographyText.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.BiographyText.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.BiographyText.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BiographyText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.BiographyText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional .mead101.avs.TextCodecType format = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::format(this), target, stream);
  }

  // optional string language_and_script_code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.BiographyText.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language_and_script_code(), target);
  }

  // optional string namespace = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.BiographyText.namespace");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.BiographyText.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_defined_value(), target);
  }

  // optional string ext_value = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.BiographyText.ext_value");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.BiographyText)
  return target;
}

size_t BiographyText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.BiographyText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string language_and_script_code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string namespace = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional string ext_value = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

    // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .mead101.avs.TextCodecType format = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *format_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BiographyText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.BiographyText)
  GOOGLE_DCHECK_NE(&from, this);
  const BiographyText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BiographyText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.BiographyText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.BiographyText)
    MergeFrom(*source);
  }
}

void BiographyText::MergeFrom(const BiographyText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.BiographyText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_applicable_territory_code()->::mead101::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_format()->::mead101::avs::TextCodecType::MergeFrom(from._internal_format());
    }
  }
}

void BiographyText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.BiographyText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiographyText::CopyFrom(const BiographyText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.BiographyText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiographyText::IsInitialized() const {
  return true;
}

void BiographyText::InternalSwap(BiographyText* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BiographyText, format_)
      + sizeof(BiographyText::format_)
      - PROTOBUF_FIELD_OFFSET(BiographyText, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BiographyText::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CatalogNumber::InitAsDefaultInstance() {
}
class CatalogNumber::_Internal {
 public:
  using HasBits = decltype(std::declval<CatalogNumber>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CatalogNumber::CatalogNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.CatalogNumber)
}
CatalogNumber::CatalogNumber(const CatalogNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.CatalogNumber)
}

void CatalogNumber::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CatalogNumber_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CatalogNumber::~CatalogNumber() {
  // @@protoc_insertion_point(destructor:mead101.mead.CatalogNumber)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CatalogNumber::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CatalogNumber::ArenaDtor(void* object) {
  CatalogNumber* _this = reinterpret_cast< CatalogNumber* >(object);
  (void)_this;
}
void CatalogNumber::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CatalogNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CatalogNumber& CatalogNumber::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CatalogNumber_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void CatalogNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.CatalogNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CatalogNumber::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.CatalogNumber.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.CatalogNumber.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CatalogNumber::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.CatalogNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.CatalogNumber.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.CatalogNumber.ext_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.CatalogNumber)
  return target;
}

size_t CatalogNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.CatalogNumber)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CatalogNumber::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.CatalogNumber)
  GOOGLE_DCHECK_NE(&from, this);
  const CatalogNumber* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CatalogNumber>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.CatalogNumber)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.CatalogNumber)
    MergeFrom(*source);
  }
}

void CatalogNumber::MergeFrom(const CatalogNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.CatalogNumber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
  }
}

void CatalogNumber::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.CatalogNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatalogNumber::CopyFrom(const CatalogNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.CatalogNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatalogNumber::IsInitialized() const {
  return true;
}

void CatalogNumber::InternalSwap(CatalogNumber* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CatalogNumber::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Category::InitAsDefaultInstance() {
}
class Category::_Internal {
 public:
  using HasBits = decltype(std::declval<Category>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scheme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Category::Category(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  any_attribute_value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Category)
}
Category::Category(const Category& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      any_attribute_value_(from.any_attribute_value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_label(),
      GetArena());
  }
  scheme_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scheme()) {
    scheme_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_scheme(),
      GetArena());
  }
  term_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_term()) {
    term_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_term(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Category)
}

void Category::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Category_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scheme_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  term_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Category::~Category() {
  // @@protoc_insertion_point(destructor:mead101.mead.Category)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Category::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scheme_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  term_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Category::ArenaDtor(void* object) {
  Category* _this = reinterpret_cast< Category* >(object);
  (void)_this;
}
void Category::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Category::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Category& Category::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Category_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Category::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Category)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  any_attribute_value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      scheme_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      term_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Category::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string any_attribute_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_any_attribute_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Category.any_attribute_value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Category.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string scheme = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_scheme();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Category.scheme");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string term = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_term();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Category.term");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Category::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Category)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  for (int i = 0, n = this->_internal_any_attribute_value_size(); i < n; i++) {
    const auto& s = this->_internal_any_attribute_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Category.any_attribute_value");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string label = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Category.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  // optional string scheme = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scheme().data(), static_cast<int>(this->_internal_scheme().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Category.scheme");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_scheme(), target);
  }

  // optional string term = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_term().data(), static_cast<int>(this->_internal_term().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Category.term");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_term(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Category)
  return target;
}

size_t Category::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Category)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(any_attribute_value_.size());
  for (int i = 0, n = any_attribute_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      any_attribute_value_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string label = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional string scheme = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scheme());
    }

    // optional string term = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_term());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Category::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Category)
  GOOGLE_DCHECK_NE(&from, this);
  const Category* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Category>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Category)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Category)
    MergeFrom(*source);
  }
}

void Category::MergeFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Category)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  any_attribute_value_.MergeFrom(from.any_attribute_value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_scheme(from._internal_scheme());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_term(from._internal_term());
    }
  }
}

void Category::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Category::CopyFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Category::IsInitialized() const {
  return true;
}

void Category::InternalSwap(Category* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  any_attribute_value_.InternalSwap(&other->any_attribute_value_);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scheme_.Swap(&other->scheme_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  term_.Swap(&other->term_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Category::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChartEntry::InitAsDefaultInstance() {
  ::mead101::mead::_ChartEntry_default_instance_._instance.get_mutable()->date_ = const_cast< ::mead101::mead::ddex_IsoDate*>(
      ::mead101::mead::ddex_IsoDate::internal_default_instance());
  ::mead101::mead::_ChartEntry_default_instance_._instance.get_mutable()->duration_ = const_cast< ::mead101::mead::Duration*>(
      ::mead101::mead::Duration::internal_default_instance());
}
class ChartEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartEntry>()._has_bits_);
  static const ::mead101::mead::ddex_IsoDate& date(const ChartEntry* msg);
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::Duration& duration(const ChartEntry* msg);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::mead::ddex_IsoDate&
ChartEntry::_Internal::date(const ChartEntry* msg) {
  return *msg->date_;
}
const ::mead101::mead::Duration&
ChartEntry::_Internal::duration(const ChartEntry* msg) {
  return *msg->duration_;
}
ChartEntry::ChartEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  comment_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ChartEntry)
}
ChartEntry::ChartEntry(const ChartEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      comment_(from.comment_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_date()) {
    date_ = new ::mead101::mead::ddex_IsoDate(*from.date_);
  } else {
    date_ = nullptr;
  }
  if (from._internal_has_duration()) {
    duration_ = new ::mead101::mead::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  position_ = from.position_;
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ChartEntry)
}

void ChartEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChartEntry_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&date_)) + sizeof(position_));
}

ChartEntry::~ChartEntry() {
  // @@protoc_insertion_point(destructor:mead101.mead.ChartEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete date_;
  if (this != internal_default_instance()) delete duration_;
}

void ChartEntry::ArenaDtor(void* object) {
  ChartEntry* _this = reinterpret_cast< ChartEntry* >(object);
  (void)_this;
}
void ChartEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChartEntry& ChartEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChartEntry_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ChartEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ChartEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comment_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(date_ != nullptr);
      date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(duration_ != nullptr);
      duration_->Clear();
    }
  }
  position_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.TextWithFormat comment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_comment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ddex_IsoDate date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Duration duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_position(&has_bits);
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ChartEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.TextWithFormat comment = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_comment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_comment(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.ddex_IsoDate date = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::date(this), target, stream);
  }

  // optional .mead101.mead.Duration duration = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::duration(this), target, stream);
  }

  // optional int32 position = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ChartEntry)
  return target;
}

size_t ChartEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ChartEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.TextWithFormat comment = 1;
  total_size += 1UL * this->_internal_comment_size();
  for (const auto& msg : this->comment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .mead101.mead.ddex_IsoDate date = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *date_);
    }

    // optional .mead101.mead.Duration duration = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *duration_);
    }

    // optional int32 position = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_position());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ChartEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ChartEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ChartEntry)
    MergeFrom(*source);
  }
}

void ChartEntry::MergeFrom(const ChartEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ChartEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  comment_.MergeFrom(from.comment_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_date()->::mead101::mead::ddex_IsoDate::MergeFrom(from._internal_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_duration()->::mead101::mead::Duration::MergeFrom(from._internal_duration());
    }
    if (cached_has_bits & 0x00000004u) {
      position_ = from.position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChartEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ChartEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartEntry::CopyFrom(const ChartEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ChartEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartEntry::IsInitialized() const {
  return true;
}

void ChartEntry::InternalSwap(ChartEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  comment_.InternalSwap(&other->comment_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartEntry, position_)
      + sizeof(ChartEntry::position_)
      - PROTOBUF_FIELD_OFFSET(ChartEntry, date_)>(
          reinterpret_cast<char*>(&date_),
          reinterpret_cast<char*>(&other->date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChartName::InitAsDefaultInstance() {
}
class ChartName::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartName>()._has_bits_);
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChartName::ChartName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pronunciation_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ChartName)
}
ChartName::ChartName(const ChartName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pronunciation_(from.pronunciation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ChartName)
}

void ChartName::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChartName_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChartName::~ChartName() {
  // @@protoc_insertion_point(destructor:mead101.mead.ChartName)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChartName::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChartName::ArenaDtor(void* object) {
  ChartName* _this = reinterpret_cast< ChartName* >(object);
  (void)_this;
}
void ChartName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChartName& ChartName::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChartName_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ChartName::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ChartName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pronunciation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language_and_script_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ChartName.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ChartName.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Pronunciation pronunciation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pronunciation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ChartName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language_and_script_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ChartName.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language_and_script_code(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ChartName.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .mead101.mead.Pronunciation pronunciation = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pronunciation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_pronunciation(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ChartName)
  return target;
}

size_t ChartName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ChartName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.Pronunciation pronunciation = 3;
  total_size += 1UL * this->_internal_pronunciation_size();
  for (const auto& msg : this->pronunciation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string language_and_script_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ChartName)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChartName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ChartName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ChartName)
    MergeFrom(*source);
  }
}

void ChartName::MergeFrom(const ChartName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ChartName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pronunciation_.MergeFrom(from.pronunciation_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
  }
}

void ChartName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ChartName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartName::CopyFrom(const ChartName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ChartName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartName::IsInitialized() const {
  return true;
}

void ChartName::InternalSwap(ChartName* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pronunciation_.InternalSwap(&other->pronunciation_);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartName::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChildWorkHierarchy::InitAsDefaultInstance() {
  ::mead101::mead::_ChildWorkHierarchy_default_instance_._instance.get_mutable()->form_ = const_cast< ::mead101::mead::Form*>(
      ::mead101::mead::Form::internal_default_instance());
  ::mead101::mead::_ChildWorkHierarchy_default_instance_._instance.get_mutable()->work_id_ = const_cast< ::mead101::mead::MusicalWorkId*>(
      ::mead101::mead::MusicalWorkId::internal_default_instance());
}
class ChildWorkHierarchy::_Internal {
 public:
  using HasBits = decltype(std::declval<ChildWorkHierarchy>()._has_bits_);
  static const ::mead101::mead::Form& form(const ChildWorkHierarchy* msg);
  static void set_has_form(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_complete(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_described_element(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mead101::mead::MusicalWorkId& work_id(const ChildWorkHierarchy* msg);
  static void set_has_work_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mead101::mead::Form&
ChildWorkHierarchy::_Internal::form(const ChildWorkHierarchy* msg) {
  return *msg->form_;
}
const ::mead101::mead::MusicalWorkId&
ChildWorkHierarchy::_Internal::work_id(const ChildWorkHierarchy* msg) {
  return *msg->work_id_;
}
ChildWorkHierarchy::ChildWorkHierarchy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  child_(arena),
  work_title_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ChildWorkHierarchy)
}
ChildWorkHierarchy::ChildWorkHierarchy(const ChildWorkHierarchy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      child_(from.child_),
      work_title_(from.work_title_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_form()) {
    form_ = new ::mead101::mead::Form(*from.form_);
  } else {
    form_ = nullptr;
  }
  if (from._internal_has_work_id()) {
    work_id_ = new ::mead101::mead::MusicalWorkId(*from.work_id_);
  } else {
    work_id_ = nullptr;
  }
  ::memcpy(&is_complete_, &from.is_complete_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&is_complete_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ChildWorkHierarchy)
}

void ChildWorkHierarchy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChildWorkHierarchy_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&form_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&form_)) + sizeof(sequence_number_));
}

ChildWorkHierarchy::~ChildWorkHierarchy() {
  // @@protoc_insertion_point(destructor:mead101.mead.ChildWorkHierarchy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChildWorkHierarchy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete form_;
  if (this != internal_default_instance()) delete work_id_;
}

void ChildWorkHierarchy::ArenaDtor(void* object) {
  ChildWorkHierarchy* _this = reinterpret_cast< ChildWorkHierarchy* >(object);
  (void)_this;
}
void ChildWorkHierarchy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChildWorkHierarchy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChildWorkHierarchy& ChildWorkHierarchy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChildWorkHierarchy_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ChildWorkHierarchy::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ChildWorkHierarchy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  child_.Clear();
  work_title_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(form_ != nullptr);
      form_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(work_id_ != nullptr);
      work_id_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&is_complete_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_number_) -
        reinterpret_cast<char*>(&is_complete_)) + sizeof(sequence_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChildWorkHierarchy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.ChildWorkHierarchy child = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_child(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Form form = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_form(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_complete = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_complete(&has_bits);
          is_complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_described_element = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_described_element(&has_bits);
          is_described_element_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sequence_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.MusicalWorkId work_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_work_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.WorkTitle work_title = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_work_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChildWorkHierarchy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ChildWorkHierarchy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.ChildWorkHierarchy child = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_child_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_child(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.Form form = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::form(this), target, stream);
  }

  // optional bool is_complete = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_complete(), target);
  }

  // optional bool is_described_element = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_described_element(), target);
  }

  // optional int32 sequence_number = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_sequence_number(), target);
  }

  // optional .mead101.mead.MusicalWorkId work_id = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::work_id(this), target, stream);
  }

  // repeated .mead101.mead.WorkTitle work_title = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_work_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_work_title(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ChildWorkHierarchy)
  return target;
}

size_t ChildWorkHierarchy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ChildWorkHierarchy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.ChildWorkHierarchy child = 1;
  total_size += 1UL * this->_internal_child_size();
  for (const auto& msg : this->child_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.WorkTitle work_title = 7;
  total_size += 1UL * this->_internal_work_title_size();
  for (const auto& msg : this->work_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .mead101.mead.Form form = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *form_);
    }

    // optional .mead101.mead.MusicalWorkId work_id = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *work_id_);
    }

    // optional bool is_complete = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_described_element = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 sequence_number = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sequence_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChildWorkHierarchy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ChildWorkHierarchy)
  GOOGLE_DCHECK_NE(&from, this);
  const ChildWorkHierarchy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChildWorkHierarchy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ChildWorkHierarchy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ChildWorkHierarchy)
    MergeFrom(*source);
  }
}

void ChildWorkHierarchy::MergeFrom(const ChildWorkHierarchy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ChildWorkHierarchy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  child_.MergeFrom(from.child_);
  work_title_.MergeFrom(from.work_title_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_form()->::mead101::mead::Form::MergeFrom(from._internal_form());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_work_id()->::mead101::mead::MusicalWorkId::MergeFrom(from._internal_work_id());
    }
    if (cached_has_bits & 0x00000004u) {
      is_complete_ = from.is_complete_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_described_element_ = from.is_described_element_;
    }
    if (cached_has_bits & 0x00000010u) {
      sequence_number_ = from.sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChildWorkHierarchy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ChildWorkHierarchy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChildWorkHierarchy::CopyFrom(const ChildWorkHierarchy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ChildWorkHierarchy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChildWorkHierarchy::IsInitialized() const {
  return true;
}

void ChildWorkHierarchy::InternalSwap(ChildWorkHierarchy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  child_.InternalSwap(&other->child_);
  work_title_.InternalSwap(&other->work_title_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChildWorkHierarchy, sequence_number_)
      + sizeof(ChildWorkHierarchy::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(ChildWorkHierarchy, form_)>(
          reinterpret_cast<char*>(&form_),
          reinterpret_cast<char*>(&other->form_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChildWorkHierarchy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClassicalPeriod::InitAsDefaultInstance() {
  ::mead101::mead::_ClassicalPeriod_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::mead101::avs::CurrentTerritoryCode*>(
      ::mead101::avs::CurrentTerritoryCode::internal_default_instance());
  ::mead101::mead::_ClassicalPeriod_default_instance_._instance.get_mutable()->name_ = const_cast< ::mead101::mead::PeriodValue*>(
      ::mead101::mead::PeriodValue::internal_default_instance());
}
class ClassicalPeriod::_Internal {
 public:
  using HasBits = decltype(std::declval<ClassicalPeriod>()._has_bits_);
  static const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code(const ClassicalPeriod* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::PeriodValue& name(const ClassicalPeriod* msg);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mead101::avs::CurrentTerritoryCode&
ClassicalPeriod::_Internal::applicable_territory_code(const ClassicalPeriod* msg) {
  return *msg->applicable_territory_code_;
}
const ::mead101::mead::PeriodValue&
ClassicalPeriod::_Internal::name(const ClassicalPeriod* msg) {
  return *msg->name_;
}
void ClassicalPeriod::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ClassicalPeriod::ClassicalPeriod(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ClassicalPeriod)
}
ClassicalPeriod::ClassicalPeriod(const ClassicalPeriod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::mead101::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_name()) {
    name_ = new ::mead101::mead::PeriodValue(*from.name_);
  } else {
    name_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ClassicalPeriod)
}

void ClassicalPeriod::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClassicalPeriod_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&name_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(name_));
}

ClassicalPeriod::~ClassicalPeriod() {
  // @@protoc_insertion_point(destructor:mead101.mead.ClassicalPeriod)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClassicalPeriod::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete name_;
}

void ClassicalPeriod::ArenaDtor(void* object) {
  ClassicalPeriod* _this = reinterpret_cast< ClassicalPeriod* >(object);
  (void)_this;
}
void ClassicalPeriod::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClassicalPeriod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClassicalPeriod& ClassicalPeriod::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClassicalPeriod_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ClassicalPeriod::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ClassicalPeriod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(name_ != nullptr);
      name_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClassicalPeriod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ClassicalPeriod.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.PeriodValue name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassicalPeriod::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ClassicalPeriod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // repeated string metadata_source_reference = 2;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ClassicalPeriod.metadata_source_reference");
    target = stream->WriteString(2, s, target);
  }

  // optional .mead101.mead.PeriodValue name = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::name(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ClassicalPeriod)
  return target;
}

size_t ClassicalPeriod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ClassicalPeriod)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .mead101.mead.PeriodValue name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *name_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassicalPeriod::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ClassicalPeriod)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassicalPeriod* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClassicalPeriod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ClassicalPeriod)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ClassicalPeriod)
    MergeFrom(*source);
  }
}

void ClassicalPeriod::MergeFrom(const ClassicalPeriod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ClassicalPeriod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_applicable_territory_code()->::mead101::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_name()->::mead101::mead::PeriodValue::MergeFrom(from._internal_name());
    }
  }
}

void ClassicalPeriod::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ClassicalPeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassicalPeriod::CopyFrom(const ClassicalPeriod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ClassicalPeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassicalPeriod::IsInitialized() const {
  return true;
}

void ClassicalPeriod::InternalSwap(ClassicalPeriod* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClassicalPeriod, name_)
      + sizeof(ClassicalPeriod::name_)
      - PROTOBUF_FIELD_OFFSET(ClassicalPeriod, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassicalPeriod::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommentaryNote::InitAsDefaultInstance() {
  ::mead101::mead::_CommentaryNote_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::mead101::avs::CurrentTerritoryCode*>(
      ::mead101::avs::CurrentTerritoryCode::internal_default_instance());
}
class CommentaryNote::_Internal {
 public:
  using HasBits = decltype(std::declval<CommentaryNote>()._has_bits_);
  static const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code(const CommentaryNote* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mead101::avs::CurrentTerritoryCode&
CommentaryNote::_Internal::applicable_territory_code(const CommentaryNote* msg) {
  return *msg->applicable_territory_code_;
}
void CommentaryNote::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CommentaryNote::CommentaryNote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  author_(arena),
  commentary_note_type_(arena),
  metadata_source_reference_(arena),
  text_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.CommentaryNote)
}
CommentaryNote::CommentaryNote(const CommentaryNote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      author_(from.author_),
      commentary_note_type_(from.commentary_note_type_),
      metadata_source_reference_(from.metadata_source_reference_),
      text_(from.text_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::mead101::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.CommentaryNote)
}

void CommentaryNote::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommentaryNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  applicable_territory_code_ = nullptr;
}

CommentaryNote::~CommentaryNote() {
  // @@protoc_insertion_point(destructor:mead101.mead.CommentaryNote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommentaryNote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete applicable_territory_code_;
}

void CommentaryNote::ArenaDtor(void* object) {
  CommentaryNote* _this = reinterpret_cast< CommentaryNote* >(object);
  (void)_this;
}
void CommentaryNote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommentaryNote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommentaryNote& CommentaryNote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommentaryNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void CommentaryNote::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.CommentaryNote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  author_.Clear();
  commentary_note_type_.Clear();
  metadata_source_reference_.Clear();
  text_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
    applicable_territory_code_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommentaryNote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.PartyWithNames author = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_author(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.CommentaryNoteType commentary_note_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commentary_note_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.CommentaryNote.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.TextWithoutTerritory text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_text(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommentaryNote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.CommentaryNote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // repeated .mead101.mead.PartyWithNames author = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_author_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_author(i), target, stream);
  }

  // repeated .mead101.mead.CommentaryNoteType commentary_note_type = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_commentary_note_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_commentary_note_type(i), target, stream);
  }

  // repeated string metadata_source_reference = 4;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.CommentaryNote.metadata_source_reference");
    target = stream->WriteString(4, s, target);
  }

  // repeated .mead101.mead.TextWithoutTerritory text = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_text_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_text(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.CommentaryNote)
  return target;
}

size_t CommentaryNote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.CommentaryNote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.PartyWithNames author = 2;
  total_size += 1UL * this->_internal_author_size();
  for (const auto& msg : this->author_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.CommentaryNoteType commentary_note_type = 3;
  total_size += 1UL * this->_internal_commentary_note_type_size();
  for (const auto& msg : this->commentary_note_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metadata_source_reference = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // repeated .mead101.mead.TextWithoutTerritory text = 5;
  total_size += 1UL * this->_internal_text_size();
  for (const auto& msg : this->text_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *applicable_territory_code_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommentaryNote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.CommentaryNote)
  GOOGLE_DCHECK_NE(&from, this);
  const CommentaryNote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommentaryNote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.CommentaryNote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.CommentaryNote)
    MergeFrom(*source);
  }
}

void CommentaryNote::MergeFrom(const CommentaryNote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.CommentaryNote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  author_.MergeFrom(from.author_);
  commentary_note_type_.MergeFrom(from.commentary_note_type_);
  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  text_.MergeFrom(from.text_);
  if (from._internal_has_applicable_territory_code()) {
    _internal_mutable_applicable_territory_code()->::mead101::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
  }
}

void CommentaryNote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.CommentaryNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommentaryNote::CopyFrom(const CommentaryNote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.CommentaryNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentaryNote::IsInitialized() const {
  return true;
}

void CommentaryNote::InternalSwap(CommentaryNote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  author_.InternalSwap(&other->author_);
  commentary_note_type_.InternalSwap(&other->commentary_note_type_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  text_.InternalSwap(&other->text_);
  swap(applicable_territory_code_, other->applicable_territory_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommentaryNote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommentaryNoteType::InitAsDefaultInstance() {
  ::mead101::mead::_CommentaryNoteType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::CommentaryNoteType*>(
      ::mead101::avs::CommentaryNoteType::internal_default_instance());
}
class CommentaryNoteType::_Internal {
 public:
  using HasBits = decltype(std::declval<CommentaryNoteType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::CommentaryNoteType& ext_value(const CommentaryNoteType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::CommentaryNoteType&
CommentaryNoteType::_Internal::ext_value(const CommentaryNoteType* msg) {
  return *msg->ext_value_;
}
void CommentaryNoteType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommentaryNoteType::CommentaryNoteType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.CommentaryNoteType)
}
CommentaryNoteType::CommentaryNoteType(const CommentaryNoteType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::CommentaryNoteType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.CommentaryNoteType)
}

void CommentaryNoteType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommentaryNoteType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

CommentaryNoteType::~CommentaryNoteType() {
  // @@protoc_insertion_point(destructor:mead101.mead.CommentaryNoteType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommentaryNoteType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void CommentaryNoteType::ArenaDtor(void* object) {
  CommentaryNoteType* _this = reinterpret_cast< CommentaryNoteType* >(object);
  (void)_this;
}
void CommentaryNoteType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommentaryNoteType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommentaryNoteType& CommentaryNoteType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommentaryNoteType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void CommentaryNoteType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.CommentaryNoteType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommentaryNoteType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.CommentaryNoteType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.CommentaryNoteType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.CommentaryNoteType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommentaryNoteType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.CommentaryNoteType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.CommentaryNoteType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.CommentaryNoteType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.CommentaryNoteType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.CommentaryNoteType)
  return target;
}

size_t CommentaryNoteType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.CommentaryNoteType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.CommentaryNoteType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommentaryNoteType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.CommentaryNoteType)
  GOOGLE_DCHECK_NE(&from, this);
  const CommentaryNoteType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommentaryNoteType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.CommentaryNoteType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.CommentaryNoteType)
    MergeFrom(*source);
  }
}

void CommentaryNoteType::MergeFrom(const CommentaryNoteType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.CommentaryNoteType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::CommentaryNoteType::MergeFrom(from._internal_ext_value());
    }
  }
}

void CommentaryNoteType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.CommentaryNoteType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommentaryNoteType::CopyFrom(const CommentaryNoteType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.CommentaryNoteType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentaryNoteType::IsInitialized() const {
  return true;
}

void CommentaryNoteType::InternalSwap(CommentaryNoteType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommentaryNoteType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Content::InitAsDefaultInstance() {
}
class Content::_Internal {
 public:
  using HasBits = decltype(std::declval<Content>()._has_bits_);
  static void set_has_src(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Content::Content(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  any_attribute_value_(arena),
  any_value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Content)
}
Content::Content(const Content& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      any_attribute_value_(from.any_attribute_value_),
      any_value_(from.any_value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  src_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src()) {
    src_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_src(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Content)
}

void Content::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Content_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  src_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Content::~Content() {
  // @@protoc_insertion_point(destructor:mead101.mead.Content)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Content::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  src_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Content::ArenaDtor(void* object) {
  Content* _this = reinterpret_cast< Content* >(object);
  (void)_this;
}
void Content::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Content::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Content& Content::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Content_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Content::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Content)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  any_attribute_value_.Clear();
  any_value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Content::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string any_attribute_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_any_attribute_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Content.any_attribute_value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string any_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_any_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Content.any_value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string src = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Content.src");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Content.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Content::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Content)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  for (int i = 0, n = this->_internal_any_attribute_value_size(); i < n; i++) {
    const auto& s = this->_internal_any_attribute_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Content.any_attribute_value");
    target = stream->WriteString(1, s, target);
  }

  // repeated string any_value = 2;
  for (int i = 0, n = this->_internal_any_value_size(); i < n; i++) {
    const auto& s = this->_internal_any_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Content.any_value");
    target = stream->WriteString(2, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string src = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_src().data(), static_cast<int>(this->_internal_src().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Content.src");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_src(), target);
  }

  // optional string type = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Content.type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Content)
  return target;
}

size_t Content::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Content)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(any_attribute_value_.size());
  for (int i = 0, n = any_attribute_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      any_attribute_value_.Get(i));
  }

  // repeated string any_value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(any_value_.size());
  for (int i = 0, n = any_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      any_value_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string src = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_src());
    }

    // optional string type = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Content::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Content)
  GOOGLE_DCHECK_NE(&from, this);
  const Content* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Content>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Content)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Content)
    MergeFrom(*source);
  }
}

void Content::MergeFrom(const Content& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Content)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  any_attribute_value_.MergeFrom(from.any_attribute_value_);
  any_value_.MergeFrom(from.any_value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_src(from._internal_src());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_type(from._internal_type());
    }
  }
}

void Content::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Content)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Content::CopyFrom(const Content& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Content)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Content::IsInitialized() const {
  return true;
}

void Content::InternalSwap(Content* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  any_attribute_value_.InternalSwap(&other->any_attribute_value_);
  any_value_.InternalSwap(&other->any_value_);
  src_.Swap(&other->src_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Content::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CurrentTerritoryCode::InitAsDefaultInstance() {
  ::mead101::mead::_CurrentTerritoryCode_default_instance_._instance.get_mutable()->identifier_type_ = const_cast< ::mead101::avs::TerritoryCodeType*>(
      ::mead101::avs::TerritoryCodeType::internal_default_instance());
  ::mead101::mead::_CurrentTerritoryCode_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::CurrentTerritoryCode*>(
      ::mead101::avs::CurrentTerritoryCode::internal_default_instance());
}
class CurrentTerritoryCode::_Internal {
 public:
  using HasBits = decltype(std::declval<CurrentTerritoryCode>()._has_bits_);
  static const ::mead101::avs::TerritoryCodeType& identifier_type(const CurrentTerritoryCode* msg);
  static void set_has_identifier_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::avs::CurrentTerritoryCode& ext_value(const CurrentTerritoryCode* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mead101::avs::TerritoryCodeType&
CurrentTerritoryCode::_Internal::identifier_type(const CurrentTerritoryCode* msg) {
  return *msg->identifier_type_;
}
const ::mead101::avs::CurrentTerritoryCode&
CurrentTerritoryCode::_Internal::ext_value(const CurrentTerritoryCode* msg) {
  return *msg->ext_value_;
}
void CurrentTerritoryCode::clear_identifier_type() {
  if (identifier_type_ != nullptr) identifier_type_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CurrentTerritoryCode::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CurrentTerritoryCode::CurrentTerritoryCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.CurrentTerritoryCode)
}
CurrentTerritoryCode::CurrentTerritoryCode(const CurrentTerritoryCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_identifier_type()) {
    identifier_type_ = new ::mead101::avs::TerritoryCodeType(*from.identifier_type_);
  } else {
    identifier_type_ = nullptr;
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::CurrentTerritoryCode(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.CurrentTerritoryCode)
}

void CurrentTerritoryCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&identifier_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ext_value_) -
      reinterpret_cast<char*>(&identifier_type_)) + sizeof(ext_value_));
}

CurrentTerritoryCode::~CurrentTerritoryCode() {
  // @@protoc_insertion_point(destructor:mead101.mead.CurrentTerritoryCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CurrentTerritoryCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete identifier_type_;
  if (this != internal_default_instance()) delete ext_value_;
}

void CurrentTerritoryCode::ArenaDtor(void* object) {
  CurrentTerritoryCode* _this = reinterpret_cast< CurrentTerritoryCode* >(object);
  (void)_this;
}
void CurrentTerritoryCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CurrentTerritoryCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CurrentTerritoryCode& CurrentTerritoryCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void CurrentTerritoryCode::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.CurrentTerritoryCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(identifier_type_ != nullptr);
      identifier_type_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrentTerritoryCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.avs.TerritoryCodeType identifier_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.CurrentTerritoryCode ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CurrentTerritoryCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.CurrentTerritoryCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.avs.TerritoryCodeType identifier_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::identifier_type(this), target, stream);
  }

  // optional .mead101.avs.CurrentTerritoryCode ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.CurrentTerritoryCode)
  return target;
}

size_t CurrentTerritoryCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.CurrentTerritoryCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .mead101.avs.TerritoryCodeType identifier_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *identifier_type_);
    }

    // optional .mead101.avs.CurrentTerritoryCode ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrentTerritoryCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.CurrentTerritoryCode)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrentTerritoryCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CurrentTerritoryCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.CurrentTerritoryCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.CurrentTerritoryCode)
    MergeFrom(*source);
  }
}

void CurrentTerritoryCode::MergeFrom(const CurrentTerritoryCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.CurrentTerritoryCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_identifier_type()->::mead101::avs::TerritoryCodeType::MergeFrom(from._internal_identifier_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ext_value()->::mead101::avs::CurrentTerritoryCode::MergeFrom(from._internal_ext_value());
    }
  }
}

void CurrentTerritoryCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.CurrentTerritoryCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentTerritoryCode::CopyFrom(const CurrentTerritoryCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.CurrentTerritoryCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentTerritoryCode::IsInitialized() const {
  return true;
}

void CurrentTerritoryCode::InternalSwap(CurrentTerritoryCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CurrentTerritoryCode, ext_value_)
      + sizeof(CurrentTerritoryCode::ext_value_)
      - PROTOBUF_FIELD_OFFSET(CurrentTerritoryCode, identifier_type_)>(
          reinterpret_cast<char*>(&identifier_type_),
          reinterpret_cast<char*>(&other->identifier_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrentTerritoryCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DanceAndRhythmStyle::InitAsDefaultInstance() {
  ::mead101::mead::_DanceAndRhythmStyle_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::mead101::avs::CurrentTerritoryCode*>(
      ::mead101::avs::CurrentTerritoryCode::internal_default_instance());
  ::mead101::mead::_DanceAndRhythmStyle_default_instance_._instance.get_mutable()->value_ = const_cast< ::mead101::mead::DanceAndRhythmStyleValue*>(
      ::mead101::mead::DanceAndRhythmStyleValue::internal_default_instance());
}
class DanceAndRhythmStyle::_Internal {
 public:
  using HasBits = decltype(std::declval<DanceAndRhythmStyle>()._has_bits_);
  static const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code(const DanceAndRhythmStyle* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::DanceAndRhythmStyleValue& value(const DanceAndRhythmStyle* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mead101::avs::CurrentTerritoryCode&
DanceAndRhythmStyle::_Internal::applicable_territory_code(const DanceAndRhythmStyle* msg) {
  return *msg->applicable_territory_code_;
}
const ::mead101::mead::DanceAndRhythmStyleValue&
DanceAndRhythmStyle::_Internal::value(const DanceAndRhythmStyle* msg) {
  return *msg->value_;
}
void DanceAndRhythmStyle::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DanceAndRhythmStyle::DanceAndRhythmStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  description_(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.DanceAndRhythmStyle)
}
DanceAndRhythmStyle::DanceAndRhythmStyle(const DanceAndRhythmStyle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      description_(from.description_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::mead101::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::mead101::mead::DanceAndRhythmStyleValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.DanceAndRhythmStyle)
}

void DanceAndRhythmStyle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DanceAndRhythmStyle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(value_));
}

DanceAndRhythmStyle::~DanceAndRhythmStyle() {
  // @@protoc_insertion_point(destructor:mead101.mead.DanceAndRhythmStyle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DanceAndRhythmStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete value_;
}

void DanceAndRhythmStyle::ArenaDtor(void* object) {
  DanceAndRhythmStyle* _this = reinterpret_cast< DanceAndRhythmStyle* >(object);
  (void)_this;
}
void DanceAndRhythmStyle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DanceAndRhythmStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DanceAndRhythmStyle& DanceAndRhythmStyle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DanceAndRhythmStyle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void DanceAndRhythmStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.DanceAndRhythmStyle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.Clear();
  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DanceAndRhythmStyle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.TextWithoutTerritory description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_description(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DanceAndRhythmStyle.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.DanceAndRhythmStyleValue value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DanceAndRhythmStyle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.DanceAndRhythmStyle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // repeated .mead101.mead.TextWithoutTerritory description = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_description_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_description(i), target, stream);
  }

  // repeated string metadata_source_reference = 3;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DanceAndRhythmStyle.metadata_source_reference");
    target = stream->WriteString(3, s, target);
  }

  // optional .mead101.mead.DanceAndRhythmStyleValue value = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.DanceAndRhythmStyle)
  return target;
}

size_t DanceAndRhythmStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.DanceAndRhythmStyle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.TextWithoutTerritory description = 2;
  total_size += 1UL * this->_internal_description_size();
  for (const auto& msg : this->description_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metadata_source_reference = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .mead101.mead.DanceAndRhythmStyleValue value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DanceAndRhythmStyle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.DanceAndRhythmStyle)
  GOOGLE_DCHECK_NE(&from, this);
  const DanceAndRhythmStyle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DanceAndRhythmStyle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.DanceAndRhythmStyle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.DanceAndRhythmStyle)
    MergeFrom(*source);
  }
}

void DanceAndRhythmStyle::MergeFrom(const DanceAndRhythmStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.DanceAndRhythmStyle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  description_.MergeFrom(from.description_);
  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_applicable_territory_code()->::mead101::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::mead101::mead::DanceAndRhythmStyleValue::MergeFrom(from._internal_value());
    }
  }
}

void DanceAndRhythmStyle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.DanceAndRhythmStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DanceAndRhythmStyle::CopyFrom(const DanceAndRhythmStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.DanceAndRhythmStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DanceAndRhythmStyle::IsInitialized() const {
  return true;
}

void DanceAndRhythmStyle::InternalSwap(DanceAndRhythmStyle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.InternalSwap(&other->description_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DanceAndRhythmStyle, value_)
      + sizeof(DanceAndRhythmStyle::value_)
      - PROTOBUF_FIELD_OFFSET(DanceAndRhythmStyle, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DanceAndRhythmStyle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DanceAndRhythmStyleValue::InitAsDefaultInstance() {
  ::mead101::mead::_DanceAndRhythmStyleValue_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::DanceAndRhythmStyle*>(
      ::mead101::avs::DanceAndRhythmStyle::internal_default_instance());
}
class DanceAndRhythmStyleValue::_Internal {
 public:
  using HasBits = decltype(std::declval<DanceAndRhythmStyleValue>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::DanceAndRhythmStyle& ext_value(const DanceAndRhythmStyleValue* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::DanceAndRhythmStyle&
DanceAndRhythmStyleValue::_Internal::ext_value(const DanceAndRhythmStyleValue* msg) {
  return *msg->ext_value_;
}
void DanceAndRhythmStyleValue::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
DanceAndRhythmStyleValue::DanceAndRhythmStyleValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.DanceAndRhythmStyleValue)
}
DanceAndRhythmStyleValue::DanceAndRhythmStyleValue(const DanceAndRhythmStyleValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::DanceAndRhythmStyle(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.DanceAndRhythmStyleValue)
}

void DanceAndRhythmStyleValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DanceAndRhythmStyleValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

DanceAndRhythmStyleValue::~DanceAndRhythmStyleValue() {
  // @@protoc_insertion_point(destructor:mead101.mead.DanceAndRhythmStyleValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DanceAndRhythmStyleValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void DanceAndRhythmStyleValue::ArenaDtor(void* object) {
  DanceAndRhythmStyleValue* _this = reinterpret_cast< DanceAndRhythmStyleValue* >(object);
  (void)_this;
}
void DanceAndRhythmStyleValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DanceAndRhythmStyleValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DanceAndRhythmStyleValue& DanceAndRhythmStyleValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DanceAndRhythmStyleValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void DanceAndRhythmStyleValue::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.DanceAndRhythmStyleValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DanceAndRhythmStyleValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DanceAndRhythmStyleValue.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DanceAndRhythmStyleValue.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.DanceAndRhythmStyle ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DanceAndRhythmStyleValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.DanceAndRhythmStyleValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DanceAndRhythmStyleValue.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DanceAndRhythmStyleValue.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.DanceAndRhythmStyle ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.DanceAndRhythmStyleValue)
  return target;
}

size_t DanceAndRhythmStyleValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.DanceAndRhythmStyleValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.DanceAndRhythmStyle ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DanceAndRhythmStyleValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.DanceAndRhythmStyleValue)
  GOOGLE_DCHECK_NE(&from, this);
  const DanceAndRhythmStyleValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DanceAndRhythmStyleValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.DanceAndRhythmStyleValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.DanceAndRhythmStyleValue)
    MergeFrom(*source);
  }
}

void DanceAndRhythmStyleValue::MergeFrom(const DanceAndRhythmStyleValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.DanceAndRhythmStyleValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::DanceAndRhythmStyle::MergeFrom(from._internal_ext_value());
    }
  }
}

void DanceAndRhythmStyleValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.DanceAndRhythmStyleValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DanceAndRhythmStyleValue::CopyFrom(const DanceAndRhythmStyleValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.DanceAndRhythmStyleValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DanceAndRhythmStyleValue::IsInitialized() const {
  return true;
}

void DanceAndRhythmStyleValue::InternalSwap(DanceAndRhythmStyleValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DanceAndRhythmStyleValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Date::InitAsDefaultInstance() {
  ::mead101::mead::_Date_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::mead::ddex_IsoDate*>(
      ::mead101::mead::ddex_IsoDate::internal_default_instance());
}
class Date::_Internal {
 public:
  using HasBits = decltype(std::declval<Date>()._has_bits_);
  static void set_has_is_approximate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::ddex_IsoDate& ext_value(const Date* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mead101::mead::ddex_IsoDate&
Date::_Internal::ext_value(const Date* msg) {
  return *msg->ext_value_;
}
Date::Date(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Date)
}
Date::Date(const Date& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::mead::ddex_IsoDate(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  is_approximate_ = from.is_approximate_;
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Date)
}

void Date::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Date_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&ext_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_approximate_) -
      reinterpret_cast<char*>(&ext_value_)) + sizeof(is_approximate_));
}

Date::~Date() {
  // @@protoc_insertion_point(destructor:mead101.mead.Date)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Date::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ext_value_;
}

void Date::ArenaDtor(void* object) {
  Date* _this = reinterpret_cast< Date* >(object);
  (void)_this;
}
void Date::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Date::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Date& Date::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Date_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Date::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Date)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ext_value_ != nullptr);
    ext_value_->Clear();
  }
  is_approximate_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Date::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_approximate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_approximate(&has_bits);
          is_approximate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ddex_IsoDate ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Date::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Date)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_approximate = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_approximate(), target);
  }

  // optional .mead101.mead.ddex_IsoDate ext_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Date)
  return target;
}

size_t Date::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Date)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .mead101.mead.ddex_IsoDate ext_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

    // optional bool is_approximate = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Date::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Date)
  GOOGLE_DCHECK_NE(&from, this);
  const Date* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Date>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Date)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Date)
    MergeFrom(*source);
  }
}

void Date::MergeFrom(const Date& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Date)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ext_value()->::mead101::mead::ddex_IsoDate::MergeFrom(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000002u) {
      is_approximate_ = from.is_approximate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Date::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Date)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Date::CopyFrom(const Date& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Date)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Date::IsInitialized() const {
  return true;
}

void Date::InternalSwap(Date* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Date, is_approximate_)
      + sizeof(Date::is_approximate_)
      - PROTOBUF_FIELD_OFFSET(Date, ext_value_)>(
          reinterpret_cast<char*>(&ext_value_),
          reinterpret_cast<char*>(&other->ext_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Date::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DateTime::InitAsDefaultInstance() {
}
class DateTime::_Internal {
 public:
  using HasBits = decltype(std::declval<DateTime>()._has_bits_);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DateTime::DateTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  any_attribute_value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.DateTime)
}
DateTime::DateTime(const DateTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      any_attribute_value_(from.any_attribute_value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.DateTime)
}

void DateTime::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DateTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DateTime::~DateTime() {
  // @@protoc_insertion_point(destructor:mead101.mead.DateTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DateTime::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DateTime::ArenaDtor(void* object) {
  DateTime* _this = reinterpret_cast< DateTime* >(object);
  (void)_this;
}
void DateTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DateTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTime& DateTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DateTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void DateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.DateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  any_attribute_value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ext_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DateTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string any_attribute_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_any_attribute_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DateTime.any_attribute_value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DateTime.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DateTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.DateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  for (int i = 0, n = this->_internal_any_attribute_value_size(); i < n; i++) {
    const auto& s = this->_internal_any_attribute_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DateTime.any_attribute_value");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string ext_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DateTime.ext_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.DateTime)
  return target;
}

size_t DateTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.DateTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(any_attribute_value_.size());
  for (int i = 0, n = any_attribute_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      any_attribute_value_.Get(i));
  }

  // optional string ext_value = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ext_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.DateTime)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DateTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.DateTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.DateTime)
    MergeFrom(*source);
  }
}

void DateTime::MergeFrom(const DateTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.DateTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  any_attribute_value_.MergeFrom(from.any_attribute_value_);
  if (from._internal_has_ext_value()) {
    _internal_set_ext_value(from._internal_ext_value());
  }
}

void DateTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.DateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTime::CopyFrom(const DateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.DateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTime::IsInitialized() const {
  return true;
}

void DateTime::InternalSwap(DateTime* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  any_attribute_value_.InternalSwap(&other->any_attribute_value_);
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DateTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DerivedRecording::InitAsDefaultInstance() {
  ::mead101::mead::_DerivedRecording_default_instance_._instance.get_mutable()->display_artist_name_ = const_cast< ::mead101::mead::DisplayArtistNameWithDefault*>(
      ::mead101::mead::DisplayArtistNameWithDefault::internal_default_instance());
  ::mead101::mead::_DerivedRecording_default_instance_._instance.get_mutable()->related_resource_type_ = const_cast< ::mead101::mead::RelatedResourceType*>(
      ::mead101::mead::RelatedResourceType::internal_default_instance());
  ::mead101::mead::_DerivedRecording_default_instance_._instance.get_mutable()->resource_id_ = const_cast< ::mead101::mead::ResourceId*>(
      ::mead101::mead::ResourceId::internal_default_instance());
}
class DerivedRecording::_Internal {
 public:
  using HasBits = decltype(std::declval<DerivedRecording>()._has_bits_);
  static const ::mead101::mead::DisplayArtistNameWithDefault& display_artist_name(const DerivedRecording* msg);
  static void set_has_display_artist_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::RelatedResourceType& related_resource_type(const DerivedRecording* msg);
  static void set_has_related_resource_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::ResourceId& resource_id(const DerivedRecording* msg);
  static void set_has_resource_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::mead::DisplayArtistNameWithDefault&
DerivedRecording::_Internal::display_artist_name(const DerivedRecording* msg) {
  return *msg->display_artist_name_;
}
const ::mead101::mead::RelatedResourceType&
DerivedRecording::_Internal::related_resource_type(const DerivedRecording* msg) {
  return *msg->related_resource_type_;
}
const ::mead101::mead::ResourceId&
DerivedRecording::_Internal::resource_id(const DerivedRecording* msg) {
  return *msg->resource_id_;
}
DerivedRecording::DerivedRecording(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_reference_(arena),
  title_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.DerivedRecording)
}
DerivedRecording::DerivedRecording(const DerivedRecording& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metadata_source_reference_(from.metadata_source_reference_),
      title_(from.title_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_display_artist_name()) {
    display_artist_name_ = new ::mead101::mead::DisplayArtistNameWithDefault(*from.display_artist_name_);
  } else {
    display_artist_name_ = nullptr;
  }
  if (from._internal_has_related_resource_type()) {
    related_resource_type_ = new ::mead101::mead::RelatedResourceType(*from.related_resource_type_);
  } else {
    related_resource_type_ = nullptr;
  }
  if (from._internal_has_resource_id()) {
    resource_id_ = new ::mead101::mead::ResourceId(*from.resource_id_);
  } else {
    resource_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.DerivedRecording)
}

void DerivedRecording::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DerivedRecording_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&display_artist_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_id_) -
      reinterpret_cast<char*>(&display_artist_name_)) + sizeof(resource_id_));
}

DerivedRecording::~DerivedRecording() {
  // @@protoc_insertion_point(destructor:mead101.mead.DerivedRecording)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DerivedRecording::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete display_artist_name_;
  if (this != internal_default_instance()) delete related_resource_type_;
  if (this != internal_default_instance()) delete resource_id_;
}

void DerivedRecording::ArenaDtor(void* object) {
  DerivedRecording* _this = reinterpret_cast< DerivedRecording* >(object);
  (void)_this;
}
void DerivedRecording::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DerivedRecording::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DerivedRecording& DerivedRecording::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DerivedRecording_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void DerivedRecording::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.DerivedRecording)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_reference_.Clear();
  title_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(display_artist_name_ != nullptr);
      display_artist_name_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(related_resource_type_ != nullptr);
      related_resource_type_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(resource_id_ != nullptr);
      resource_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DerivedRecording::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.DisplayArtistNameWithDefault display_artist_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_display_artist_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DerivedRecording.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.RelatedResourceType related_resource_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_related_resource_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ResourceId resource_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.TitleWithPronunciation title = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DerivedRecording::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.DerivedRecording)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.DisplayArtistNameWithDefault display_artist_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::display_artist_name(this), target, stream);
  }

  // repeated string metadata_source_reference = 2;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DerivedRecording.metadata_source_reference");
    target = stream->WriteString(2, s, target);
  }

  // optional .mead101.mead.RelatedResourceType related_resource_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::related_resource_type(this), target, stream);
  }

  // optional .mead101.mead.ResourceId resource_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::resource_id(this), target, stream);
  }

  // repeated .mead101.mead.TitleWithPronunciation title = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_title(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.DerivedRecording)
  return target;
}

size_t DerivedRecording::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.DerivedRecording)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // repeated .mead101.mead.TitleWithPronunciation title = 5;
  total_size += 1UL * this->_internal_title_size();
  for (const auto& msg : this->title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .mead101.mead.DisplayArtistNameWithDefault display_artist_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *display_artist_name_);
    }

    // optional .mead101.mead.RelatedResourceType related_resource_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *related_resource_type_);
    }

    // optional .mead101.mead.ResourceId resource_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_id_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DerivedRecording::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.DerivedRecording)
  GOOGLE_DCHECK_NE(&from, this);
  const DerivedRecording* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DerivedRecording>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.DerivedRecording)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.DerivedRecording)
    MergeFrom(*source);
  }
}

void DerivedRecording::MergeFrom(const DerivedRecording& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.DerivedRecording)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  title_.MergeFrom(from.title_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_display_artist_name()->::mead101::mead::DisplayArtistNameWithDefault::MergeFrom(from._internal_display_artist_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_related_resource_type()->::mead101::mead::RelatedResourceType::MergeFrom(from._internal_related_resource_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_resource_id()->::mead101::mead::ResourceId::MergeFrom(from._internal_resource_id());
    }
  }
}

void DerivedRecording::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.DerivedRecording)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DerivedRecording::CopyFrom(const DerivedRecording& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.DerivedRecording)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DerivedRecording::IsInitialized() const {
  return true;
}

void DerivedRecording::InternalSwap(DerivedRecording* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  title_.InternalSwap(&other->title_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DerivedRecording, resource_id_)
      + sizeof(DerivedRecording::resource_id_)
      - PROTOBUF_FIELD_OFFSET(DerivedRecording, display_artist_name_)>(
          reinterpret_cast<char*>(&display_artist_name_),
          reinterpret_cast<char*>(&other->display_artist_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DerivedRecording::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetailedHashSum::InitAsDefaultInstance() {
  ::mead101::mead::_DetailedHashSum_default_instance_._instance.get_mutable()->algorithm_ = const_cast< ::mead101::mead::HashSumAlgorithmType*>(
      ::mead101::mead::HashSumAlgorithmType::internal_default_instance());
  ::mead101::mead::_DetailedHashSum_default_instance_._instance.get_mutable()->data_type_ = const_cast< ::mead101::avs::BinaryDataType*>(
      ::mead101::avs::BinaryDataType::internal_default_instance());
}
class DetailedHashSum::_Internal {
 public:
  using HasBits = decltype(std::declval<DetailedHashSum>()._has_bits_);
  static const ::mead101::mead::HashSumAlgorithmType& algorithm(const DetailedHashSum* msg);
  static void set_has_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mead101::avs::BinaryDataType& data_type(const DetailedHashSum* msg);
  static void set_has_data_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hash_sum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::mead::HashSumAlgorithmType&
DetailedHashSum::_Internal::algorithm(const DetailedHashSum* msg) {
  return *msg->algorithm_;
}
const ::mead101::avs::BinaryDataType&
DetailedHashSum::_Internal::data_type(const DetailedHashSum* msg) {
  return *msg->data_type_;
}
void DetailedHashSum::clear_data_type() {
  if (data_type_ != nullptr) data_type_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
DetailedHashSum::DetailedHashSum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.DetailedHashSum)
}
DetailedHashSum::DetailedHashSum(const DetailedHashSum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_sum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hash_sum_value()) {
    hash_sum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hash_sum_value(),
      GetArena());
  }
  parameter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_parameter()) {
    parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_parameter(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  if (from._internal_has_algorithm()) {
    algorithm_ = new ::mead101::mead::HashSumAlgorithmType(*from.algorithm_);
  } else {
    algorithm_ = nullptr;
  }
  if (from._internal_has_data_type()) {
    data_type_ = new ::mead101::avs::BinaryDataType(*from.data_type_);
  } else {
    data_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.DetailedHashSum)
}

void DetailedHashSum::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetailedHashSum_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  hash_sum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parameter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&algorithm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&algorithm_)) + sizeof(data_type_));
}

DetailedHashSum::~DetailedHashSum() {
  // @@protoc_insertion_point(destructor:mead101.mead.DetailedHashSum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetailedHashSum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_sum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parameter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete algorithm_;
  if (this != internal_default_instance()) delete data_type_;
}

void DetailedHashSum::ArenaDtor(void* object) {
  DetailedHashSum* _this = reinterpret_cast< DetailedHashSum* >(object);
  (void)_this;
}
void DetailedHashSum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetailedHashSum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetailedHashSum& DetailedHashSum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetailedHashSum_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void DetailedHashSum::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.DetailedHashSum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      hash_sum_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      parameter_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(algorithm_ != nullptr);
      algorithm_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(data_type_ != nullptr);
      data_type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetailedHashSum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.HashSumAlgorithmType algorithm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_algorithm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.BinaryDataType data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hash_sum_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_hash_sum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DetailedHashSum.hash_sum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string parameter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_parameter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DetailedHashSum.parameter");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DetailedHashSum.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetailedHashSum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.DetailedHashSum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.HashSumAlgorithmType algorithm = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::algorithm(this), target, stream);
  }

  // optional .mead101.avs.BinaryDataType data_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data_type(this), target, stream);
  }

  // optional string hash_sum_value = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hash_sum_value().data(), static_cast<int>(this->_internal_hash_sum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DetailedHashSum.hash_sum_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hash_sum_value(), target);
  }

  // optional string parameter = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_parameter().data(), static_cast<int>(this->_internal_parameter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DetailedHashSum.parameter");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_parameter(), target);
  }

  // optional string version = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DetailedHashSum.version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.DetailedHashSum)
  return target;
}

size_t DetailedHashSum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.DetailedHashSum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string hash_sum_value = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hash_sum_value());
    }

    // optional string parameter = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_parameter());
    }

    // optional string version = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional .mead101.mead.HashSumAlgorithmType algorithm = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *algorithm_);
    }

    // optional .mead101.avs.BinaryDataType data_type = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_type_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetailedHashSum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.DetailedHashSum)
  GOOGLE_DCHECK_NE(&from, this);
  const DetailedHashSum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetailedHashSum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.DetailedHashSum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.DetailedHashSum)
    MergeFrom(*source);
  }
}

void DetailedHashSum::MergeFrom(const DetailedHashSum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.DetailedHashSum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hash_sum_value(from._internal_hash_sum_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_parameter(from._internal_parameter());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_algorithm()->::mead101::mead::HashSumAlgorithmType::MergeFrom(from._internal_algorithm());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_data_type()->::mead101::avs::BinaryDataType::MergeFrom(from._internal_data_type());
    }
  }
}

void DetailedHashSum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.DetailedHashSum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailedHashSum::CopyFrom(const DetailedHashSum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.DetailedHashSum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailedHashSum::IsInitialized() const {
  return true;
}

void DetailedHashSum::InternalSwap(DetailedHashSum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hash_sum_value_.Swap(&other->hash_sum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  parameter_.Swap(&other->parameter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetailedHashSum, data_type_)
      + sizeof(DetailedHashSum::data_type_)
      - PROTOBUF_FIELD_OFFSET(DetailedHashSum, algorithm_)>(
          reinterpret_cast<char*>(&algorithm_),
          reinterpret_cast<char*>(&other->algorithm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailedHashSum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetailedPartyId::InitAsDefaultInstance() {
}
class DetailedPartyId::_Internal {
 public:
  using HasBits = decltype(std::declval<DetailedPartyId>()._has_bits_);
  static void set_has_cisac_society_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_d_p_i_d(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_i_p_n(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_i_s_n_i(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ipi_name_number(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

DetailedPartyId::DetailedPartyId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proprietary_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.DetailedPartyId)
}
DetailedPartyId::DetailedPartyId(const DetailedPartyId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      proprietary_id_(from.proprietary_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cisac_society_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cisac_society_id()) {
    cisac_society_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cisac_society_id(),
      GetArena());
  }
  d_p_i_d_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_d_p_i_d()) {
    d_p_i_d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_d_p_i_d(),
      GetArena());
  }
  i_p_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_p_n()) {
    i_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_p_n(),
      GetArena());
  }
  i_s_n_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_n_i()) {
    i_s_n_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_n_i(),
      GetArena());
  }
  ipi_name_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipi_name_number()) {
    ipi_name_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ipi_name_number(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.DetailedPartyId)
}

void DetailedPartyId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetailedPartyId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  cisac_society_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  d_p_i_d_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_p_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_n_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipi_name_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DetailedPartyId::~DetailedPartyId() {
  // @@protoc_insertion_point(destructor:mead101.mead.DetailedPartyId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetailedPartyId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cisac_society_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  d_p_i_d_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_p_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_n_i_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipi_name_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DetailedPartyId::ArenaDtor(void* object) {
  DetailedPartyId* _this = reinterpret_cast< DetailedPartyId* >(object);
  (void)_this;
}
void DetailedPartyId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetailedPartyId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetailedPartyId& DetailedPartyId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetailedPartyId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void DetailedPartyId::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.DetailedPartyId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proprietary_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      cisac_society_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      d_p_i_d_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      i_p_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      i_s_n_i_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      ipi_name_number_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetailedPartyId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string cisac_society_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cisac_society_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DetailedPartyId.cisac_society_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string d_p_i_d = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_d_p_i_d();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DetailedPartyId.d_p_i_d");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_p_n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_i_p_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DetailedPartyId.i_p_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_s_n_i = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_i_s_n_i();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DetailedPartyId.i_s_n_i");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ipi_name_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ipi_name_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DetailedPartyId.ipi_name_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.ProprietaryId proprietary_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proprietary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetailedPartyId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.DetailedPartyId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cisac_society_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cisac_society_id().data(), static_cast<int>(this->_internal_cisac_society_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DetailedPartyId.cisac_society_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cisac_society_id(), target);
  }

  // optional string d_p_i_d = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_d_p_i_d().data(), static_cast<int>(this->_internal_d_p_i_d().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DetailedPartyId.d_p_i_d");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_d_p_i_d(), target);
  }

  // optional string i_p_n = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_p_n().data(), static_cast<int>(this->_internal_i_p_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DetailedPartyId.i_p_n");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_i_p_n(), target);
  }

  // optional string i_s_n_i = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_n_i().data(), static_cast<int>(this->_internal_i_s_n_i().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DetailedPartyId.i_s_n_i");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_i_s_n_i(), target);
  }

  // optional string ipi_name_number = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipi_name_number().data(), static_cast<int>(this->_internal_ipi_name_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DetailedPartyId.ipi_name_number");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ipi_name_number(), target);
  }

  // repeated .mead101.mead.ProprietaryId proprietary_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proprietary_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_proprietary_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.DetailedPartyId)
  return target;
}

size_t DetailedPartyId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.DetailedPartyId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.ProprietaryId proprietary_id = 6;
  total_size += 1UL * this->_internal_proprietary_id_size();
  for (const auto& msg : this->proprietary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string cisac_society_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cisac_society_id());
    }

    // optional string d_p_i_d = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_d_p_i_d());
    }

    // optional string i_p_n = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_p_n());
    }

    // optional string i_s_n_i = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_n_i());
    }

    // optional string ipi_name_number = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipi_name_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetailedPartyId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.DetailedPartyId)
  GOOGLE_DCHECK_NE(&from, this);
  const DetailedPartyId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetailedPartyId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.DetailedPartyId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.DetailedPartyId)
    MergeFrom(*source);
  }
}

void DetailedPartyId::MergeFrom(const DetailedPartyId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.DetailedPartyId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proprietary_id_.MergeFrom(from.proprietary_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cisac_society_id(from._internal_cisac_society_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_d_p_i_d(from._internal_d_p_i_d());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_i_p_n(from._internal_i_p_n());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_i_s_n_i(from._internal_i_s_n_i());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_ipi_name_number(from._internal_ipi_name_number());
    }
  }
}

void DetailedPartyId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.DetailedPartyId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailedPartyId::CopyFrom(const DetailedPartyId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.DetailedPartyId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailedPartyId::IsInitialized() const {
  return true;
}

void DetailedPartyId::InternalSwap(DetailedPartyId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  proprietary_id_.InternalSwap(&other->proprietary_id_);
  cisac_society_id_.Swap(&other->cisac_society_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  d_p_i_d_.Swap(&other->d_p_i_d_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_p_n_.Swap(&other->i_p_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_s_n_i_.Swap(&other->i_s_n_i_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipi_name_number_.Swap(&other->ipi_name_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailedPartyId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisplayArtist::InitAsDefaultInstance() {
}
class DisplayArtist::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplayArtist>()._has_bits_);
  static void set_has_d_p_i_d(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_display_artist_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_i_p_n(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_i_s_n_i(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ipi_name_number(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

DisplayArtist::DisplayArtist(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proprietary_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.DisplayArtist)
}
DisplayArtist::DisplayArtist(const DisplayArtist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      proprietary_id_(from.proprietary_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  d_p_i_d_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_d_p_i_d()) {
    d_p_i_d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_d_p_i_d(),
      GetArena());
  }
  display_artist_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_display_artist_name()) {
    display_artist_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_display_artist_name(),
      GetArena());
  }
  i_p_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_p_n()) {
    i_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_p_n(),
      GetArena());
  }
  i_s_n_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_n_i()) {
    i_s_n_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_n_i(),
      GetArena());
  }
  ipi_name_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipi_name_number()) {
    ipi_name_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ipi_name_number(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.DisplayArtist)
}

void DisplayArtist::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  d_p_i_d_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_artist_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_p_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_n_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipi_name_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DisplayArtist::~DisplayArtist() {
  // @@protoc_insertion_point(destructor:mead101.mead.DisplayArtist)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DisplayArtist::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  d_p_i_d_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_artist_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_p_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_n_i_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipi_name_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DisplayArtist::ArenaDtor(void* object) {
  DisplayArtist* _this = reinterpret_cast< DisplayArtist* >(object);
  (void)_this;
}
void DisplayArtist::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisplayArtist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplayArtist& DisplayArtist::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void DisplayArtist::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.DisplayArtist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proprietary_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      d_p_i_d_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      display_artist_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      i_p_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      i_s_n_i_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      ipi_name_number_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisplayArtist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string d_p_i_d = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_d_p_i_d();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DisplayArtist.d_p_i_d");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string display_artist_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_display_artist_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DisplayArtist.display_artist_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_p_n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_i_p_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DisplayArtist.i_p_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_s_n_i = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_i_s_n_i();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DisplayArtist.i_s_n_i");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ipi_name_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ipi_name_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DisplayArtist.ipi_name_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.ProprietaryId proprietary_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proprietary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisplayArtist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.DisplayArtist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string d_p_i_d = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_d_p_i_d().data(), static_cast<int>(this->_internal_d_p_i_d().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DisplayArtist.d_p_i_d");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_d_p_i_d(), target);
  }

  // optional string display_artist_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_artist_name().data(), static_cast<int>(this->_internal_display_artist_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DisplayArtist.display_artist_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display_artist_name(), target);
  }

  // optional string i_p_n = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_p_n().data(), static_cast<int>(this->_internal_i_p_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DisplayArtist.i_p_n");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_i_p_n(), target);
  }

  // optional string i_s_n_i = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_n_i().data(), static_cast<int>(this->_internal_i_s_n_i().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DisplayArtist.i_s_n_i");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_i_s_n_i(), target);
  }

  // optional string ipi_name_number = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipi_name_number().data(), static_cast<int>(this->_internal_ipi_name_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DisplayArtist.ipi_name_number");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ipi_name_number(), target);
  }

  // repeated .mead101.mead.ProprietaryId proprietary_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proprietary_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_proprietary_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.DisplayArtist)
  return target;
}

size_t DisplayArtist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.DisplayArtist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.ProprietaryId proprietary_id = 6;
  total_size += 1UL * this->_internal_proprietary_id_size();
  for (const auto& msg : this->proprietary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string d_p_i_d = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_d_p_i_d());
    }

    // optional string display_artist_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_artist_name());
    }

    // optional string i_p_n = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_p_n());
    }

    // optional string i_s_n_i = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_n_i());
    }

    // optional string ipi_name_number = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipi_name_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayArtist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.DisplayArtist)
  GOOGLE_DCHECK_NE(&from, this);
  const DisplayArtist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisplayArtist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.DisplayArtist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.DisplayArtist)
    MergeFrom(*source);
  }
}

void DisplayArtist::MergeFrom(const DisplayArtist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.DisplayArtist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proprietary_id_.MergeFrom(from.proprietary_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_d_p_i_d(from._internal_d_p_i_d());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_display_artist_name(from._internal_display_artist_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_i_p_n(from._internal_i_p_n());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_i_s_n_i(from._internal_i_s_n_i());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_ipi_name_number(from._internal_ipi_name_number());
    }
  }
}

void DisplayArtist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.DisplayArtist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisplayArtist::CopyFrom(const DisplayArtist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.DisplayArtist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayArtist::IsInitialized() const {
  return true;
}

void DisplayArtist::InternalSwap(DisplayArtist* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  proprietary_id_.InternalSwap(&other->proprietary_id_);
  d_p_i_d_.Swap(&other->d_p_i_d_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  display_artist_name_.Swap(&other->display_artist_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_p_n_.Swap(&other->i_p_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_s_n_i_.Swap(&other->i_s_n_i_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipi_name_number_.Swap(&other->ipi_name_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DisplayArtist::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisplayArtistNameWithDefault::InitAsDefaultInstance() {
  ::mead101::mead::_DisplayArtistNameWithDefault_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::mead101::avs::CurrentTerritoryCode*>(
      ::mead101::avs::CurrentTerritoryCode::internal_default_instance());
}
class DisplayArtistNameWithDefault::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplayArtistNameWithDefault>()._has_bits_);
  static const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code(const DisplayArtistNameWithDefault* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mead101::avs::CurrentTerritoryCode&
DisplayArtistNameWithDefault::_Internal::applicable_territory_code(const DisplayArtistNameWithDefault* msg) {
  return *msg->applicable_territory_code_;
}
void DisplayArtistNameWithDefault::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
DisplayArtistNameWithDefault::DisplayArtistNameWithDefault(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.DisplayArtistNameWithDefault)
}
DisplayArtistNameWithDefault::DisplayArtistNameWithDefault(const DisplayArtistNameWithDefault& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::mead101::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:mead101.mead.DisplayArtistNameWithDefault)
}

void DisplayArtistNameWithDefault::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_default_));
}

DisplayArtistNameWithDefault::~DisplayArtistNameWithDefault() {
  // @@protoc_insertion_point(destructor:mead101.mead.DisplayArtistNameWithDefault)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DisplayArtistNameWithDefault::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
}

void DisplayArtistNameWithDefault::ArenaDtor(void* object) {
  DisplayArtistNameWithDefault* _this = reinterpret_cast< DisplayArtistNameWithDefault* >(object);
  (void)_this;
}
void DisplayArtistNameWithDefault::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisplayArtistNameWithDefault::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplayArtistNameWithDefault& DisplayArtistNameWithDefault::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void DisplayArtistNameWithDefault::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.DisplayArtistNameWithDefault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisplayArtistNameWithDefault::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DisplayArtistNameWithDefault.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DisplayArtistNameWithDefault.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisplayArtistNameWithDefault::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.DisplayArtistNameWithDefault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_default = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_default(), target);
  }

  // optional string language_and_script_code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DisplayArtistNameWithDefault.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language_and_script_code(), target);
  }

  // optional string ext_value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DisplayArtistNameWithDefault.ext_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.DisplayArtistNameWithDefault)
  return target;
}

size_t DisplayArtistNameWithDefault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.DisplayArtistNameWithDefault)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string language_and_script_code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string ext_value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

    // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional bool is_default = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayArtistNameWithDefault::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.DisplayArtistNameWithDefault)
  GOOGLE_DCHECK_NE(&from, this);
  const DisplayArtistNameWithDefault* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisplayArtistNameWithDefault>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.DisplayArtistNameWithDefault)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.DisplayArtistNameWithDefault)
    MergeFrom(*source);
  }
}

void DisplayArtistNameWithDefault::MergeFrom(const DisplayArtistNameWithDefault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.DisplayArtistNameWithDefault)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_applicable_territory_code()->::mead101::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000008u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DisplayArtistNameWithDefault::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.DisplayArtistNameWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisplayArtistNameWithDefault::CopyFrom(const DisplayArtistNameWithDefault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.DisplayArtistNameWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayArtistNameWithDefault::IsInitialized() const {
  return true;
}

void DisplayArtistNameWithDefault::InternalSwap(DisplayArtistNameWithDefault* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DisplayArtistNameWithDefault, is_default_)
      + sizeof(DisplayArtistNameWithDefault::is_default_)
      - PROTOBUF_FIELD_OFFSET(DisplayArtistNameWithDefault, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DisplayArtistNameWithDefault::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisplayArtistNameWithPronunciation::InitAsDefaultInstance() {
  ::mead101::mead::_DisplayArtistNameWithPronunciation_default_instance_._instance.get_mutable()->name_ = const_cast< ::mead101::mead::DisplayArtistNameWithDefault*>(
      ::mead101::mead::DisplayArtistNameWithDefault::internal_default_instance());
}
class DisplayArtistNameWithPronunciation::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplayArtistNameWithPronunciation>()._has_bits_);
  static const ::mead101::mead::DisplayArtistNameWithDefault& name(const DisplayArtistNameWithPronunciation* msg);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mead101::mead::DisplayArtistNameWithDefault&
DisplayArtistNameWithPronunciation::_Internal::name(const DisplayArtistNameWithPronunciation* msg) {
  return *msg->name_;
}
DisplayArtistNameWithPronunciation::DisplayArtistNameWithPronunciation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pronunciation_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.DisplayArtistNameWithPronunciation)
}
DisplayArtistNameWithPronunciation::DisplayArtistNameWithPronunciation(const DisplayArtistNameWithPronunciation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pronunciation_(from.pronunciation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_name()) {
    name_ = new ::mead101::mead::DisplayArtistNameWithDefault(*from.name_);
  } else {
    name_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.DisplayArtistNameWithPronunciation)
}

void DisplayArtistNameWithPronunciation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisplayArtistNameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  name_ = nullptr;
}

DisplayArtistNameWithPronunciation::~DisplayArtistNameWithPronunciation() {
  // @@protoc_insertion_point(destructor:mead101.mead.DisplayArtistNameWithPronunciation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DisplayArtistNameWithPronunciation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete name_;
}

void DisplayArtistNameWithPronunciation::ArenaDtor(void* object) {
  DisplayArtistNameWithPronunciation* _this = reinterpret_cast< DisplayArtistNameWithPronunciation* >(object);
  (void)_this;
}
void DisplayArtistNameWithPronunciation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisplayArtistNameWithPronunciation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplayArtistNameWithPronunciation& DisplayArtistNameWithPronunciation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisplayArtistNameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void DisplayArtistNameWithPronunciation::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.DisplayArtistNameWithPronunciation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pronunciation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(name_ != nullptr);
    name_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisplayArtistNameWithPronunciation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.DisplayArtistNameWithDefault name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Pronunciation pronunciation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pronunciation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisplayArtistNameWithPronunciation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.DisplayArtistNameWithPronunciation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.DisplayArtistNameWithDefault name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::name(this), target, stream);
  }

  // repeated .mead101.mead.Pronunciation pronunciation = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pronunciation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_pronunciation(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.DisplayArtistNameWithPronunciation)
  return target;
}

size_t DisplayArtistNameWithPronunciation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.DisplayArtistNameWithPronunciation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.Pronunciation pronunciation = 2;
  total_size += 1UL * this->_internal_pronunciation_size();
  for (const auto& msg : this->pronunciation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .mead101.mead.DisplayArtistNameWithDefault name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayArtistNameWithPronunciation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.DisplayArtistNameWithPronunciation)
  GOOGLE_DCHECK_NE(&from, this);
  const DisplayArtistNameWithPronunciation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisplayArtistNameWithPronunciation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.DisplayArtistNameWithPronunciation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.DisplayArtistNameWithPronunciation)
    MergeFrom(*source);
  }
}

void DisplayArtistNameWithPronunciation::MergeFrom(const DisplayArtistNameWithPronunciation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.DisplayArtistNameWithPronunciation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pronunciation_.MergeFrom(from.pronunciation_);
  if (from._internal_has_name()) {
    _internal_mutable_name()->::mead101::mead::DisplayArtistNameWithDefault::MergeFrom(from._internal_name());
  }
}

void DisplayArtistNameWithPronunciation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.DisplayArtistNameWithPronunciation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisplayArtistNameWithPronunciation::CopyFrom(const DisplayArtistNameWithPronunciation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.DisplayArtistNameWithPronunciation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayArtistNameWithPronunciation::IsInitialized() const {
  return true;
}

void DisplayArtistNameWithPronunciation::InternalSwap(DisplayArtistNameWithPronunciation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pronunciation_.InternalSwap(&other->pronunciation_);
  swap(name_, other->name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisplayArtistNameWithPronunciation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisplaySubTitle::InitAsDefaultInstance() {
}
class DisplaySubTitle::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplaySubTitle>()._has_bits_);
  static void set_has_is_displayed_in_title(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sub_title_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DisplaySubTitle::DisplaySubTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pronunciation_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.DisplaySubTitle)
}
DisplaySubTitle::DisplaySubTitle(const DisplaySubTitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pronunciation_(from.pronunciation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  sub_title_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sub_title_type()) {
    sub_title_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sub_title_type(),
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  ::memcpy(&is_displayed_in_title_, &from.is_displayed_in_title_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&is_displayed_in_title_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:mead101.mead.DisplaySubTitle)
}

void DisplaySubTitle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisplaySubTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_title_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_displayed_in_title_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&is_displayed_in_title_)) + sizeof(sequence_number_));
}

DisplaySubTitle::~DisplaySubTitle() {
  // @@protoc_insertion_point(destructor:mead101.mead.DisplaySubTitle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DisplaySubTitle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_title_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DisplaySubTitle::ArenaDtor(void* object) {
  DisplaySubTitle* _this = reinterpret_cast< DisplaySubTitle* >(object);
  (void)_this;
}
void DisplaySubTitle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisplaySubTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplaySubTitle& DisplaySubTitle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisplaySubTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void DisplaySubTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.DisplaySubTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pronunciation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sub_title_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&is_displayed_in_title_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_number_) -
        reinterpret_cast<char*>(&is_displayed_in_title_)) + sizeof(sequence_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisplaySubTitle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_displayed_in_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_displayed_in_title(&has_bits);
          is_displayed_in_title_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string namespace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DisplaySubTitle.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Pronunciation pronunciation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pronunciation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 sequence_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sub_title_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sub_title_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DisplaySubTitle.sub_title_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DisplaySubTitle.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DisplaySubTitle.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisplaySubTitle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.DisplaySubTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_displayed_in_title = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_displayed_in_title(), target);
  }

  // optional string namespace = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DisplaySubTitle.namespace");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_(), target);
  }

  // repeated .mead101.mead.Pronunciation pronunciation = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pronunciation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_pronunciation(i), target, stream);
  }

  // optional int32 sequence_number = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_sequence_number(), target);
  }

  // optional string sub_title_type = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sub_title_type().data(), static_cast<int>(this->_internal_sub_title_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DisplaySubTitle.sub_title_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sub_title_type(), target);
  }

  // optional string title = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DisplaySubTitle.title");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_title(), target);
  }

  // optional string user_defined_value = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DisplaySubTitle.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_user_defined_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.DisplaySubTitle)
  return target;
}

size_t DisplaySubTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.DisplaySubTitle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.Pronunciation pronunciation = 3;
  total_size += 1UL * this->_internal_pronunciation_size();
  for (const auto& msg : this->pronunciation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string namespace = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string sub_title_type = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sub_title_type());
    }

    // optional string title = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string user_defined_value = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional bool is_displayed_in_title = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 sequence_number = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sequence_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplaySubTitle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.DisplaySubTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const DisplaySubTitle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisplaySubTitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.DisplaySubTitle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.DisplaySubTitle)
    MergeFrom(*source);
  }
}

void DisplaySubTitle::MergeFrom(const DisplaySubTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.DisplaySubTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pronunciation_.MergeFrom(from.pronunciation_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sub_title_type(from._internal_sub_title_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000010u) {
      is_displayed_in_title_ = from.is_displayed_in_title_;
    }
    if (cached_has_bits & 0x00000020u) {
      sequence_number_ = from.sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DisplaySubTitle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.DisplaySubTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisplaySubTitle::CopyFrom(const DisplaySubTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.DisplaySubTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplaySubTitle::IsInitialized() const {
  return true;
}

void DisplaySubTitle::InternalSwap(DisplaySubTitle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pronunciation_.InternalSwap(&other->pronunciation_);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sub_title_type_.Swap(&other->sub_title_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DisplaySubTitle, sequence_number_)
      + sizeof(DisplaySubTitle::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(DisplaySubTitle, is_displayed_in_title_)>(
          reinterpret_cast<char*>(&is_displayed_in_title_),
          reinterpret_cast<char*>(&other->is_displayed_in_title_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DisplaySubTitle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisplayTitle::InitAsDefaultInstance() {
  ::mead101::mead::_DisplayTitle_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::mead101::avs::CurrentTerritoryCode*>(
      ::mead101::avs::CurrentTerritoryCode::internal_default_instance());
  ::mead101::mead::_DisplayTitle_default_instance_._instance.get_mutable()->title_text_ = const_cast< ::mead101::mead::TitleTextWithPronunciation*>(
      ::mead101::mead::TitleTextWithPronunciation::internal_default_instance());
}
class DisplayTitle::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplayTitle>()._has_bits_);
  static const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code(const DisplayTitle* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::TitleTextWithPronunciation& title_text(const DisplayTitle* msg);
  static void set_has_title_text(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::CurrentTerritoryCode&
DisplayTitle::_Internal::applicable_territory_code(const DisplayTitle* msg) {
  return *msg->applicable_territory_code_;
}
const ::mead101::mead::TitleTextWithPronunciation&
DisplayTitle::_Internal::title_text(const DisplayTitle* msg) {
  return *msg->title_text_;
}
void DisplayTitle::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
DisplayTitle::DisplayTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sub_title_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.DisplayTitle)
}
DisplayTitle::DisplayTitle(const DisplayTitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sub_title_(from.sub_title_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::mead101::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_title_text()) {
    title_text_ = new ::mead101::mead::TitleTextWithPronunciation(*from.title_text_);
  } else {
    title_text_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:mead101.mead.DisplayTitle)
}

void DisplayTitle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_default_));
}

DisplayTitle::~DisplayTitle() {
  // @@protoc_insertion_point(destructor:mead101.mead.DisplayTitle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DisplayTitle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete title_text_;
}

void DisplayTitle::ArenaDtor(void* object) {
  DisplayTitle* _this = reinterpret_cast< DisplayTitle* >(object);
  (void)_this;
}
void DisplayTitle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisplayTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplayTitle& DisplayTitle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void DisplayTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.DisplayTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_title_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(title_text_ != nullptr);
      title_text_->Clear();
    }
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisplayTitle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.DisplayTitle.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.DisplaySubTitle sub_title = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sub_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.TitleTextWithPronunciation title_text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_title_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisplayTitle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.DisplayTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_default = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_default(), target);
  }

  // optional string language_and_script_code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.DisplayTitle.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language_and_script_code(), target);
  }

  // repeated .mead101.mead.DisplaySubTitle sub_title = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sub_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_sub_title(i), target, stream);
  }

  // optional .mead101.mead.TitleTextWithPronunciation title_text = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::title_text(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.DisplayTitle)
  return target;
}

size_t DisplayTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.DisplayTitle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.DisplaySubTitle sub_title = 4;
  total_size += 1UL * this->_internal_sub_title_size();
  for (const auto& msg : this->sub_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string language_and_script_code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .mead101.mead.TitleTextWithPronunciation title_text = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *title_text_);
    }

    // optional bool is_default = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayTitle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.DisplayTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const DisplayTitle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisplayTitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.DisplayTitle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.DisplayTitle)
    MergeFrom(*source);
  }
}

void DisplayTitle::MergeFrom(const DisplayTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.DisplayTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sub_title_.MergeFrom(from.sub_title_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_applicable_territory_code()->::mead101::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_title_text()->::mead101::mead::TitleTextWithPronunciation::MergeFrom(from._internal_title_text());
    }
    if (cached_has_bits & 0x00000008u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DisplayTitle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.DisplayTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisplayTitle::CopyFrom(const DisplayTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.DisplayTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayTitle::IsInitialized() const {
  return true;
}

void DisplayTitle::InternalSwap(DisplayTitle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sub_title_.InternalSwap(&other->sub_title_);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DisplayTitle, is_default_)
      + sizeof(DisplayTitle::is_default_)
      - PROTOBUF_FIELD_OFFSET(DisplayTitle, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DisplayTitle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Duration::InitAsDefaultInstance() {
  ::mead101::mead::_Duration_default_instance_._instance.get_mutable()->unit_of_duration_ = const_cast< ::mead101::avs::UnitOfDuration*>(
      ::mead101::avs::UnitOfDuration::internal_default_instance());
}
class Duration::_Internal {
 public:
  using HasBits = decltype(std::declval<Duration>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::avs::UnitOfDuration& unit_of_duration(const Duration* msg);
  static void set_has_unit_of_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::UnitOfDuration&
Duration::_Internal::unit_of_duration(const Duration* msg) {
  return *msg->unit_of_duration_;
}
void Duration::clear_unit_of_duration() {
  if (unit_of_duration_ != nullptr) unit_of_duration_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
Duration::Duration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Duration)
}
Duration::Duration(const Duration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  if (from._internal_has_unit_of_duration()) {
    unit_of_duration_ = new ::mead101::avs::UnitOfDuration(*from.unit_of_duration_);
  } else {
    unit_of_duration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Duration)
}

void Duration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Duration_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_of_duration_ = nullptr;
}

Duration::~Duration() {
  // @@protoc_insertion_point(destructor:mead101.mead.Duration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Duration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete unit_of_duration_;
}

void Duration::ArenaDtor(void* object) {
  Duration* _this = reinterpret_cast< Duration* >(object);
  (void)_this;
}
void Duration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Duration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Duration& Duration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Duration_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Duration::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Duration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(unit_of_duration_ != nullptr);
      unit_of_duration_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Duration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Duration.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.UnitOfDuration unit_of_duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_of_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Duration.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Duration.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Duration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Duration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Duration.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional .mead101.avs.UnitOfDuration unit_of_duration = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::unit_of_duration(this), target, stream);
  }

  // optional string user_defined_value = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Duration.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_defined_value(), target);
  }

  // optional string ext_value = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Duration.ext_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Duration)
  return target;
}

size_t Duration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Duration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional string ext_value = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

    // optional .mead101.avs.UnitOfDuration unit_of_duration = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unit_of_duration_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Duration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Duration)
  GOOGLE_DCHECK_NE(&from, this);
  const Duration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Duration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Duration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Duration)
    MergeFrom(*source);
  }
}

void Duration::MergeFrom(const Duration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Duration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_unit_of_duration()->::mead101::avs::UnitOfDuration::MergeFrom(from._internal_unit_of_duration());
    }
  }
}

void Duration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Duration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duration::CopyFrom(const Duration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Duration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duration::IsInitialized() const {
  return true;
}

void Duration::InternalSwap(Duration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(unit_of_duration_, other->unit_of_duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Duration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Entry::InitAsDefaultInstance() {
  ::mead101::mead::_Entry_default_instance_._instance.get_mutable()->party_ = const_cast< ::mead101::mead::Party*>(
      ::mead101::mead::Party::internal_default_instance());
  ::mead101::mead::_Entry_default_instance_._instance.get_mutable()->release_ = const_cast< ::mead101::mead::Release*>(
      ::mead101::mead::Release::internal_default_instance());
  ::mead101::mead::_Entry_default_instance_._instance.get_mutable()->resource_ = const_cast< ::mead101::mead::Resource*>(
      ::mead101::mead::Resource::internal_default_instance());
  ::mead101::mead::_Entry_default_instance_._instance.get_mutable()->work_ = const_cast< ::mead101::mead::Work*>(
      ::mead101::mead::Work::internal_default_instance());
  ::mead101::mead::_Entry_default_instance_._instance.get_mutable()->content_ = const_cast< ::mead101::mead::Content*>(
      ::mead101::mead::Content::internal_default_instance());
  ::mead101::mead::_Entry_default_instance_._instance.get_mutable()->id_ = const_cast< ::mead101::mead::Id*>(
      ::mead101::mead::Id::internal_default_instance());
  ::mead101::mead::_Entry_default_instance_._instance.get_mutable()->published_ = const_cast< ::mead101::mead::DateTime*>(
      ::mead101::mead::DateTime::internal_default_instance());
  ::mead101::mead::_Entry_default_instance_._instance.get_mutable()->rights_ = const_cast< ::mead101::mead::Text*>(
      ::mead101::mead::Text::internal_default_instance());
  ::mead101::mead::_Entry_default_instance_._instance.get_mutable()->source_ = const_cast< ::mead101::mead::Source*>(
      ::mead101::mead::Source::internal_default_instance());
  ::mead101::mead::_Entry_default_instance_._instance.get_mutable()->summary_ = const_cast< ::mead101::mead::Text*>(
      ::mead101::mead::Text::internal_default_instance());
  ::mead101::mead::_Entry_default_instance_._instance.get_mutable()->title_ = const_cast< ::mead101::mead::Text*>(
      ::mead101::mead::Text::internal_default_instance());
  ::mead101::mead::_Entry_default_instance_._instance.get_mutable()->updated_ = const_cast< ::mead101::mead::DateTime*>(
      ::mead101::mead::DateTime::internal_default_instance());
}
class Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<Entry>()._has_bits_);
  static const ::mead101::mead::Party& party(const Entry* msg);
  static void set_has_party(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::Release& release(const Entry* msg);
  static void set_has_release(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::Resource& resource(const Entry* msg);
  static void set_has_resource(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_subscription_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::Work& work(const Entry* msg);
  static void set_has_work(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mead101::mead::Content& content(const Entry* msg);
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::mead101::mead::Id& id(const Entry* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::mead101::mead::DateTime& published(const Entry* msg);
  static void set_has_published(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::mead101::mead::Text& rights(const Entry* msg);
  static void set_has_rights(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::mead101::mead::Source& source(const Entry* msg);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::mead101::mead::Text& summary(const Entry* msg);
  static void set_has_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::mead101::mead::Text& title(const Entry* msg);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::mead101::mead::DateTime& updated(const Entry* msg);
  static void set_has_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::mead101::mead::Party&
Entry::_Internal::party(const Entry* msg) {
  return *msg->party_;
}
const ::mead101::mead::Release&
Entry::_Internal::release(const Entry* msg) {
  return *msg->release_;
}
const ::mead101::mead::Resource&
Entry::_Internal::resource(const Entry* msg) {
  return *msg->resource_;
}
const ::mead101::mead::Work&
Entry::_Internal::work(const Entry* msg) {
  return *msg->work_;
}
const ::mead101::mead::Content&
Entry::_Internal::content(const Entry* msg) {
  return *msg->content_;
}
const ::mead101::mead::Id&
Entry::_Internal::id(const Entry* msg) {
  return *msg->id_;
}
const ::mead101::mead::DateTime&
Entry::_Internal::published(const Entry* msg) {
  return *msg->published_;
}
const ::mead101::mead::Text&
Entry::_Internal::rights(const Entry* msg) {
  return *msg->rights_;
}
const ::mead101::mead::Source&
Entry::_Internal::source(const Entry* msg) {
  return *msg->source_;
}
const ::mead101::mead::Text&
Entry::_Internal::summary(const Entry* msg) {
  return *msg->summary_;
}
const ::mead101::mead::Text&
Entry::_Internal::title(const Entry* msg) {
  return *msg->title_;
}
const ::mead101::mead::DateTime&
Entry::_Internal::updated(const Entry* msg) {
  return *msg->updated_;
}
Entry::Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  any_attribute_value_(arena),
  author_(arena),
  category_(arena),
  contributor_(arena),
  link_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Entry)
}
Entry::Entry(const Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      any_attribute_value_(from.any_attribute_value_),
      author_(from.author_),
      category_(from.category_),
      contributor_(from.contributor_),
      link_(from.link_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_subscription_id()) {
    subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription_id(),
      GetArena());
  }
  if (from._internal_has_party()) {
    party_ = new ::mead101::mead::Party(*from.party_);
  } else {
    party_ = nullptr;
  }
  if (from._internal_has_release()) {
    release_ = new ::mead101::mead::Release(*from.release_);
  } else {
    release_ = nullptr;
  }
  if (from._internal_has_resource()) {
    resource_ = new ::mead101::mead::Resource(*from.resource_);
  } else {
    resource_ = nullptr;
  }
  if (from._internal_has_work()) {
    work_ = new ::mead101::mead::Work(*from.work_);
  } else {
    work_ = nullptr;
  }
  if (from._internal_has_content()) {
    content_ = new ::mead101::mead::Content(*from.content_);
  } else {
    content_ = nullptr;
  }
  if (from._internal_has_id()) {
    id_ = new ::mead101::mead::Id(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_published()) {
    published_ = new ::mead101::mead::DateTime(*from.published_);
  } else {
    published_ = nullptr;
  }
  if (from._internal_has_rights()) {
    rights_ = new ::mead101::mead::Text(*from.rights_);
  } else {
    rights_ = nullptr;
  }
  if (from._internal_has_source()) {
    source_ = new ::mead101::mead::Source(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from._internal_has_summary()) {
    summary_ = new ::mead101::mead::Text(*from.summary_);
  } else {
    summary_ = nullptr;
  }
  if (from._internal_has_title()) {
    title_ = new ::mead101::mead::Text(*from.title_);
  } else {
    title_ = nullptr;
  }
  if (from._internal_has_updated()) {
    updated_ = new ::mead101::mead::DateTime(*from.updated_);
  } else {
    updated_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Entry)
}

void Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Entry_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&party_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_) -
      reinterpret_cast<char*>(&party_)) + sizeof(updated_));
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:mead101.mead.Entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  subscription_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete party_;
  if (this != internal_default_instance()) delete release_;
  if (this != internal_default_instance()) delete resource_;
  if (this != internal_default_instance()) delete work_;
  if (this != internal_default_instance()) delete content_;
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete published_;
  if (this != internal_default_instance()) delete rights_;
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete summary_;
  if (this != internal_default_instance()) delete title_;
  if (this != internal_default_instance()) delete updated_;
}

void Entry::ArenaDtor(void* object) {
  Entry* _this = reinterpret_cast< Entry* >(object);
  (void)_this;
}
void Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Entry& Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Entry_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  any_attribute_value_.Clear();
  author_.Clear();
  category_.Clear();
  contributor_.Clear();
  link_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      subscription_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(party_ != nullptr);
      party_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(release_ != nullptr);
      release_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(resource_ != nullptr);
      resource_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(work_ != nullptr);
      work_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(content_ != nullptr);
      content_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(published_ != nullptr);
      published_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(rights_ != nullptr);
      rights_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(source_ != nullptr);
      source_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(summary_ != nullptr);
      summary_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(title_ != nullptr);
      title_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(updated_ != nullptr);
      updated_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.Party party = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_party(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Release release = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_release(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Resource resource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string subscription_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_subscription_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Entry.subscription_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Work work = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_work(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string any_attribute_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_any_attribute_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Entry.any_attribute_value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Person author = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_author(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Category category = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Content content = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_content(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Person contributor = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contributor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Id id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Link link = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_link(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.DateTime published = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_published(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Text rights = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_rights(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Source source = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Text summary = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Text title = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_title(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.DateTime updated = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.Party party = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::party(this), target, stream);
  }

  // optional .mead101.mead.Release release = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::release(this), target, stream);
  }

  // optional .mead101.mead.Resource resource = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::resource(this), target, stream);
  }

  // optional string subscription_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_subscription_id().data(), static_cast<int>(this->_internal_subscription_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Entry.subscription_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_subscription_id(), target);
  }

  // optional .mead101.mead.Work work = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::work(this), target, stream);
  }

  // repeated string any_attribute_value = 6;
  for (int i = 0, n = this->_internal_any_attribute_value_size(); i < n; i++) {
    const auto& s = this->_internal_any_attribute_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Entry.any_attribute_value");
    target = stream->WriteString(6, s, target);
  }

  // repeated .mead101.mead.Person author = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_author_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_author(i), target, stream);
  }

  // repeated .mead101.mead.Category category = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_category_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_category(i), target, stream);
  }

  // optional .mead101.mead.Content content = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::content(this), target, stream);
  }

  // repeated .mead101.mead.Person contributor = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contributor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_contributor(i), target, stream);
  }

  // optional .mead101.mead.Id id = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::id(this), target, stream);
  }

  // repeated .mead101.mead.Link link = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_link_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_link(i), target, stream);
  }

  // optional .mead101.mead.DateTime published = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::published(this), target, stream);
  }

  // optional .mead101.mead.Text rights = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::rights(this), target, stream);
  }

  // optional .mead101.mead.Source source = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::source(this), target, stream);
  }

  // optional .mead101.mead.Text summary = 16;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::summary(this), target, stream);
  }

  // optional .mead101.mead.Text title = 17;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::title(this), target, stream);
  }

  // optional .mead101.mead.DateTime updated = 18;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::updated(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Entry)
  return target;
}

size_t Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string any_attribute_value = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(any_attribute_value_.size());
  for (int i = 0, n = any_attribute_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      any_attribute_value_.Get(i));
  }

  // repeated .mead101.mead.Person author = 7;
  total_size += 1UL * this->_internal_author_size();
  for (const auto& msg : this->author_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Category category = 8;
  total_size += 1UL * this->_internal_category_size();
  for (const auto& msg : this->category_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Person contributor = 10;
  total_size += 1UL * this->_internal_contributor_size();
  for (const auto& msg : this->contributor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Link link = 12;
  total_size += 1UL * this->_internal_link_size();
  for (const auto& msg : this->link_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string subscription_id = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_subscription_id());
    }

    // optional .mead101.mead.Party party = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *party_);
    }

    // optional .mead101.mead.Release release = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *release_);
    }

    // optional .mead101.mead.Resource resource = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_);
    }

    // optional .mead101.mead.Work work = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *work_);
    }

    // optional .mead101.mead.Content content = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_);
    }

    // optional .mead101.mead.Id id = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .mead101.mead.DateTime published = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *published_);
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .mead101.mead.Text rights = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rights_);
    }

    // optional .mead101.mead.Source source = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *source_);
    }

    // optional .mead101.mead.Text summary = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *summary_);
    }

    // optional .mead101.mead.Text title = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *title_);
    }

    // optional .mead101.mead.DateTime updated = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *updated_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Entry)
    MergeFrom(*source);
  }
}

void Entry::MergeFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  any_attribute_value_.MergeFrom(from.any_attribute_value_);
  author_.MergeFrom(from.author_);
  category_.MergeFrom(from.category_);
  contributor_.MergeFrom(from.contributor_);
  link_.MergeFrom(from.link_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_subscription_id(from._internal_subscription_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_party()->::mead101::mead::Party::MergeFrom(from._internal_party());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_release()->::mead101::mead::Release::MergeFrom(from._internal_release());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_resource()->::mead101::mead::Resource::MergeFrom(from._internal_resource());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_work()->::mead101::mead::Work::MergeFrom(from._internal_work());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_content()->::mead101::mead::Content::MergeFrom(from._internal_content());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_id()->::mead101::mead::Id::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_published()->::mead101::mead::DateTime::MergeFrom(from._internal_published());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_rights()->::mead101::mead::Text::MergeFrom(from._internal_rights());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_source()->::mead101::mead::Source::MergeFrom(from._internal_source());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_summary()->::mead101::mead::Text::MergeFrom(from._internal_summary());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_title()->::mead101::mead::Text::MergeFrom(from._internal_title());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_updated()->::mead101::mead::DateTime::MergeFrom(from._internal_updated());
    }
  }
}

void Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  return true;
}

void Entry::InternalSwap(Entry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  any_attribute_value_.InternalSwap(&other->any_attribute_value_);
  author_.InternalSwap(&other->author_);
  category_.InternalSwap(&other->category_);
  contributor_.InternalSwap(&other->contributor_);
  link_.InternalSwap(&other->link_);
  subscription_id_.Swap(&other->subscription_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Entry, updated_)
      + sizeof(Entry::updated_)
      - PROTOBUF_FIELD_OFFSET(Entry, party_)>(
          reinterpret_cast<char*>(&party_),
          reinterpret_cast<char*>(&other->party_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Epoch::InitAsDefaultInstance() {
  ::mead101::mead::_Epoch_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::mead101::avs::CurrentTerritoryCode*>(
      ::mead101::avs::CurrentTerritoryCode::internal_default_instance());
  ::mead101::mead::_Epoch_default_instance_._instance.get_mutable()->end_date_ = const_cast< ::mead101::mead::Date*>(
      ::mead101::mead::Date::internal_default_instance());
  ::mead101::mead::_Epoch_default_instance_._instance.get_mutable()->start_date_ = const_cast< ::mead101::mead::Date*>(
      ::mead101::mead::Date::internal_default_instance());
}
class Epoch::_Internal {
 public:
  using HasBits = decltype(std::declval<Epoch>()._has_bits_);
  static const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code(const Epoch* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::Date& end_date(const Epoch* msg);
  static void set_has_end_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::Date& start_date(const Epoch* msg);
  static void set_has_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::CurrentTerritoryCode&
Epoch::_Internal::applicable_territory_code(const Epoch* msg) {
  return *msg->applicable_territory_code_;
}
const ::mead101::mead::Date&
Epoch::_Internal::end_date(const Epoch* msg) {
  return *msg->end_date_;
}
const ::mead101::mead::Date&
Epoch::_Internal::start_date(const Epoch* msg) {
  return *msg->start_date_;
}
void Epoch::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Epoch::Epoch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_reference_(arena),
  related_artist_(arena),
  related_creation_(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Epoch)
}
Epoch::Epoch(const Epoch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metadata_source_reference_(from.metadata_source_reference_),
      related_artist_(from.related_artist_),
      related_creation_(from.related_creation_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::mead101::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_end_date()) {
    end_date_ = new ::mead101::mead::Date(*from.end_date_);
  } else {
    end_date_ = nullptr;
  }
  if (from._internal_has_start_date()) {
    start_date_ = new ::mead101::mead::Date(*from.start_date_);
  } else {
    start_date_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Epoch)
}

void Epoch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Epoch_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_date_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(start_date_));
}

Epoch::~Epoch() {
  // @@protoc_insertion_point(destructor:mead101.mead.Epoch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Epoch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete end_date_;
  if (this != internal_default_instance()) delete start_date_;
}

void Epoch::ArenaDtor(void* object) {
  Epoch* _this = reinterpret_cast< Epoch* >(object);
  (void)_this;
}
void Epoch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Epoch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Epoch& Epoch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Epoch_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Epoch::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Epoch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_reference_.Clear();
  related_artist_.Clear();
  related_creation_.Clear();
  value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(end_date_ != nullptr);
      end_date_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(start_date_ != nullptr);
      start_date_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Epoch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Date end_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Epoch.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.PartyWithNames related_artist = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_related_artist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.RelatedCreation related_creation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_related_creation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Date start_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Name value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Epoch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Epoch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional .mead101.mead.Date end_date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end_date(this), target, stream);
  }

  // repeated string metadata_source_reference = 3;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Epoch.metadata_source_reference");
    target = stream->WriteString(3, s, target);
  }

  // repeated .mead101.mead.PartyWithNames related_artist = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_related_artist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_related_artist(i), target, stream);
  }

  // repeated .mead101.mead.RelatedCreation related_creation = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_related_creation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_related_creation(i), target, stream);
  }

  // optional .mead101.mead.Date start_date = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::start_date(this), target, stream);
  }

  // repeated .mead101.mead.Name value = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Epoch)
  return target;
}

size_t Epoch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Epoch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // repeated .mead101.mead.PartyWithNames related_artist = 4;
  total_size += 1UL * this->_internal_related_artist_size();
  for (const auto& msg : this->related_artist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.RelatedCreation related_creation = 5;
  total_size += 1UL * this->_internal_related_creation_size();
  for (const auto& msg : this->related_creation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Name value = 7;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .mead101.mead.Date end_date = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_date_);
    }

    // optional .mead101.mead.Date start_date = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_date_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Epoch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Epoch)
  GOOGLE_DCHECK_NE(&from, this);
  const Epoch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Epoch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Epoch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Epoch)
    MergeFrom(*source);
  }
}

void Epoch::MergeFrom(const Epoch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Epoch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  related_artist_.MergeFrom(from.related_artist_);
  related_creation_.MergeFrom(from.related_creation_);
  value_.MergeFrom(from.value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_applicable_territory_code()->::mead101::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_end_date()->::mead101::mead::Date::MergeFrom(from._internal_end_date());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_start_date()->::mead101::mead::Date::MergeFrom(from._internal_start_date());
    }
  }
}

void Epoch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Epoch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Epoch::CopyFrom(const Epoch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Epoch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Epoch::IsInitialized() const {
  return true;
}

void Epoch::InternalSwap(Epoch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  related_artist_.InternalSwap(&other->related_artist_);
  related_creation_.InternalSwap(&other->related_creation_);
  value_.InternalSwap(&other->value_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Epoch, start_date_)
      + sizeof(Epoch::start_date_)
      - PROTOBUF_FIELD_OFFSET(Epoch, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Epoch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventDate::InitAsDefaultInstance() {
  ::mead101::mead::_EventDate_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::mead101::avs::AllTerritoryCode*>(
      ::mead101::avs::AllTerritoryCode::internal_default_instance());
  ::mead101::mead::_EventDate_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::mead::ddex_IsoDate*>(
      ::mead101::mead::ddex_IsoDate::internal_default_instance());
}
class EventDate::_Internal {
 public:
  using HasBits = decltype(std::declval<EventDate>()._has_bits_);
  static const ::mead101::avs::AllTerritoryCode& applicable_territory_code(const EventDate* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_after(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_approximate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_before(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::ddex_IsoDate& ext_value(const EventDate* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mead101::avs::AllTerritoryCode&
EventDate::_Internal::applicable_territory_code(const EventDate* msg) {
  return *msg->applicable_territory_code_;
}
const ::mead101::mead::ddex_IsoDate&
EventDate::_Internal::ext_value(const EventDate* msg) {
  return *msg->ext_value_;
}
void EventDate::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
EventDate::EventDate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.EventDate)
}
EventDate::EventDate(const EventDate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  location_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_location_description()) {
    location_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_location_description(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::mead101::avs::AllTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::mead::ddex_IsoDate(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  ::memcpy(&is_after_, &from.is_after_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_before_) -
    reinterpret_cast<char*>(&is_after_)) + sizeof(is_before_));
  // @@protoc_insertion_point(copy_constructor:mead101.mead.EventDate)
}

void EventDate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_before_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_before_));
}

EventDate::~EventDate() {
  // @@protoc_insertion_point(destructor:mead101.mead.EventDate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventDate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete ext_value_;
}

void EventDate::ArenaDtor(void* object) {
  EventDate* _this = reinterpret_cast< EventDate* >(object);
  (void)_this;
}
void EventDate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventDate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventDate& EventDate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void EventDate::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.EventDate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      location_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  ::memset(&is_after_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_before_) -
      reinterpret_cast<char*>(&is_after_)) + sizeof(is_before_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventDate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.avs.AllTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_after = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_after(&has_bits);
          is_after_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_approximate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_approximate(&has_bits);
          is_approximate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_before = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_before(&has_bits);
          is_before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.EventDate.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string location_description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_location_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.EventDate.location_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ddex_IsoDate ext_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventDate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.EventDate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.avs.AllTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_after = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_after(), target);
  }

  // optional bool is_approximate = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_approximate(), target);
  }

  // optional bool is_before = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_before(), target);
  }

  // optional string language_and_script_code = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.EventDate.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_language_and_script_code(), target);
  }

  // optional string location_description = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_location_description().data(), static_cast<int>(this->_internal_location_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.EventDate.location_description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_location_description(), target);
  }

  // optional .mead101.mead.ddex_IsoDate ext_value = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.EventDate)
  return target;
}

size_t EventDate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.EventDate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string language_and_script_code = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string location_description = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_location_description());
    }

    // optional .mead101.avs.AllTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .mead101.mead.ddex_IsoDate ext_value = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

    // optional bool is_after = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_approximate = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_before = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventDate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.EventDate)
  GOOGLE_DCHECK_NE(&from, this);
  const EventDate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventDate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.EventDate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.EventDate)
    MergeFrom(*source);
  }
}

void EventDate::MergeFrom(const EventDate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.EventDate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_location_description(from._internal_location_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_applicable_territory_code()->::mead101::avs::AllTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ext_value()->::mead101::mead::ddex_IsoDate::MergeFrom(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000010u) {
      is_after_ = from.is_after_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_approximate_ = from.is_approximate_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_before_ = from.is_before_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EventDate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.EventDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventDate::CopyFrom(const EventDate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.EventDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventDate::IsInitialized() const {
  return true;
}

void EventDate::InternalSwap(EventDate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  location_description_.Swap(&other->location_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventDate, is_before_)
      + sizeof(EventDate::is_before_)
      - PROTOBUF_FIELD_OFFSET(EventDate, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventDate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventDateTime::InitAsDefaultInstance() {
  ::mead101::mead::_EventDateTime_default_instance_._instance.get_mutable()->territory_code_ = const_cast< ::mead101::avs::AllTerritoryCode*>(
      ::mead101::avs::AllTerritoryCode::internal_default_instance());
}
class EventDateTime::_Internal {
 public:
  using HasBits = decltype(std::declval<EventDateTime>()._has_bits_);
  static void set_has_is_after(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_approximate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_before(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::AllTerritoryCode& territory_code(const EventDateTime* msg);
  static void set_has_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::AllTerritoryCode&
EventDateTime::_Internal::territory_code(const EventDateTime* msg) {
  return *msg->territory_code_;
}
void EventDateTime::clear_territory_code() {
  if (territory_code_ != nullptr) territory_code_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
EventDateTime::EventDateTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.EventDateTime)
}
EventDateTime::EventDateTime(const EventDateTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  location_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_location_description()) {
    location_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_location_description(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  if (from._internal_has_territory_code()) {
    territory_code_ = new ::mead101::avs::AllTerritoryCode(*from.territory_code_);
  } else {
    territory_code_ = nullptr;
  }
  ::memcpy(&is_after_, &from.is_after_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_before_) -
    reinterpret_cast<char*>(&is_after_)) + sizeof(is_before_));
  // @@protoc_insertion_point(copy_constructor:mead101.mead.EventDateTime)
}

void EventDateTime::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventDateTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_before_) -
      reinterpret_cast<char*>(&territory_code_)) + sizeof(is_before_));
}

EventDateTime::~EventDateTime() {
  // @@protoc_insertion_point(destructor:mead101.mead.EventDateTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventDateTime::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete territory_code_;
}

void EventDateTime::ArenaDtor(void* object) {
  EventDateTime* _this = reinterpret_cast< EventDateTime* >(object);
  (void)_this;
}
void EventDateTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventDateTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventDateTime& EventDateTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventDateTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void EventDateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.EventDateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      location_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(territory_code_ != nullptr);
      territory_code_->Clear();
    }
  }
  ::memset(&is_after_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_before_) -
      reinterpret_cast<char*>(&is_after_)) + sizeof(is_before_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventDateTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_after = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_after(&has_bits);
          is_after_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_approximate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_approximate(&has_bits);
          is_approximate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_before = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_before(&has_bits);
          is_before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.EventDateTime.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string location_description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_location_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.EventDateTime.location_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.AllTerritoryCode territory_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.EventDateTime.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventDateTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.EventDateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_after = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_after(), target);
  }

  // optional bool is_approximate = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_approximate(), target);
  }

  // optional bool is_before = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_before(), target);
  }

  // optional string language_and_script_code = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.EventDateTime.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language_and_script_code(), target);
  }

  // optional string location_description = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_location_description().data(), static_cast<int>(this->_internal_location_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.EventDateTime.location_description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_location_description(), target);
  }

  // optional .mead101.avs.AllTerritoryCode territory_code = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::territory_code(this), target, stream);
  }

  // optional string ext_value = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.EventDateTime.ext_value");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.EventDateTime)
  return target;
}

size_t EventDateTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.EventDateTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string language_and_script_code = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string location_description = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_location_description());
    }

    // optional string ext_value = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

    // optional .mead101.avs.AllTerritoryCode territory_code = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *territory_code_);
    }

    // optional bool is_after = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_approximate = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_before = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventDateTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.EventDateTime)
  GOOGLE_DCHECK_NE(&from, this);
  const EventDateTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventDateTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.EventDateTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.EventDateTime)
    MergeFrom(*source);
  }
}

void EventDateTime::MergeFrom(const EventDateTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.EventDateTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_location_description(from._internal_location_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_territory_code()->::mead101::avs::AllTerritoryCode::MergeFrom(from._internal_territory_code());
    }
    if (cached_has_bits & 0x00000010u) {
      is_after_ = from.is_after_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_approximate_ = from.is_approximate_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_before_ = from.is_before_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EventDateTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.EventDateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventDateTime::CopyFrom(const EventDateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.EventDateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventDateTime::IsInitialized() const {
  return true;
}

void EventDateTime::InternalSwap(EventDateTime* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  location_description_.Swap(&other->location_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventDateTime, is_before_)
      + sizeof(EventDateTime::is_before_)
      - PROTOBUF_FIELD_OFFSET(EventDateTime, territory_code_)>(
          reinterpret_cast<char*>(&territory_code_),
          reinterpret_cast<char*>(&other->territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventDateTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventDateWithoutFlags::InitAsDefaultInstance() {
  ::mead101::mead::_EventDateWithoutFlags_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::mead101::avs::AllTerritoryCode*>(
      ::mead101::avs::AllTerritoryCode::internal_default_instance());
  ::mead101::mead::_EventDateWithoutFlags_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::mead::ddex_IsoDate*>(
      ::mead101::mead::ddex_IsoDate::internal_default_instance());
}
class EventDateWithoutFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<EventDateWithoutFlags>()._has_bits_);
  static const ::mead101::avs::AllTerritoryCode& applicable_territory_code(const EventDateWithoutFlags* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_approximate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::ddex_IsoDate& ext_value(const EventDateWithoutFlags* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mead101::avs::AllTerritoryCode&
EventDateWithoutFlags::_Internal::applicable_territory_code(const EventDateWithoutFlags* msg) {
  return *msg->applicable_territory_code_;
}
const ::mead101::mead::ddex_IsoDate&
EventDateWithoutFlags::_Internal::ext_value(const EventDateWithoutFlags* msg) {
  return *msg->ext_value_;
}
void EventDateWithoutFlags::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
EventDateWithoutFlags::EventDateWithoutFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.EventDateWithoutFlags)
}
EventDateWithoutFlags::EventDateWithoutFlags(const EventDateWithoutFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  location_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_location_description()) {
    location_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_location_description(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::mead101::avs::AllTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::mead::ddex_IsoDate(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  is_approximate_ = from.is_approximate_;
  // @@protoc_insertion_point(copy_constructor:mead101.mead.EventDateWithoutFlags)
}

void EventDateWithoutFlags::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_approximate_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_approximate_));
}

EventDateWithoutFlags::~EventDateWithoutFlags() {
  // @@protoc_insertion_point(destructor:mead101.mead.EventDateWithoutFlags)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventDateWithoutFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete ext_value_;
}

void EventDateWithoutFlags::ArenaDtor(void* object) {
  EventDateWithoutFlags* _this = reinterpret_cast< EventDateWithoutFlags* >(object);
  (void)_this;
}
void EventDateWithoutFlags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventDateWithoutFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventDateWithoutFlags& EventDateWithoutFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void EventDateWithoutFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.EventDateWithoutFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      location_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  is_approximate_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventDateWithoutFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.avs.AllTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_approximate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_approximate(&has_bits);
          is_approximate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.EventDateWithoutFlags.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string location_description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_location_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.EventDateWithoutFlags.location_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ddex_IsoDate ext_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventDateWithoutFlags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.EventDateWithoutFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.avs.AllTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_approximate = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_approximate(), target);
  }

  // optional string language_and_script_code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.EventDateWithoutFlags.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language_and_script_code(), target);
  }

  // optional string location_description = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_location_description().data(), static_cast<int>(this->_internal_location_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.EventDateWithoutFlags.location_description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_location_description(), target);
  }

  // optional .mead101.mead.ddex_IsoDate ext_value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.EventDateWithoutFlags)
  return target;
}

size_t EventDateWithoutFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.EventDateWithoutFlags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string language_and_script_code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string location_description = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_location_description());
    }

    // optional .mead101.avs.AllTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .mead101.mead.ddex_IsoDate ext_value = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

    // optional bool is_approximate = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventDateWithoutFlags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.EventDateWithoutFlags)
  GOOGLE_DCHECK_NE(&from, this);
  const EventDateWithoutFlags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventDateWithoutFlags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.EventDateWithoutFlags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.EventDateWithoutFlags)
    MergeFrom(*source);
  }
}

void EventDateWithoutFlags::MergeFrom(const EventDateWithoutFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.EventDateWithoutFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_location_description(from._internal_location_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_applicable_territory_code()->::mead101::avs::AllTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ext_value()->::mead101::mead::ddex_IsoDate::MergeFrom(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000010u) {
      is_approximate_ = from.is_approximate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EventDateWithoutFlags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.EventDateWithoutFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventDateWithoutFlags::CopyFrom(const EventDateWithoutFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.EventDateWithoutFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventDateWithoutFlags::IsInitialized() const {
  return true;
}

void EventDateWithoutFlags::InternalSwap(EventDateWithoutFlags* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  location_description_.Swap(&other->location_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventDateWithoutFlags, is_approximate_)
      + sizeof(EventDateWithoutFlags::is_approximate_)
      - PROTOBUF_FIELD_OFFSET(EventDateWithoutFlags, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventDateWithoutFlags::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Feed::InitAsDefaultInstance() {
  ::mead101::mead::_Feed_default_instance_._instance.get_mutable()->generator_ = const_cast< ::mead101::mead::Generator*>(
      ::mead101::mead::Generator::internal_default_instance());
  ::mead101::mead::_Feed_default_instance_._instance.get_mutable()->icon_ = const_cast< ::mead101::mead::Icon*>(
      ::mead101::mead::Icon::internal_default_instance());
  ::mead101::mead::_Feed_default_instance_._instance.get_mutable()->id_ = const_cast< ::mead101::mead::Id*>(
      ::mead101::mead::Id::internal_default_instance());
  ::mead101::mead::_Feed_default_instance_._instance.get_mutable()->logo_ = const_cast< ::mead101::mead::Logo*>(
      ::mead101::mead::Logo::internal_default_instance());
  ::mead101::mead::_Feed_default_instance_._instance.get_mutable()->rights_ = const_cast< ::mead101::mead::Text*>(
      ::mead101::mead::Text::internal_default_instance());
  ::mead101::mead::_Feed_default_instance_._instance.get_mutable()->subtitle_ = const_cast< ::mead101::mead::Text*>(
      ::mead101::mead::Text::internal_default_instance());
  ::mead101::mead::_Feed_default_instance_._instance.get_mutable()->title_ = const_cast< ::mead101::mead::Text*>(
      ::mead101::mead::Text::internal_default_instance());
  ::mead101::mead::_Feed_default_instance_._instance.get_mutable()->updated_ = const_cast< ::mead101::mead::DateTime*>(
      ::mead101::mead::DateTime::internal_default_instance());
}
class Feed::_Internal {
 public:
  using HasBits = decltype(std::declval<Feed>()._has_bits_);
  static const ::mead101::mead::Generator& generator(const Feed* msg);
  static void set_has_generator(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::Icon& icon(const Feed* msg);
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::Id& id(const Feed* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::Logo& logo(const Feed* msg);
  static void set_has_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mead101::mead::Text& rights(const Feed* msg);
  static void set_has_rights(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mead101::mead::Text& subtitle(const Feed* msg);
  static void set_has_subtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::mead101::mead::Text& title(const Feed* msg);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::mead101::mead::DateTime& updated(const Feed* msg);
  static void set_has_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::mead101::mead::Generator&
Feed::_Internal::generator(const Feed* msg) {
  return *msg->generator_;
}
const ::mead101::mead::Icon&
Feed::_Internal::icon(const Feed* msg) {
  return *msg->icon_;
}
const ::mead101::mead::Id&
Feed::_Internal::id(const Feed* msg) {
  return *msg->id_;
}
const ::mead101::mead::Logo&
Feed::_Internal::logo(const Feed* msg) {
  return *msg->logo_;
}
const ::mead101::mead::Text&
Feed::_Internal::rights(const Feed* msg) {
  return *msg->rights_;
}
const ::mead101::mead::Text&
Feed::_Internal::subtitle(const Feed* msg) {
  return *msg->subtitle_;
}
const ::mead101::mead::Text&
Feed::_Internal::title(const Feed* msg) {
  return *msg->title_;
}
const ::mead101::mead::DateTime&
Feed::_Internal::updated(const Feed* msg) {
  return *msg->updated_;
}
Feed::Feed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  any_attribute_value_(arena),
  any_value_(arena),
  author_(arena),
  category_(arena),
  contributor_(arena),
  entry_(arena),
  link_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Feed)
}
Feed::Feed(const Feed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      any_attribute_value_(from.any_attribute_value_),
      any_value_(from.any_value_),
      author_(from.author_),
      category_(from.category_),
      contributor_(from.contributor_),
      entry_(from.entry_),
      link_(from.link_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_generator()) {
    generator_ = new ::mead101::mead::Generator(*from.generator_);
  } else {
    generator_ = nullptr;
  }
  if (from._internal_has_icon()) {
    icon_ = new ::mead101::mead::Icon(*from.icon_);
  } else {
    icon_ = nullptr;
  }
  if (from._internal_has_id()) {
    id_ = new ::mead101::mead::Id(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_logo()) {
    logo_ = new ::mead101::mead::Logo(*from.logo_);
  } else {
    logo_ = nullptr;
  }
  if (from._internal_has_rights()) {
    rights_ = new ::mead101::mead::Text(*from.rights_);
  } else {
    rights_ = nullptr;
  }
  if (from._internal_has_subtitle()) {
    subtitle_ = new ::mead101::mead::Text(*from.subtitle_);
  } else {
    subtitle_ = nullptr;
  }
  if (from._internal_has_title()) {
    title_ = new ::mead101::mead::Text(*from.title_);
  } else {
    title_ = nullptr;
  }
  if (from._internal_has_updated()) {
    updated_ = new ::mead101::mead::DateTime(*from.updated_);
  } else {
    updated_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Feed)
}

void Feed::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Feed_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&generator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_) -
      reinterpret_cast<char*>(&generator_)) + sizeof(updated_));
}

Feed::~Feed() {
  // @@protoc_insertion_point(destructor:mead101.mead.Feed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Feed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete generator_;
  if (this != internal_default_instance()) delete icon_;
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete logo_;
  if (this != internal_default_instance()) delete rights_;
  if (this != internal_default_instance()) delete subtitle_;
  if (this != internal_default_instance()) delete title_;
  if (this != internal_default_instance()) delete updated_;
}

void Feed::ArenaDtor(void* object) {
  Feed* _this = reinterpret_cast< Feed* >(object);
  (void)_this;
}
void Feed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Feed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Feed& Feed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Feed_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Feed::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Feed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  any_attribute_value_.Clear();
  any_value_.Clear();
  author_.Clear();
  category_.Clear();
  contributor_.Clear();
  entry_.Clear();
  link_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(generator_ != nullptr);
      generator_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(icon_ != nullptr);
      icon_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(logo_ != nullptr);
      logo_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(rights_ != nullptr);
      rights_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(subtitle_ != nullptr);
      subtitle_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(title_ != nullptr);
      title_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(updated_ != nullptr);
      updated_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Feed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string any_attribute_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_any_attribute_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Feed.any_attribute_value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string any_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_any_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Feed.any_value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Person author = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_author(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Category category = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Person contributor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contributor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Entry entry = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Generator generator = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_generator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Icon icon = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_icon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Id id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Link link = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_link(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Logo logo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_logo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Text rights = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_rights(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Text subtitle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_subtitle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Text title = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_title(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.DateTime updated = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Feed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Feed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  for (int i = 0, n = this->_internal_any_attribute_value_size(); i < n; i++) {
    const auto& s = this->_internal_any_attribute_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Feed.any_attribute_value");
    target = stream->WriteString(1, s, target);
  }

  // repeated string any_value = 2;
  for (int i = 0, n = this->_internal_any_value_size(); i < n; i++) {
    const auto& s = this->_internal_any_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Feed.any_value");
    target = stream->WriteString(2, s, target);
  }

  // repeated .mead101.mead.Person author = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_author_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_author(i), target, stream);
  }

  // repeated .mead101.mead.Category category = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_category_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_category(i), target, stream);
  }

  // repeated .mead101.mead.Person contributor = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contributor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_contributor(i), target, stream);
  }

  // repeated .mead101.mead.Entry entry = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_entry(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.Generator generator = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::generator(this), target, stream);
  }

  // optional .mead101.mead.Icon icon = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::icon(this), target, stream);
  }

  // optional .mead101.mead.Id id = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::id(this), target, stream);
  }

  // repeated .mead101.mead.Link link = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_link_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_link(i), target, stream);
  }

  // optional .mead101.mead.Logo logo = 11;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::logo(this), target, stream);
  }

  // optional .mead101.mead.Text rights = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::rights(this), target, stream);
  }

  // optional .mead101.mead.Text subtitle = 13;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::subtitle(this), target, stream);
  }

  // optional .mead101.mead.Text title = 14;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::title(this), target, stream);
  }

  // optional .mead101.mead.DateTime updated = 15;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::updated(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Feed)
  return target;
}

size_t Feed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Feed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(any_attribute_value_.size());
  for (int i = 0, n = any_attribute_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      any_attribute_value_.Get(i));
  }

  // repeated string any_value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(any_value_.size());
  for (int i = 0, n = any_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      any_value_.Get(i));
  }

  // repeated .mead101.mead.Person author = 3;
  total_size += 1UL * this->_internal_author_size();
  for (const auto& msg : this->author_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Category category = 4;
  total_size += 1UL * this->_internal_category_size();
  for (const auto& msg : this->category_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Person contributor = 5;
  total_size += 1UL * this->_internal_contributor_size();
  for (const auto& msg : this->contributor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Entry entry = 6;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Link link = 10;
  total_size += 1UL * this->_internal_link_size();
  for (const auto& msg : this->link_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .mead101.mead.Generator generator = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *generator_);
    }

    // optional .mead101.mead.Icon icon = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *icon_);
    }

    // optional .mead101.mead.Id id = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .mead101.mead.Logo logo = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *logo_);
    }

    // optional .mead101.mead.Text rights = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rights_);
    }

    // optional .mead101.mead.Text subtitle = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subtitle_);
    }

    // optional .mead101.mead.Text title = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *title_);
    }

    // optional .mead101.mead.DateTime updated = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *updated_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Feed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Feed)
  GOOGLE_DCHECK_NE(&from, this);
  const Feed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Feed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Feed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Feed)
    MergeFrom(*source);
  }
}

void Feed::MergeFrom(const Feed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Feed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  any_attribute_value_.MergeFrom(from.any_attribute_value_);
  any_value_.MergeFrom(from.any_value_);
  author_.MergeFrom(from.author_);
  category_.MergeFrom(from.category_);
  contributor_.MergeFrom(from.contributor_);
  entry_.MergeFrom(from.entry_);
  link_.MergeFrom(from.link_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_generator()->::mead101::mead::Generator::MergeFrom(from._internal_generator());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_icon()->::mead101::mead::Icon::MergeFrom(from._internal_icon());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_id()->::mead101::mead::Id::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_logo()->::mead101::mead::Logo::MergeFrom(from._internal_logo());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_rights()->::mead101::mead::Text::MergeFrom(from._internal_rights());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_subtitle()->::mead101::mead::Text::MergeFrom(from._internal_subtitle());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_title()->::mead101::mead::Text::MergeFrom(from._internal_title());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_updated()->::mead101::mead::DateTime::MergeFrom(from._internal_updated());
    }
  }
}

void Feed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Feed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feed::CopyFrom(const Feed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Feed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feed::IsInitialized() const {
  return true;
}

void Feed::InternalSwap(Feed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  any_attribute_value_.InternalSwap(&other->any_attribute_value_);
  any_value_.InternalSwap(&other->any_value_);
  author_.InternalSwap(&other->author_);
  category_.InternalSwap(&other->category_);
  contributor_.InternalSwap(&other->contributor_);
  entry_.InternalSwap(&other->entry_);
  link_.InternalSwap(&other->link_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Feed, updated_)
      + sizeof(Feed::updated_)
      - PROTOBUF_FIELD_OFFSET(Feed, generator_)>(
          reinterpret_cast<char*>(&generator_),
          reinterpret_cast<char*>(&other->generator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Feed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void File::InitAsDefaultInstance() {
  ::mead101::mead::_File_default_instance_._instance.get_mutable()->hash_sum_ = const_cast< ::mead101::mead::DetailedHashSum*>(
      ::mead101::mead::DetailedHashSum::internal_default_instance());
}
class File::_Internal {
 public:
  using HasBits = decltype(std::declval<File>()._has_bits_);
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::DetailedHashSum& hash_sum(const File* msg);
  static void set_has_hash_sum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_u_r_i(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mead101::mead::DetailedHashSum&
File::_Internal::hash_sum(const File* msg) {
  return *msg->hash_sum_;
}
File::File(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.File)
}
File::File(const File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  u_r_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_u_r_i()) {
    u_r_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_u_r_i(),
      GetArena());
  }
  if (from._internal_has_hash_sum()) {
    hash_sum_ = new ::mead101::mead::DetailedHashSum(*from.hash_sum_);
  } else {
    hash_sum_ = nullptr;
  }
  file_size_ = from.file_size_;
  // @@protoc_insertion_point(copy_constructor:mead101.mead.File)
}

void File::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_File_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  u_r_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hash_sum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_size_) -
      reinterpret_cast<char*>(&hash_sum_)) + sizeof(file_size_));
}

File::~File() {
  // @@protoc_insertion_point(destructor:mead101.mead.File)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void File::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  u_r_i_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hash_sum_;
}

void File::ArenaDtor(void* object) {
  File* _this = reinterpret_cast< File* >(object);
  (void)_this;
}
void File::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const File& File::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_File_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void File::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      u_r_i_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(hash_sum_ != nullptr);
      hash_sum_->Clear();
    }
  }
  file_size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* File::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double file_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.DetailedHashSum hash_sum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hash_sum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string u_r_i = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_u_r_i();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.File.u_r_i");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* File::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double file_size = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_file_size(), target);
  }

  // optional .mead101.mead.DetailedHashSum hash_sum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hash_sum(this), target, stream);
  }

  // optional string u_r_i = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_u_r_i().data(), static_cast<int>(this->_internal_u_r_i().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.File.u_r_i");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_u_r_i(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.File)
  return target;
}

size_t File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.File)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string u_r_i = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_u_r_i());
    }

    // optional .mead101.mead.DetailedHashSum hash_sum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hash_sum_);
    }

    // optional double file_size = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void File::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.File)
  GOOGLE_DCHECK_NE(&from, this);
  const File* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<File>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.File)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.File)
    MergeFrom(*source);
  }
}

void File::MergeFrom(const File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_u_r_i(from._internal_u_r_i());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_hash_sum()->::mead101::mead::DetailedHashSum::MergeFrom(from._internal_hash_sum());
    }
    if (cached_has_bits & 0x00000004u) {
      file_size_ = from.file_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void File::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void File::CopyFrom(const File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  return true;
}

void File::InternalSwap(File* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  u_r_i_.Swap(&other->u_r_i_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(File, file_size_)
      + sizeof(File::file_size_)
      - PROTOBUF_FIELD_OFFSET(File, hash_sum_)>(
          reinterpret_cast<char*>(&hash_sum_),
          reinterpret_cast<char*>(&other->hash_sum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata File::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Flag::InitAsDefaultInstance() {
}
class Flag::_Internal {
 public:
  using HasBits = decltype(std::declval<Flag>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Flag::Flag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Flag)
}
Flag::Flag(const Flag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Flag)
}

void Flag::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Flag_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  value_ = false;
}

Flag::~Flag() {
  // @@protoc_insertion_point(destructor:mead101.mead.Flag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Flag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Flag::ArenaDtor(void* object) {
  Flag* _this = reinterpret_cast< Flag* >(object);
  (void)_this;
}
void Flag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Flag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Flag& Flag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Flag_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Flag::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Flag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_reference_.Clear();
  value_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Flag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string metadata_source_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Flag.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Flag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Flag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Flag.metadata_source_reference");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Flag)
  return target;
}

size_t Flag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Flag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // optional bool value = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Flag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Flag)
  GOOGLE_DCHECK_NE(&from, this);
  const Flag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Flag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Flag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Flag)
    MergeFrom(*source);
  }
}

void Flag::MergeFrom(const Flag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Flag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
}

void Flag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Flag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Flag::CopyFrom(const Flag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Flag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Flag::IsInitialized() const {
  return true;
}

void Flag::InternalSwap(Flag* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Flag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FocusTrack::InitAsDefaultInstance() {
  ::mead101::mead::_FocusTrack_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::mead101::avs::CurrentTerritoryCode*>(
      ::mead101::avs::CurrentTerritoryCode::internal_default_instance());
  ::mead101::mead::_FocusTrack_default_instance_._instance.get_mutable()->resource_id_ = const_cast< ::mead101::mead::ResourceId*>(
      ::mead101::mead::ResourceId::internal_default_instance());
}
class FocusTrack::_Internal {
 public:
  using HasBits = decltype(std::declval<FocusTrack>()._has_bits_);
  static const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code(const FocusTrack* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::ResourceId& resource_id(const FocusTrack* msg);
  static void set_has_resource_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mead101::avs::CurrentTerritoryCode&
FocusTrack::_Internal::applicable_territory_code(const FocusTrack* msg) {
  return *msg->applicable_territory_code_;
}
const ::mead101::mead::ResourceId&
FocusTrack::_Internal::resource_id(const FocusTrack* msg) {
  return *msg->resource_id_;
}
void FocusTrack::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FocusTrack::FocusTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  comment_(arena),
  display_artist_name_(arena),
  metadata_source_reference_(arena),
  period_of_being_focus_track_(arena),
  title_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.FocusTrack)
}
FocusTrack::FocusTrack(const FocusTrack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      comment_(from.comment_),
      display_artist_name_(from.display_artist_name_),
      metadata_source_reference_(from.metadata_source_reference_),
      period_of_being_focus_track_(from.period_of_being_focus_track_),
      title_(from.title_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::mead101::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_resource_id()) {
    resource_id_ = new ::mead101::mead::ResourceId(*from.resource_id_);
  } else {
    resource_id_ = nullptr;
  }
  ::memcpy(&is_default_, &from.is_default_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&is_default_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:mead101.mead.FocusTrack)
}

void FocusTrack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FocusTrack_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(sequence_number_));
}

FocusTrack::~FocusTrack() {
  // @@protoc_insertion_point(destructor:mead101.mead.FocusTrack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FocusTrack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete resource_id_;
}

void FocusTrack::ArenaDtor(void* object) {
  FocusTrack* _this = reinterpret_cast< FocusTrack* >(object);
  (void)_this;
}
void FocusTrack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FocusTrack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FocusTrack& FocusTrack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FocusTrack_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void FocusTrack::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.FocusTrack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comment_.Clear();
  display_artist_name_.Clear();
  metadata_source_reference_.Clear();
  period_of_being_focus_track_.Clear();
  title_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resource_id_ != nullptr);
      resource_id_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&is_default_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_number_) -
        reinterpret_cast<char*>(&is_default_)) + sizeof(sequence_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FocusTrack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.TextWithoutTerritory comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_comment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.DisplayArtistNameWithPronunciation display_artist_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_artist_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.FocusTrack.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.PeriodWithTime period_of_being_focus_track = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_period_of_being_focus_track(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ResourceId resource_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sequence_number = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.TitleWithPronunciation title = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FocusTrack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.FocusTrack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // repeated .mead101.mead.TextWithoutTerritory comment = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_comment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_comment(i), target, stream);
  }

  // repeated .mead101.mead.DisplayArtistNameWithPronunciation display_artist_name = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_artist_name_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_display_artist_name(i), target, stream);
  }

  // optional bool is_default = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_default(), target);
  }

  // repeated string metadata_source_reference = 5;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.FocusTrack.metadata_source_reference");
    target = stream->WriteString(5, s, target);
  }

  // repeated .mead101.mead.PeriodWithTime period_of_being_focus_track = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_period_of_being_focus_track_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_period_of_being_focus_track(i), target, stream);
  }

  // optional .mead101.mead.ResourceId resource_id = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::resource_id(this), target, stream);
  }

  // optional int32 sequence_number = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_sequence_number(), target);
  }

  // repeated .mead101.mead.TitleWithPronunciation title = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_title(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.FocusTrack)
  return target;
}

size_t FocusTrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.FocusTrack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.TextWithoutTerritory comment = 2;
  total_size += 1UL * this->_internal_comment_size();
  for (const auto& msg : this->comment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.DisplayArtistNameWithPronunciation display_artist_name = 3;
  total_size += 1UL * this->_internal_display_artist_name_size();
  for (const auto& msg : this->display_artist_name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metadata_source_reference = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // repeated .mead101.mead.PeriodWithTime period_of_being_focus_track = 6;
  total_size += 1UL * this->_internal_period_of_being_focus_track_size();
  for (const auto& msg : this->period_of_being_focus_track_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.TitleWithPronunciation title = 9;
  total_size += 1UL * this->_internal_title_size();
  for (const auto& msg : this->title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .mead101.mead.ResourceId resource_id = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_id_);
    }

    // optional bool is_default = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 sequence_number = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sequence_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FocusTrack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.FocusTrack)
  GOOGLE_DCHECK_NE(&from, this);
  const FocusTrack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FocusTrack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.FocusTrack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.FocusTrack)
    MergeFrom(*source);
  }
}

void FocusTrack::MergeFrom(const FocusTrack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.FocusTrack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  comment_.MergeFrom(from.comment_);
  display_artist_name_.MergeFrom(from.display_artist_name_);
  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  period_of_being_focus_track_.MergeFrom(from.period_of_being_focus_track_);
  title_.MergeFrom(from.title_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_applicable_territory_code()->::mead101::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_resource_id()->::mead101::mead::ResourceId::MergeFrom(from._internal_resource_id());
    }
    if (cached_has_bits & 0x00000004u) {
      is_default_ = from.is_default_;
    }
    if (cached_has_bits & 0x00000008u) {
      sequence_number_ = from.sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FocusTrack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.FocusTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FocusTrack::CopyFrom(const FocusTrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.FocusTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FocusTrack::IsInitialized() const {
  return true;
}

void FocusTrack::InternalSwap(FocusTrack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  comment_.InternalSwap(&other->comment_);
  display_artist_name_.InternalSwap(&other->display_artist_name_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  period_of_being_focus_track_.InternalSwap(&other->period_of_being_focus_track_);
  title_.InternalSwap(&other->title_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FocusTrack, sequence_number_)
      + sizeof(FocusTrack::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(FocusTrack, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FocusTrack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Form::InitAsDefaultInstance() {
  ::mead101::mead::_Form_default_instance_._instance.get_mutable()->value_ = const_cast< ::mead101::mead::FormValue*>(
      ::mead101::mead::FormValue::internal_default_instance());
}
class Form::_Internal {
 public:
  using HasBits = decltype(std::declval<Form>()._has_bits_);
  static const ::mead101::mead::FormValue& value(const Form* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mead101::mead::FormValue&
Form::_Internal::value(const Form* msg) {
  return *msg->value_;
}
Form::Form(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Form)
}
Form::Form(const Form& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::mead101::mead::FormValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Form)
}

void Form::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Form_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  value_ = nullptr;
}

Form::~Form() {
  // @@protoc_insertion_point(destructor:mead101.mead.Form)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Form::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void Form::ArenaDtor(void* object) {
  Form* _this = reinterpret_cast< Form* >(object);
  (void)_this;
}
void Form::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Form::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Form& Form::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Form_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Form::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Form)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(value_ != nullptr);
    value_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Form::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string metadata_source_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Form.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.FormValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Form::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Form)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Form.metadata_source_reference");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.FormValue value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Form)
  return target;
}

size_t Form::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Form)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // optional .mead101.mead.FormValue value = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Form::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Form)
  GOOGLE_DCHECK_NE(&from, this);
  const Form* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Form>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Form)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Form)
    MergeFrom(*source);
  }
}

void Form::MergeFrom(const Form& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Form)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  if (from._internal_has_value()) {
    _internal_mutable_value()->::mead101::mead::FormValue::MergeFrom(from._internal_value());
  }
}

void Form::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Form)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Form::CopyFrom(const Form& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Form)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Form::IsInitialized() const {
  return true;
}

void Form::InternalSwap(Form* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Form::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FormValue::InitAsDefaultInstance() {
  ::mead101::mead::_FormValue_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::Form*>(
      ::mead101::avs::Form::internal_default_instance());
}
class FormValue::_Internal {
 public:
  using HasBits = decltype(std::declval<FormValue>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::Form& ext_value(const FormValue* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::Form&
FormValue::_Internal::ext_value(const FormValue* msg) {
  return *msg->ext_value_;
}
void FormValue::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
FormValue::FormValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.FormValue)
}
FormValue::FormValue(const FormValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::Form(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.FormValue)
}

void FormValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FormValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

FormValue::~FormValue() {
  // @@protoc_insertion_point(destructor:mead101.mead.FormValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FormValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void FormValue::ArenaDtor(void* object) {
  FormValue* _this = reinterpret_cast< FormValue* >(object);
  (void)_this;
}
void FormValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FormValue& FormValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FormValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void FormValue::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.FormValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.FormValue.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.FormValue.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.Form ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.FormValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.FormValue.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.FormValue.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.Form ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.FormValue)
  return target;
}

size_t FormValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.FormValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.Form ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FormValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.FormValue)
  GOOGLE_DCHECK_NE(&from, this);
  const FormValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FormValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.FormValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.FormValue)
    MergeFrom(*source);
  }
}

void FormValue::MergeFrom(const FormValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.FormValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::Form::MergeFrom(from._internal_ext_value());
    }
  }
}

void FormValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.FormValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormValue::CopyFrom(const FormValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.FormValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormValue::IsInitialized() const {
  return true;
}

void FormValue::InternalSwap(FormValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FormValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Generator::InitAsDefaultInstance() {
}
class Generator::_Internal {
 public:
  using HasBits = decltype(std::declval<Generator>()._has_bits_);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Generator::Generator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  any_attribute_value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Generator)
}
Generator::Generator(const Generator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      any_attribute_value_(from.any_attribute_value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_uri()) {
    uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uri(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Generator)
}

void Generator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Generator_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Generator::~Generator() {
  // @@protoc_insertion_point(destructor:mead101.mead.Generator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Generator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Generator::ArenaDtor(void* object) {
  Generator* _this = reinterpret_cast< Generator* >(object);
  (void)_this;
}
void Generator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Generator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Generator& Generator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Generator_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Generator::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Generator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  any_attribute_value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      uri_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      version_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Generator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string any_attribute_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_any_attribute_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Generator.any_attribute_value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Generator.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string uri = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Generator.uri");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Generator.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Generator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Generator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  for (int i = 0, n = this->_internal_any_attribute_value_size(); i < n; i++) {
    const auto& s = this->_internal_any_attribute_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Generator.any_attribute_value");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string ext_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Generator.ext_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ext_value(), target);
  }

  // optional string uri = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Generator.uri");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_uri(), target);
  }

  // optional string version = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Generator.version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Generator)
  return target;
}

size_t Generator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Generator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(any_attribute_value_.size());
  for (int i = 0, n = any_attribute_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      any_attribute_value_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string ext_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

    // optional string uri = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri());
    }

    // optional string version = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Generator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Generator)
  GOOGLE_DCHECK_NE(&from, this);
  const Generator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Generator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Generator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Generator)
    MergeFrom(*source);
  }
}

void Generator::MergeFrom(const Generator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Generator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  any_attribute_value_.MergeFrom(from.any_attribute_value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_uri(from._internal_uri());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_version(from._internal_version());
    }
  }
}

void Generator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Generator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Generator::CopyFrom(const Generator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Generator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Generator::IsInitialized() const {
  return true;
}

void Generator::InternalSwap(Generator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  any_attribute_value_.InternalSwap(&other->any_attribute_value_);
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uri_.Swap(&other->uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Generator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenreCategory::InitAsDefaultInstance() {
  ::mead101::mead::_GenreCategory_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::mead101::avs::CurrentTerritoryCode*>(
      ::mead101::avs::CurrentTerritoryCode::internal_default_instance());
  ::mead101::mead::_GenreCategory_default_instance_._instance.get_mutable()->value_ = const_cast< ::mead101::mead::GenreCategoryValue*>(
      ::mead101::mead::GenreCategoryValue::internal_default_instance());
}
class GenreCategory::_Internal {
 public:
  using HasBits = decltype(std::declval<GenreCategory>()._has_bits_);
  static const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code(const GenreCategory* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::GenreCategoryValue& value(const GenreCategory* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mead101::avs::CurrentTerritoryCode&
GenreCategory::_Internal::applicable_territory_code(const GenreCategory* msg) {
  return *msg->applicable_territory_code_;
}
const ::mead101::mead::GenreCategoryValue&
GenreCategory::_Internal::value(const GenreCategory* msg) {
  return *msg->value_;
}
void GenreCategory::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GenreCategory::GenreCategory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  description_(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.GenreCategory)
}
GenreCategory::GenreCategory(const GenreCategory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      description_(from.description_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::mead101::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::mead101::mead::GenreCategoryValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.GenreCategory)
}

void GenreCategory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenreCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(value_));
}

GenreCategory::~GenreCategory() {
  // @@protoc_insertion_point(destructor:mead101.mead.GenreCategory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenreCategory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete value_;
}

void GenreCategory::ArenaDtor(void* object) {
  GenreCategory* _this = reinterpret_cast< GenreCategory* >(object);
  (void)_this;
}
void GenreCategory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenreCategory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenreCategory& GenreCategory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenreCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void GenreCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.GenreCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.Clear();
  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenreCategory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.TextWithoutTerritory description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_description(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.GenreCategory.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.GenreCategoryValue value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenreCategory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.GenreCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // repeated .mead101.mead.TextWithoutTerritory description = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_description_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_description(i), target, stream);
  }

  // repeated string metadata_source_reference = 3;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.GenreCategory.metadata_source_reference");
    target = stream->WriteString(3, s, target);
  }

  // optional .mead101.mead.GenreCategoryValue value = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.GenreCategory)
  return target;
}

size_t GenreCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.GenreCategory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.TextWithoutTerritory description = 2;
  total_size += 1UL * this->_internal_description_size();
  for (const auto& msg : this->description_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metadata_source_reference = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .mead101.mead.GenreCategoryValue value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenreCategory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.GenreCategory)
  GOOGLE_DCHECK_NE(&from, this);
  const GenreCategory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenreCategory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.GenreCategory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.GenreCategory)
    MergeFrom(*source);
  }
}

void GenreCategory::MergeFrom(const GenreCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.GenreCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  description_.MergeFrom(from.description_);
  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_applicable_territory_code()->::mead101::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::mead101::mead::GenreCategoryValue::MergeFrom(from._internal_value());
    }
  }
}

void GenreCategory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.GenreCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenreCategory::CopyFrom(const GenreCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.GenreCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenreCategory::IsInitialized() const {
  return true;
}

void GenreCategory::InternalSwap(GenreCategory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.InternalSwap(&other->description_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenreCategory, value_)
      + sizeof(GenreCategory::value_)
      - PROTOBUF_FIELD_OFFSET(GenreCategory, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenreCategory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenreCategoryValue::InitAsDefaultInstance() {
  ::mead101::mead::_GenreCategoryValue_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::ClassifiedGenre*>(
      ::mead101::avs::ClassifiedGenre::internal_default_instance());
}
class GenreCategoryValue::_Internal {
 public:
  using HasBits = decltype(std::declval<GenreCategoryValue>()._has_bits_);
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::avs::ClassifiedGenre& ext_value(const GenreCategoryValue* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mead101::avs::ClassifiedGenre&
GenreCategoryValue::_Internal::ext_value(const GenreCategoryValue* msg) {
  return *msg->ext_value_;
}
void GenreCategoryValue::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
GenreCategoryValue::GenreCategoryValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.GenreCategoryValue)
}
GenreCategoryValue::GenreCategoryValue(const GenreCategoryValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::ClassifiedGenre(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.GenreCategoryValue)
}

void GenreCategoryValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenreCategoryValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

GenreCategoryValue::~GenreCategoryValue() {
  // @@protoc_insertion_point(destructor:mead101.mead.GenreCategoryValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenreCategoryValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void GenreCategoryValue::ArenaDtor(void* object) {
  GenreCategoryValue* _this = reinterpret_cast< GenreCategoryValue* >(object);
  (void)_this;
}
void GenreCategoryValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenreCategoryValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenreCategoryValue& GenreCategoryValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenreCategoryValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void GenreCategoryValue::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.GenreCategoryValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenreCategoryValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language_and_script_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.GenreCategoryValue.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string namespace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.GenreCategoryValue.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.GenreCategoryValue.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.ClassifiedGenre ext_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenreCategoryValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.GenreCategoryValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language_and_script_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.GenreCategoryValue.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language_and_script_code(), target);
  }

  // optional string namespace = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.GenreCategoryValue.namespace");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.GenreCategoryValue.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.ClassifiedGenre ext_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.GenreCategoryValue)
  return target;
}

size_t GenreCategoryValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.GenreCategoryValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string language_and_script_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string namespace = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.ClassifiedGenre ext_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenreCategoryValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.GenreCategoryValue)
  GOOGLE_DCHECK_NE(&from, this);
  const GenreCategoryValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenreCategoryValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.GenreCategoryValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.GenreCategoryValue)
    MergeFrom(*source);
  }
}

void GenreCategoryValue::MergeFrom(const GenreCategoryValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.GenreCategoryValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ext_value()->::mead101::avs::ClassifiedGenre::MergeFrom(from._internal_ext_value());
    }
  }
}

void GenreCategoryValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.GenreCategoryValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenreCategoryValue::CopyFrom(const GenreCategoryValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.GenreCategoryValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenreCategoryValue::IsInitialized() const {
  return true;
}

void GenreCategoryValue::InternalSwap(GenreCategoryValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenreCategoryValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Harmony::InitAsDefaultInstance() {
  ::mead101::mead::_Harmony_default_instance_._instance.get_mutable()->mode_ = const_cast< ::mead101::mead::Mode*>(
      ::mead101::mead::Mode::internal_default_instance());
  ::mead101::mead::_Harmony_default_instance_._instance.get_mutable()->root_chord_note_ = const_cast< ::mead101::mead::RootChordNote*>(
      ::mead101::mead::RootChordNote::internal_default_instance());
  ::mead101::mead::_Harmony_default_instance_._instance.get_mutable()->root_chord_quality_ = const_cast< ::mead101::mead::RootChordQuality*>(
      ::mead101::mead::RootChordQuality::internal_default_instance());
}
class Harmony::_Internal {
 public:
  using HasBits = decltype(std::declval<Harmony>()._has_bits_);
  static const ::mead101::mead::Mode& mode(const Harmony* msg);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::RootChordNote& root_chord_note(const Harmony* msg);
  static void set_has_root_chord_note(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::RootChordQuality& root_chord_quality(const Harmony* msg);
  static void set_has_root_chord_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::mead::Mode&
Harmony::_Internal::mode(const Harmony* msg) {
  return *msg->mode_;
}
const ::mead101::mead::RootChordNote&
Harmony::_Internal::root_chord_note(const Harmony* msg) {
  return *msg->root_chord_note_;
}
const ::mead101::mead::RootChordQuality&
Harmony::_Internal::root_chord_quality(const Harmony* msg) {
  return *msg->root_chord_quality_;
}
Harmony::Harmony(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_reference_(arena),
  modulation_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Harmony)
}
Harmony::Harmony(const Harmony& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metadata_source_reference_(from.metadata_source_reference_),
      modulation_(from.modulation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mode()) {
    mode_ = new ::mead101::mead::Mode(*from.mode_);
  } else {
    mode_ = nullptr;
  }
  if (from._internal_has_root_chord_note()) {
    root_chord_note_ = new ::mead101::mead::RootChordNote(*from.root_chord_note_);
  } else {
    root_chord_note_ = nullptr;
  }
  if (from._internal_has_root_chord_quality()) {
    root_chord_quality_ = new ::mead101::mead::RootChordQuality(*from.root_chord_quality_);
  } else {
    root_chord_quality_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Harmony)
}

void Harmony::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Harmony_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&root_chord_quality_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(root_chord_quality_));
}

Harmony::~Harmony() {
  // @@protoc_insertion_point(destructor:mead101.mead.Harmony)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Harmony::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mode_;
  if (this != internal_default_instance()) delete root_chord_note_;
  if (this != internal_default_instance()) delete root_chord_quality_;
}

void Harmony::ArenaDtor(void* object) {
  Harmony* _this = reinterpret_cast< Harmony* >(object);
  (void)_this;
}
void Harmony::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Harmony::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Harmony& Harmony::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Harmony_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Harmony::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Harmony)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_reference_.Clear();
  modulation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(mode_ != nullptr);
      mode_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(root_chord_note_ != nullptr);
      root_chord_note_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(root_chord_quality_ != nullptr);
      root_chord_quality_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Harmony::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string metadata_source_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Harmony.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Mode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.HarmonyModulation modulation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_modulation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.RootChordNote root_chord_note = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_root_chord_note(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.RootChordQuality root_chord_quality = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_root_chord_quality(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Harmony::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Harmony)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Harmony.metadata_source_reference");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.Mode mode = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mode(this), target, stream);
  }

  // repeated .mead101.mead.HarmonyModulation modulation = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_modulation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_modulation(i), target, stream);
  }

  // optional .mead101.mead.RootChordNote root_chord_note = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::root_chord_note(this), target, stream);
  }

  // optional .mead101.mead.RootChordQuality root_chord_quality = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::root_chord_quality(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Harmony)
  return target;
}

size_t Harmony::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Harmony)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // repeated .mead101.mead.HarmonyModulation modulation = 3;
  total_size += 1UL * this->_internal_modulation_size();
  for (const auto& msg : this->modulation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .mead101.mead.Mode mode = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mode_);
    }

    // optional .mead101.mead.RootChordNote root_chord_note = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *root_chord_note_);
    }

    // optional .mead101.mead.RootChordQuality root_chord_quality = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *root_chord_quality_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Harmony::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Harmony)
  GOOGLE_DCHECK_NE(&from, this);
  const Harmony* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Harmony>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Harmony)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Harmony)
    MergeFrom(*source);
  }
}

void Harmony::MergeFrom(const Harmony& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Harmony)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  modulation_.MergeFrom(from.modulation_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_mode()->::mead101::mead::Mode::MergeFrom(from._internal_mode());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_root_chord_note()->::mead101::mead::RootChordNote::MergeFrom(from._internal_root_chord_note());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_root_chord_quality()->::mead101::mead::RootChordQuality::MergeFrom(from._internal_root_chord_quality());
    }
  }
}

void Harmony::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Harmony)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Harmony::CopyFrom(const Harmony& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Harmony)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Harmony::IsInitialized() const {
  return true;
}

void Harmony::InternalSwap(Harmony* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  modulation_.InternalSwap(&other->modulation_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Harmony, root_chord_quality_)
      + sizeof(Harmony::root_chord_quality_)
      - PROTOBUF_FIELD_OFFSET(Harmony, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Harmony::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HarmonyModulation::InitAsDefaultInstance() {
  ::mead101::mead::_HarmonyModulation_default_instance_._instance.get_mutable()->mode_ = const_cast< ::mead101::mead::Mode*>(
      ::mead101::mead::Mode::internal_default_instance());
  ::mead101::mead::_HarmonyModulation_default_instance_._instance.get_mutable()->root_chord_note_ = const_cast< ::mead101::mead::RootChordNote*>(
      ::mead101::mead::RootChordNote::internal_default_instance());
  ::mead101::mead::_HarmonyModulation_default_instance_._instance.get_mutable()->root_chord_quality_ = const_cast< ::mead101::mead::RootChordQuality*>(
      ::mead101::mead::RootChordQuality::internal_default_instance());
}
class HarmonyModulation::_Internal {
 public:
  using HasBits = decltype(std::declval<HarmonyModulation>()._has_bits_);
  static void set_has_end_bar(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_end_point(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mead101::mead::Mode& mode(const HarmonyModulation* msg);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::RootChordNote& root_chord_note(const HarmonyModulation* msg);
  static void set_has_root_chord_note(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::RootChordQuality& root_chord_quality(const HarmonyModulation* msg);
  static void set_has_root_chord_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_bar(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_start_point(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::mead101::mead::Mode&
HarmonyModulation::_Internal::mode(const HarmonyModulation* msg) {
  return *msg->mode_;
}
const ::mead101::mead::RootChordNote&
HarmonyModulation::_Internal::root_chord_note(const HarmonyModulation* msg) {
  return *msg->root_chord_note_;
}
const ::mead101::mead::RootChordQuality&
HarmonyModulation::_Internal::root_chord_quality(const HarmonyModulation* msg) {
  return *msg->root_chord_quality_;
}
HarmonyModulation::HarmonyModulation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.HarmonyModulation)
}
HarmonyModulation::HarmonyModulation(const HarmonyModulation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mode()) {
    mode_ = new ::mead101::mead::Mode(*from.mode_);
  } else {
    mode_ = nullptr;
  }
  if (from._internal_has_root_chord_note()) {
    root_chord_note_ = new ::mead101::mead::RootChordNote(*from.root_chord_note_);
  } else {
    root_chord_note_ = nullptr;
  }
  if (from._internal_has_root_chord_quality()) {
    root_chord_quality_ = new ::mead101::mead::RootChordQuality(*from.root_chord_quality_);
  } else {
    root_chord_quality_ = nullptr;
  }
  ::memcpy(&end_point_, &from.end_point_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_point_) -
    reinterpret_cast<char*>(&end_point_)) + sizeof(start_point_));
  // @@protoc_insertion_point(copy_constructor:mead101.mead.HarmonyModulation)
}

void HarmonyModulation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HarmonyModulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_point_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(start_point_));
}

HarmonyModulation::~HarmonyModulation() {
  // @@protoc_insertion_point(destructor:mead101.mead.HarmonyModulation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HarmonyModulation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mode_;
  if (this != internal_default_instance()) delete root_chord_note_;
  if (this != internal_default_instance()) delete root_chord_quality_;
}

void HarmonyModulation::ArenaDtor(void* object) {
  HarmonyModulation* _this = reinterpret_cast< HarmonyModulation* >(object);
  (void)_this;
}
void HarmonyModulation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HarmonyModulation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HarmonyModulation& HarmonyModulation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HarmonyModulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void HarmonyModulation::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.HarmonyModulation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(mode_ != nullptr);
      mode_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(root_chord_note_ != nullptr);
      root_chord_note_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(root_chord_quality_ != nullptr);
      root_chord_quality_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&end_point_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_point_) -
        reinterpret_cast<char*>(&end_point_)) + sizeof(start_point_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HarmonyModulation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 end_bar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_end_bar(&has_bits);
          end_bar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double end_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_end_point(&has_bits);
          end_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Mode mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.RootChordNote root_chord_note = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_root_chord_note(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.RootChordQuality root_chord_quality = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_root_chord_quality(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 start_bar = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_start_bar(&has_bits);
          start_bar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double start_point = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_start_point(&has_bits);
          start_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HarmonyModulation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.HarmonyModulation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 end_bar = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_end_bar(), target);
  }

  // optional double end_point = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_end_point(), target);
  }

  // optional .mead101.mead.Mode mode = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mode(this), target, stream);
  }

  // optional .mead101.mead.RootChordNote root_chord_note = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::root_chord_note(this), target, stream);
  }

  // optional .mead101.mead.RootChordQuality root_chord_quality = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::root_chord_quality(this), target, stream);
  }

  // optional int32 start_bar = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_start_bar(), target);
  }

  // optional double start_point = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_start_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.HarmonyModulation)
  return target;
}

size_t HarmonyModulation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.HarmonyModulation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .mead101.mead.Mode mode = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mode_);
    }

    // optional .mead101.mead.RootChordNote root_chord_note = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *root_chord_note_);
    }

    // optional .mead101.mead.RootChordQuality root_chord_quality = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *root_chord_quality_);
    }

    // optional double end_point = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 end_bar = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_end_bar());
    }

    // optional int32 start_bar = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_start_bar());
    }

    // optional double start_point = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HarmonyModulation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.HarmonyModulation)
  GOOGLE_DCHECK_NE(&from, this);
  const HarmonyModulation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HarmonyModulation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.HarmonyModulation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.HarmonyModulation)
    MergeFrom(*source);
  }
}

void HarmonyModulation::MergeFrom(const HarmonyModulation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.HarmonyModulation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_mode()->::mead101::mead::Mode::MergeFrom(from._internal_mode());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_root_chord_note()->::mead101::mead::RootChordNote::MergeFrom(from._internal_root_chord_note());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_root_chord_quality()->::mead101::mead::RootChordQuality::MergeFrom(from._internal_root_chord_quality());
    }
    if (cached_has_bits & 0x00000008u) {
      end_point_ = from.end_point_;
    }
    if (cached_has_bits & 0x00000010u) {
      end_bar_ = from.end_bar_;
    }
    if (cached_has_bits & 0x00000020u) {
      start_bar_ = from.start_bar_;
    }
    if (cached_has_bits & 0x00000040u) {
      start_point_ = from.start_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HarmonyModulation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.HarmonyModulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HarmonyModulation::CopyFrom(const HarmonyModulation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.HarmonyModulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HarmonyModulation::IsInitialized() const {
  return true;
}

void HarmonyModulation::InternalSwap(HarmonyModulation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HarmonyModulation, start_point_)
      + sizeof(HarmonyModulation::start_point_)
      - PROTOBUF_FIELD_OFFSET(HarmonyModulation, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HarmonyModulation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HashSumAlgorithmType::InitAsDefaultInstance() {
  ::mead101::mead::_HashSumAlgorithmType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::HashSumAlgorithmType*>(
      ::mead101::avs::HashSumAlgorithmType::internal_default_instance());
}
class HashSumAlgorithmType::_Internal {
 public:
  using HasBits = decltype(std::declval<HashSumAlgorithmType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::HashSumAlgorithmType& ext_value(const HashSumAlgorithmType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::HashSumAlgorithmType&
HashSumAlgorithmType::_Internal::ext_value(const HashSumAlgorithmType* msg) {
  return *msg->ext_value_;
}
void HashSumAlgorithmType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
HashSumAlgorithmType::HashSumAlgorithmType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.HashSumAlgorithmType)
}
HashSumAlgorithmType::HashSumAlgorithmType(const HashSumAlgorithmType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::HashSumAlgorithmType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.HashSumAlgorithmType)
}

void HashSumAlgorithmType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

HashSumAlgorithmType::~HashSumAlgorithmType() {
  // @@protoc_insertion_point(destructor:mead101.mead.HashSumAlgorithmType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HashSumAlgorithmType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void HashSumAlgorithmType::ArenaDtor(void* object) {
  HashSumAlgorithmType* _this = reinterpret_cast< HashSumAlgorithmType* >(object);
  (void)_this;
}
void HashSumAlgorithmType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HashSumAlgorithmType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HashSumAlgorithmType& HashSumAlgorithmType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void HashSumAlgorithmType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.HashSumAlgorithmType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HashSumAlgorithmType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.HashSumAlgorithmType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.HashSumAlgorithmType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.HashSumAlgorithmType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HashSumAlgorithmType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.HashSumAlgorithmType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.HashSumAlgorithmType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.HashSumAlgorithmType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.HashSumAlgorithmType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.HashSumAlgorithmType)
  return target;
}

size_t HashSumAlgorithmType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.HashSumAlgorithmType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.HashSumAlgorithmType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HashSumAlgorithmType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.HashSumAlgorithmType)
  GOOGLE_DCHECK_NE(&from, this);
  const HashSumAlgorithmType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HashSumAlgorithmType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.HashSumAlgorithmType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.HashSumAlgorithmType)
    MergeFrom(*source);
  }
}

void HashSumAlgorithmType::MergeFrom(const HashSumAlgorithmType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.HashSumAlgorithmType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::HashSumAlgorithmType::MergeFrom(from._internal_ext_value());
    }
  }
}

void HashSumAlgorithmType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.HashSumAlgorithmType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashSumAlgorithmType::CopyFrom(const HashSumAlgorithmType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.HashSumAlgorithmType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashSumAlgorithmType::IsInitialized() const {
  return true;
}

void HashSumAlgorithmType::InternalSwap(HashSumAlgorithmType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HashSumAlgorithmType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HistoricChartingInformation::InitAsDefaultInstance() {
  ::mead101::mead::_HistoricChartingInformation_default_instance_._instance.get_mutable()->duration_in_charts_ = const_cast< ::mead101::mead::Duration*>(
      ::mead101::mead::Duration::internal_default_instance());
  ::mead101::mead::_HistoricChartingInformation_default_instance_._instance.get_mutable()->territory_code_ = const_cast< ::mead101::mead::CurrentTerritoryCode*>(
      ::mead101::mead::CurrentTerritoryCode::internal_default_instance());
}
class HistoricChartingInformation::_Internal {
 public:
  using HasBits = decltype(std::declval<HistoricChartingInformation>()._has_bits_);
  static const ::mead101::mead::Duration& duration_in_charts(const HistoricChartingInformation* msg);
  static void set_has_duration_in_charts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::CurrentTerritoryCode& territory_code(const HistoricChartingInformation* msg);
  static void set_has_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_top_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::mead::Duration&
HistoricChartingInformation::_Internal::duration_in_charts(const HistoricChartingInformation* msg) {
  return *msg->duration_in_charts_;
}
const ::mead101::mead::CurrentTerritoryCode&
HistoricChartingInformation::_Internal::territory_code(const HistoricChartingInformation* msg) {
  return *msg->territory_code_;
}
HistoricChartingInformation::HistoricChartingInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  chart_entry_(arena),
  chart_name_(arena),
  comment_(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.HistoricChartingInformation)
}
HistoricChartingInformation::HistoricChartingInformation(const HistoricChartingInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      chart_entry_(from.chart_entry_),
      chart_name_(from.chart_name_),
      comment_(from.comment_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_duration_in_charts()) {
    duration_in_charts_ = new ::mead101::mead::Duration(*from.duration_in_charts_);
  } else {
    duration_in_charts_ = nullptr;
  }
  if (from._internal_has_territory_code()) {
    territory_code_ = new ::mead101::mead::CurrentTerritoryCode(*from.territory_code_);
  } else {
    territory_code_ = nullptr;
  }
  top_position_ = from.top_position_;
  // @@protoc_insertion_point(copy_constructor:mead101.mead.HistoricChartingInformation)
}

void HistoricChartingInformation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HistoricChartingInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&duration_in_charts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&top_position_) -
      reinterpret_cast<char*>(&duration_in_charts_)) + sizeof(top_position_));
}

HistoricChartingInformation::~HistoricChartingInformation() {
  // @@protoc_insertion_point(destructor:mead101.mead.HistoricChartingInformation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistoricChartingInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete duration_in_charts_;
  if (this != internal_default_instance()) delete territory_code_;
}

void HistoricChartingInformation::ArenaDtor(void* object) {
  HistoricChartingInformation* _this = reinterpret_cast< HistoricChartingInformation* >(object);
  (void)_this;
}
void HistoricChartingInformation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistoricChartingInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistoricChartingInformation& HistoricChartingInformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistoricChartingInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void HistoricChartingInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.HistoricChartingInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chart_entry_.Clear();
  chart_name_.Clear();
  comment_.Clear();
  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(duration_in_charts_ != nullptr);
      duration_in_charts_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(territory_code_ != nullptr);
      territory_code_->Clear();
    }
  }
  top_position_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoricChartingInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.ChartEntry chart_entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chart_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.ChartName chart_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chart_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.TextWithFormat comment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_comment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Duration duration_in_charts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration_in_charts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.HistoricChartingInformation.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.CurrentTerritoryCode territory_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 top_position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_top_position(&has_bits);
          top_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistoricChartingInformation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.HistoricChartingInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.ChartEntry chart_entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chart_entry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_chart_entry(i), target, stream);
  }

  // repeated .mead101.mead.ChartName chart_name = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chart_name_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_chart_name(i), target, stream);
  }

  // repeated .mead101.mead.TextWithFormat comment = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_comment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_comment(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.Duration duration_in_charts = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::duration_in_charts(this), target, stream);
  }

  // repeated string metadata_source_reference = 5;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.HistoricChartingInformation.metadata_source_reference");
    target = stream->WriteString(5, s, target);
  }

  // optional .mead101.mead.CurrentTerritoryCode territory_code = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::territory_code(this), target, stream);
  }

  // optional int32 top_position = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_top_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.HistoricChartingInformation)
  return target;
}

size_t HistoricChartingInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.HistoricChartingInformation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.ChartEntry chart_entry = 1;
  total_size += 1UL * this->_internal_chart_entry_size();
  for (const auto& msg : this->chart_entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.ChartName chart_name = 2;
  total_size += 1UL * this->_internal_chart_name_size();
  for (const auto& msg : this->chart_name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.TextWithFormat comment = 3;
  total_size += 1UL * this->_internal_comment_size();
  for (const auto& msg : this->comment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metadata_source_reference = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .mead101.mead.Duration duration_in_charts = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *duration_in_charts_);
    }

    // optional .mead101.mead.CurrentTerritoryCode territory_code = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *territory_code_);
    }

    // optional int32 top_position = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_top_position());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricChartingInformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.HistoricChartingInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricChartingInformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistoricChartingInformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.HistoricChartingInformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.HistoricChartingInformation)
    MergeFrom(*source);
  }
}

void HistoricChartingInformation::MergeFrom(const HistoricChartingInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.HistoricChartingInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chart_entry_.MergeFrom(from.chart_entry_);
  chart_name_.MergeFrom(from.chart_name_);
  comment_.MergeFrom(from.comment_);
  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_duration_in_charts()->::mead101::mead::Duration::MergeFrom(from._internal_duration_in_charts());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_territory_code()->::mead101::mead::CurrentTerritoryCode::MergeFrom(from._internal_territory_code());
    }
    if (cached_has_bits & 0x00000004u) {
      top_position_ = from.top_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistoricChartingInformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.HistoricChartingInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricChartingInformation::CopyFrom(const HistoricChartingInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.HistoricChartingInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricChartingInformation::IsInitialized() const {
  return true;
}

void HistoricChartingInformation::InternalSwap(HistoricChartingInformation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chart_entry_.InternalSwap(&other->chart_entry_);
  chart_name_.InternalSwap(&other->chart_name_);
  comment_.InternalSwap(&other->comment_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistoricChartingInformation, top_position_)
      + sizeof(HistoricChartingInformation::top_position_)
      - PROTOBUF_FIELD_OFFSET(HistoricChartingInformation, duration_in_charts_)>(
          reinterpret_cast<char*>(&duration_in_charts_),
          reinterpret_cast<char*>(&other->duration_in_charts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoricChartingInformation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HistoricChartingInformationForParty::InitAsDefaultInstance() {
  ::mead101::mead::_HistoricChartingInformationForParty_default_instance_._instance.get_mutable()->charted_release_ = const_cast< ::mead101::mead::Release*>(
      ::mead101::mead::Release::internal_default_instance());
  ::mead101::mead::_HistoricChartingInformationForParty_default_instance_._instance.get_mutable()->charted_resource_ = const_cast< ::mead101::mead::Resource*>(
      ::mead101::mead::Resource::internal_default_instance());
  ::mead101::mead::_HistoricChartingInformationForParty_default_instance_._instance.get_mutable()->charted_work_ = const_cast< ::mead101::mead::Work*>(
      ::mead101::mead::Work::internal_default_instance());
  ::mead101::mead::_HistoricChartingInformationForParty_default_instance_._instance.get_mutable()->duration_in_charts_ = const_cast< ::mead101::mead::Duration*>(
      ::mead101::mead::Duration::internal_default_instance());
  ::mead101::mead::_HistoricChartingInformationForParty_default_instance_._instance.get_mutable()->territory_code_ = const_cast< ::mead101::mead::CurrentTerritoryCode*>(
      ::mead101::mead::CurrentTerritoryCode::internal_default_instance());
}
class HistoricChartingInformationForParty::_Internal {
 public:
  using HasBits = decltype(std::declval<HistoricChartingInformationForParty>()._has_bits_);
  static const ::mead101::mead::Release& charted_release(const HistoricChartingInformationForParty* msg);
  static void set_has_charted_release(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::Resource& charted_resource(const HistoricChartingInformationForParty* msg);
  static void set_has_charted_resource(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::Work& charted_work(const HistoricChartingInformationForParty* msg);
  static void set_has_charted_work(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::Duration& duration_in_charts(const HistoricChartingInformationForParty* msg);
  static void set_has_duration_in_charts(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mead101::mead::CurrentTerritoryCode& territory_code(const HistoricChartingInformationForParty* msg);
  static void set_has_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_top_position(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::mead101::mead::Release&
HistoricChartingInformationForParty::_Internal::charted_release(const HistoricChartingInformationForParty* msg) {
  return *msg->charted_release_;
}
const ::mead101::mead::Resource&
HistoricChartingInformationForParty::_Internal::charted_resource(const HistoricChartingInformationForParty* msg) {
  return *msg->charted_resource_;
}
const ::mead101::mead::Work&
HistoricChartingInformationForParty::_Internal::charted_work(const HistoricChartingInformationForParty* msg) {
  return *msg->charted_work_;
}
const ::mead101::mead::Duration&
HistoricChartingInformationForParty::_Internal::duration_in_charts(const HistoricChartingInformationForParty* msg) {
  return *msg->duration_in_charts_;
}
const ::mead101::mead::CurrentTerritoryCode&
HistoricChartingInformationForParty::_Internal::territory_code(const HistoricChartingInformationForParty* msg) {
  return *msg->territory_code_;
}
HistoricChartingInformationForParty::HistoricChartingInformationForParty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  chart_entry_(arena),
  chart_name_(arena),
  comment_(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.HistoricChartingInformationForParty)
}
HistoricChartingInformationForParty::HistoricChartingInformationForParty(const HistoricChartingInformationForParty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      chart_entry_(from.chart_entry_),
      chart_name_(from.chart_name_),
      comment_(from.comment_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_charted_release()) {
    charted_release_ = new ::mead101::mead::Release(*from.charted_release_);
  } else {
    charted_release_ = nullptr;
  }
  if (from._internal_has_charted_resource()) {
    charted_resource_ = new ::mead101::mead::Resource(*from.charted_resource_);
  } else {
    charted_resource_ = nullptr;
  }
  if (from._internal_has_charted_work()) {
    charted_work_ = new ::mead101::mead::Work(*from.charted_work_);
  } else {
    charted_work_ = nullptr;
  }
  if (from._internal_has_duration_in_charts()) {
    duration_in_charts_ = new ::mead101::mead::Duration(*from.duration_in_charts_);
  } else {
    duration_in_charts_ = nullptr;
  }
  if (from._internal_has_territory_code()) {
    territory_code_ = new ::mead101::mead::CurrentTerritoryCode(*from.territory_code_);
  } else {
    territory_code_ = nullptr;
  }
  top_position_ = from.top_position_;
  // @@protoc_insertion_point(copy_constructor:mead101.mead.HistoricChartingInformationForParty)
}

void HistoricChartingInformationForParty::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HistoricChartingInformationForParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&charted_release_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&top_position_) -
      reinterpret_cast<char*>(&charted_release_)) + sizeof(top_position_));
}

HistoricChartingInformationForParty::~HistoricChartingInformationForParty() {
  // @@protoc_insertion_point(destructor:mead101.mead.HistoricChartingInformationForParty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistoricChartingInformationForParty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete charted_release_;
  if (this != internal_default_instance()) delete charted_resource_;
  if (this != internal_default_instance()) delete charted_work_;
  if (this != internal_default_instance()) delete duration_in_charts_;
  if (this != internal_default_instance()) delete territory_code_;
}

void HistoricChartingInformationForParty::ArenaDtor(void* object) {
  HistoricChartingInformationForParty* _this = reinterpret_cast< HistoricChartingInformationForParty* >(object);
  (void)_this;
}
void HistoricChartingInformationForParty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistoricChartingInformationForParty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistoricChartingInformationForParty& HistoricChartingInformationForParty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistoricChartingInformationForParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void HistoricChartingInformationForParty::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.HistoricChartingInformationForParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chart_entry_.Clear();
  chart_name_.Clear();
  comment_.Clear();
  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(charted_release_ != nullptr);
      charted_release_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(charted_resource_ != nullptr);
      charted_resource_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(charted_work_ != nullptr);
      charted_work_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(duration_in_charts_ != nullptr);
      duration_in_charts_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(territory_code_ != nullptr);
      territory_code_->Clear();
    }
  }
  top_position_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoricChartingInformationForParty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.ChartEntry chart_entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chart_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.ChartName chart_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chart_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Release charted_release = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_charted_release(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Resource charted_resource = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_charted_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Work charted_work = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_charted_work(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.TextWithFormat comment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_comment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Duration duration_in_charts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration_in_charts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.HistoricChartingInformationForParty.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.CurrentTerritoryCode territory_code = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 top_position = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_top_position(&has_bits);
          top_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistoricChartingInformationForParty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.HistoricChartingInformationForParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.ChartEntry chart_entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chart_entry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_chart_entry(i), target, stream);
  }

  // repeated .mead101.mead.ChartName chart_name = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chart_name_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_chart_name(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.Release charted_release = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::charted_release(this), target, stream);
  }

  // optional .mead101.mead.Resource charted_resource = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::charted_resource(this), target, stream);
  }

  // optional .mead101.mead.Work charted_work = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::charted_work(this), target, stream);
  }

  // repeated .mead101.mead.TextWithFormat comment = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_comment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_comment(i), target, stream);
  }

  // optional .mead101.mead.Duration duration_in_charts = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::duration_in_charts(this), target, stream);
  }

  // repeated string metadata_source_reference = 8;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.HistoricChartingInformationForParty.metadata_source_reference");
    target = stream->WriteString(8, s, target);
  }

  // optional .mead101.mead.CurrentTerritoryCode territory_code = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::territory_code(this), target, stream);
  }

  // optional int32 top_position = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_top_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.HistoricChartingInformationForParty)
  return target;
}

size_t HistoricChartingInformationForParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.HistoricChartingInformationForParty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.ChartEntry chart_entry = 1;
  total_size += 1UL * this->_internal_chart_entry_size();
  for (const auto& msg : this->chart_entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.ChartName chart_name = 2;
  total_size += 1UL * this->_internal_chart_name_size();
  for (const auto& msg : this->chart_name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.TextWithFormat comment = 6;
  total_size += 1UL * this->_internal_comment_size();
  for (const auto& msg : this->comment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metadata_source_reference = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .mead101.mead.Release charted_release = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *charted_release_);
    }

    // optional .mead101.mead.Resource charted_resource = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *charted_resource_);
    }

    // optional .mead101.mead.Work charted_work = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *charted_work_);
    }

    // optional .mead101.mead.Duration duration_in_charts = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *duration_in_charts_);
    }

    // optional .mead101.mead.CurrentTerritoryCode territory_code = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *territory_code_);
    }

    // optional int32 top_position = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_top_position());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricChartingInformationForParty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.HistoricChartingInformationForParty)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricChartingInformationForParty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistoricChartingInformationForParty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.HistoricChartingInformationForParty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.HistoricChartingInformationForParty)
    MergeFrom(*source);
  }
}

void HistoricChartingInformationForParty::MergeFrom(const HistoricChartingInformationForParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.HistoricChartingInformationForParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chart_entry_.MergeFrom(from.chart_entry_);
  chart_name_.MergeFrom(from.chart_name_);
  comment_.MergeFrom(from.comment_);
  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_charted_release()->::mead101::mead::Release::MergeFrom(from._internal_charted_release());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_charted_resource()->::mead101::mead::Resource::MergeFrom(from._internal_charted_resource());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_charted_work()->::mead101::mead::Work::MergeFrom(from._internal_charted_work());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_duration_in_charts()->::mead101::mead::Duration::MergeFrom(from._internal_duration_in_charts());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_territory_code()->::mead101::mead::CurrentTerritoryCode::MergeFrom(from._internal_territory_code());
    }
    if (cached_has_bits & 0x00000020u) {
      top_position_ = from.top_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistoricChartingInformationForParty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.HistoricChartingInformationForParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricChartingInformationForParty::CopyFrom(const HistoricChartingInformationForParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.HistoricChartingInformationForParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricChartingInformationForParty::IsInitialized() const {
  return true;
}

void HistoricChartingInformationForParty::InternalSwap(HistoricChartingInformationForParty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chart_entry_.InternalSwap(&other->chart_entry_);
  chart_name_.InternalSwap(&other->chart_name_);
  comment_.InternalSwap(&other->comment_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistoricChartingInformationForParty, top_position_)
      + sizeof(HistoricChartingInformationForParty::top_position_)
      - PROTOBUF_FIELD_OFFSET(HistoricChartingInformationForParty, charted_release_)>(
          reinterpret_cast<char*>(&charted_release_),
          reinterpret_cast<char*>(&other->charted_release_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoricChartingInformationForParty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Icon::InitAsDefaultInstance() {
}
class Icon::_Internal {
 public:
  using HasBits = decltype(std::declval<Icon>()._has_bits_);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Icon::Icon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  any_attribute_value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Icon)
}
Icon::Icon(const Icon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      any_attribute_value_(from.any_attribute_value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Icon)
}

void Icon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Icon_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Icon::~Icon() {
  // @@protoc_insertion_point(destructor:mead101.mead.Icon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Icon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Icon::ArenaDtor(void* object) {
  Icon* _this = reinterpret_cast< Icon* >(object);
  (void)_this;
}
void Icon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Icon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Icon& Icon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Icon_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Icon::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Icon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  any_attribute_value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ext_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Icon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string any_attribute_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_any_attribute_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Icon.any_attribute_value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Icon.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Icon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Icon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  for (int i = 0, n = this->_internal_any_attribute_value_size(); i < n; i++) {
    const auto& s = this->_internal_any_attribute_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Icon.any_attribute_value");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string ext_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Icon.ext_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Icon)
  return target;
}

size_t Icon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Icon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(any_attribute_value_.size());
  for (int i = 0, n = any_attribute_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      any_attribute_value_.Get(i));
  }

  // optional string ext_value = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ext_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Icon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Icon)
  GOOGLE_DCHECK_NE(&from, this);
  const Icon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Icon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Icon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Icon)
    MergeFrom(*source);
  }
}

void Icon::MergeFrom(const Icon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Icon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  any_attribute_value_.MergeFrom(from.any_attribute_value_);
  if (from._internal_has_ext_value()) {
    _internal_set_ext_value(from._internal_ext_value());
  }
}

void Icon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Icon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Icon::CopyFrom(const Icon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Icon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Icon::IsInitialized() const {
  return true;
}

void Icon::InternalSwap(Icon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  any_attribute_value_.InternalSwap(&other->any_attribute_value_);
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Icon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Id::InitAsDefaultInstance() {
}
class Id::_Internal {
 public:
  using HasBits = decltype(std::declval<Id>()._has_bits_);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Id::Id(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  any_attribute_value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Id)
}
Id::Id(const Id& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      any_attribute_value_(from.any_attribute_value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Id)
}

void Id::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Id_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Id::~Id() {
  // @@protoc_insertion_point(destructor:mead101.mead.Id)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Id::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Id::ArenaDtor(void* object) {
  Id* _this = reinterpret_cast< Id* >(object);
  (void)_this;
}
void Id::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Id::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Id& Id::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Id_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Id::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  any_attribute_value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ext_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Id::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string any_attribute_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_any_attribute_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Id.any_attribute_value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Id.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Id::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  for (int i = 0, n = this->_internal_any_attribute_value_size(); i < n; i++) {
    const auto& s = this->_internal_any_attribute_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Id.any_attribute_value");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string ext_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Id.ext_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Id)
  return target;
}

size_t Id::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Id)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(any_attribute_value_.size());
  for (int i = 0, n = any_attribute_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      any_attribute_value_.Get(i));
  }

  // optional string ext_value = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ext_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Id::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Id)
  GOOGLE_DCHECK_NE(&from, this);
  const Id* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Id>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Id)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Id)
    MergeFrom(*source);
  }
}

void Id::MergeFrom(const Id& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Id)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  any_attribute_value_.MergeFrom(from.any_attribute_value_);
  if (from._internal_has_ext_value()) {
    _internal_set_ext_value(from._internal_ext_value());
  }
}

void Id::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Id::CopyFrom(const Id& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Id::IsInitialized() const {
  return true;
}

void Id::InternalSwap(Id* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  any_attribute_value_.InternalSwap(&other->any_attribute_value_);
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Id::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Image::InitAsDefaultInstance() {
  ::mead101::mead::_Image_default_instance_._instance.get_mutable()->file_ = const_cast< ::mead101::mead::File*>(
      ::mead101::mead::File::internal_default_instance());
}
class Image::_Internal {
 public:
  using HasBits = decltype(std::declval<Image>()._has_bits_);
  static const ::mead101::mead::File& file(const Image* msg);
  static void set_has_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mead101::mead::File&
Image::_Internal::file(const Image* msg) {
  return *msg->file_;
}
Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  image_type_(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      image_type_(from.image_type_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_file()) {
    file_ = new ::mead101::mead::File(*from.file_);
  } else {
    file_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Image)
}

void Image::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Image_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  file_ = nullptr;
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:mead101.mead.Image)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete file_;
}

void Image::ArenaDtor(void* object) {
  Image* _this = reinterpret_cast< Image* >(object);
  (void)_this;
}
void Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Image& Image::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Image_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_type_.Clear();
  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(file_ != nullptr);
    file_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.File file = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.ImageType image_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Image.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Image::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.File file = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::file(this), target, stream);
  }

  // repeated .mead101.mead.ImageType image_type = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_image_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_image_type(i), target, stream);
  }

  // repeated string metadata_source_reference = 3;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Image.metadata_source_reference");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Image)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.ImageType image_type = 2;
  total_size += 1UL * this->_internal_image_type_size();
  for (const auto& msg : this->image_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metadata_source_reference = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // optional .mead101.mead.File file = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *file_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Image::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Image>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Image)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_type_.MergeFrom(from.image_type_);
  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  if (from._internal_has_file()) {
    _internal_mutable_file()->::mead101::mead::File::MergeFrom(from._internal_file());
  }
}

void Image::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  image_type_.InternalSwap(&other->image_type_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  swap(file_, other->file_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageType::InitAsDefaultInstance() {
  ::mead101::mead::_ImageType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::ImageType*>(
      ::mead101::avs::ImageType::internal_default_instance());
}
class ImageType::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::ImageType& ext_value(const ImageType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::ImageType&
ImageType::_Internal::ext_value(const ImageType* msg) {
  return *msg->ext_value_;
}
void ImageType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ImageType::ImageType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ImageType)
}
ImageType::ImageType(const ImageType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::ImageType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ImageType)
}

void ImageType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

ImageType::~ImageType() {
  // @@protoc_insertion_point(destructor:mead101.mead.ImageType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void ImageType::ArenaDtor(void* object) {
  ImageType* _this = reinterpret_cast< ImageType* >(object);
  (void)_this;
}
void ImageType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageType& ImageType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ImageType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ImageType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ImageType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ImageType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.ImageType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ImageType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ImageType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ImageType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.ImageType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ImageType)
  return target;
}

size_t ImageType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ImageType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.ImageType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ImageType)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ImageType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ImageType)
    MergeFrom(*source);
  }
}

void ImageType::MergeFrom(const ImageType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ImageType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::ImageType::MergeFrom(from._internal_ext_value());
    }
  }
}

void ImageType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ImageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageType::CopyFrom(const ImageType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ImageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageType::IsInitialized() const {
  return true;
}

void ImageType::InternalSwap(ImageType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Instrument::InitAsDefaultInstance() {
  ::mead101::mead::_Instrument_default_instance_._instance.get_mutable()->value_ = const_cast< ::mead101::mead::InstrumentValue*>(
      ::mead101::mead::InstrumentValue::internal_default_instance());
}
class Instrument::_Internal {
 public:
  using HasBits = decltype(std::declval<Instrument>()._has_bits_);
  static const ::mead101::mead::InstrumentValue& value(const Instrument* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mead101::mead::InstrumentValue&
Instrument::_Internal::value(const Instrument* msg) {
  return *msg->value_;
}
Instrument::Instrument(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Instrument)
}
Instrument::Instrument(const Instrument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::mead101::mead::InstrumentValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Instrument)
}

void Instrument::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Instrument_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  value_ = nullptr;
}

Instrument::~Instrument() {
  // @@protoc_insertion_point(destructor:mead101.mead.Instrument)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Instrument::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void Instrument::ArenaDtor(void* object) {
  Instrument* _this = reinterpret_cast< Instrument* >(object);
  (void)_this;
}
void Instrument::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Instrument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Instrument& Instrument::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Instrument_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Instrument::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Instrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(value_ != nullptr);
    value_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Instrument::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string metadata_source_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Instrument.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.InstrumentValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Instrument::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Instrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Instrument.metadata_source_reference");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.InstrumentValue value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Instrument)
  return target;
}

size_t Instrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Instrument)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // optional .mead101.mead.InstrumentValue value = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Instrument::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Instrument)
  GOOGLE_DCHECK_NE(&from, this);
  const Instrument* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Instrument>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Instrument)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Instrument)
    MergeFrom(*source);
  }
}

void Instrument::MergeFrom(const Instrument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Instrument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  if (from._internal_has_value()) {
    _internal_mutable_value()->::mead101::mead::InstrumentValue::MergeFrom(from._internal_value());
  }
}

void Instrument::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Instrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Instrument::CopyFrom(const Instrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Instrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instrument::IsInitialized() const {
  return true;
}

void Instrument::InternalSwap(Instrument* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Instrument::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstrumentUsed::InitAsDefaultInstance() {
  ::mead101::mead::_InstrumentUsed_default_instance_._instance.get_mutable()->value_ = const_cast< ::mead101::mead::InstrumentValue*>(
      ::mead101::mead::InstrumentValue::internal_default_instance());
}
class InstrumentUsed::_Internal {
 public:
  using HasBits = decltype(std::declval<InstrumentUsed>()._has_bits_);
  static void set_has_is_featured(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::InstrumentValue& value(const InstrumentUsed* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mead101::mead::InstrumentValue&
InstrumentUsed::_Internal::value(const InstrumentUsed* msg) {
  return *msg->value_;
}
InstrumentUsed::InstrumentUsed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.InstrumentUsed)
}
InstrumentUsed::InstrumentUsed(const InstrumentUsed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::mead101::mead::InstrumentValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  is_featured_ = from.is_featured_;
  // @@protoc_insertion_point(copy_constructor:mead101.mead.InstrumentUsed)
}

void InstrumentUsed::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrumentUsed_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_featured_) -
      reinterpret_cast<char*>(&value_)) + sizeof(is_featured_));
}

InstrumentUsed::~InstrumentUsed() {
  // @@protoc_insertion_point(destructor:mead101.mead.InstrumentUsed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstrumentUsed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void InstrumentUsed::ArenaDtor(void* object) {
  InstrumentUsed* _this = reinterpret_cast< InstrumentUsed* >(object);
  (void)_this;
}
void InstrumentUsed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentUsed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentUsed& InstrumentUsed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrumentUsed_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void InstrumentUsed::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.InstrumentUsed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(value_ != nullptr);
    value_->Clear();
  }
  is_featured_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentUsed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_featured = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_featured(&has_bits);
          is_featured_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.InstrumentUsed.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.InstrumentValue value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentUsed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.InstrumentUsed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_featured = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_featured(), target);
  }

  // repeated string metadata_source_reference = 2;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.InstrumentUsed.metadata_source_reference");
    target = stream->WriteString(2, s, target);
  }

  // optional .mead101.mead.InstrumentValue value = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.InstrumentUsed)
  return target;
}

size_t InstrumentUsed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.InstrumentUsed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .mead101.mead.InstrumentValue value = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_);
    }

    // optional bool is_featured = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentUsed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.InstrumentUsed)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentUsed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrumentUsed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.InstrumentUsed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.InstrumentUsed)
    MergeFrom(*source);
  }
}

void InstrumentUsed::MergeFrom(const InstrumentUsed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.InstrumentUsed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_value()->::mead101::mead::InstrumentValue::MergeFrom(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      is_featured_ = from.is_featured_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InstrumentUsed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.InstrumentUsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentUsed::CopyFrom(const InstrumentUsed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.InstrumentUsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentUsed::IsInitialized() const {
  return true;
}

void InstrumentUsed::InternalSwap(InstrumentUsed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstrumentUsed, is_featured_)
      + sizeof(InstrumentUsed::is_featured_)
      - PROTOBUF_FIELD_OFFSET(InstrumentUsed, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentUsed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstrumentValue::InitAsDefaultInstance() {
  ::mead101::mead::_InstrumentValue_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::InstrumentType*>(
      ::mead101::avs::InstrumentType::internal_default_instance());
}
class InstrumentValue::_Internal {
 public:
  using HasBits = decltype(std::declval<InstrumentValue>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::InstrumentType& ext_value(const InstrumentValue* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::InstrumentType&
InstrumentValue::_Internal::ext_value(const InstrumentValue* msg) {
  return *msg->ext_value_;
}
void InstrumentValue::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
InstrumentValue::InstrumentValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.InstrumentValue)
}
InstrumentValue::InstrumentValue(const InstrumentValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::InstrumentType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.InstrumentValue)
}

void InstrumentValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrumentValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

InstrumentValue::~InstrumentValue() {
  // @@protoc_insertion_point(destructor:mead101.mead.InstrumentValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstrumentValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void InstrumentValue::ArenaDtor(void* object) {
  InstrumentValue* _this = reinterpret_cast< InstrumentValue* >(object);
  (void)_this;
}
void InstrumentValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentValue& InstrumentValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrumentValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void InstrumentValue::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.InstrumentValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.InstrumentValue.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.InstrumentValue.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.InstrumentType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.InstrumentValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.InstrumentValue.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.InstrumentValue.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.InstrumentType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.InstrumentValue)
  return target;
}

size_t InstrumentValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.InstrumentValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.InstrumentType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.InstrumentValue)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrumentValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.InstrumentValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.InstrumentValue)
    MergeFrom(*source);
  }
}

void InstrumentValue::MergeFrom(const InstrumentValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.InstrumentValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::InstrumentType::MergeFrom(from._internal_ext_value());
    }
  }
}

void InstrumentValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.InstrumentValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentValue::CopyFrom(const InstrumentValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.InstrumentValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentValue::IsInitialized() const {
  return true;
}

void InstrumentValue::InternalSwap(InstrumentValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Link::InitAsDefaultInstance() {
}
class Link::_Internal {
 public:
  using HasBits = decltype(std::declval<Link>()._has_bits_);
  static void set_has_href(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hreflang(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Link::Link(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  any_attribute_value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Link)
}
Link::Link(const Link& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      any_attribute_value_(from.any_attribute_value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  href_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_href()) {
    href_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_href(),
      GetArena());
  }
  hreflang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hreflang()) {
    hreflang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hreflang(),
      GetArena());
  }
  rel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rel()) {
    rel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rel(),
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  length_ = from.length_;
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Link)
}

void Link::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Link_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  href_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hreflang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  length_ = 0u;
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:mead101.mead.Link)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Link::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  href_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hreflang_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Link::ArenaDtor(void* object) {
  Link* _this = reinterpret_cast< Link* >(object);
  (void)_this;
}
void Link::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Link::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Link& Link::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Link_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Link::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Link)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  any_attribute_value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      href_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      hreflang_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      rel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      type_.ClearNonDefaultToEmpty();
    }
  }
  length_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Link::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string any_attribute_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_any_attribute_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Link.any_attribute_value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string href = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_href();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Link.href");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hreflang = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_hreflang();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Link.hreflang");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_rel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Link.rel");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Link.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Link.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Link::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Link)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  for (int i = 0, n = this->_internal_any_attribute_value_size(); i < n; i++) {
    const auto& s = this->_internal_any_attribute_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Link.any_attribute_value");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string href = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_href().data(), static_cast<int>(this->_internal_href().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Link.href");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_href(), target);
  }

  // optional string hreflang = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hreflang().data(), static_cast<int>(this->_internal_hreflang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Link.hreflang");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hreflang(), target);
  }

  // optional uint32 length = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_length(), target);
  }

  // optional string rel = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rel().data(), static_cast<int>(this->_internal_rel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Link.rel");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_rel(), target);
  }

  // optional string title = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Link.title");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_title(), target);
  }

  // optional string type = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Link.type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Link)
  return target;
}

size_t Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Link)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(any_attribute_value_.size());
  for (int i = 0, n = any_attribute_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      any_attribute_value_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string href = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_href());
    }

    // optional string hreflang = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hreflang());
    }

    // optional string rel = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rel());
    }

    // optional string title = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string type = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional uint32 length = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_length());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Link::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Link)
  GOOGLE_DCHECK_NE(&from, this);
  const Link* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Link>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Link)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Link)
    MergeFrom(*source);
  }
}

void Link::MergeFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Link)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  any_attribute_value_.MergeFrom(from.any_attribute_value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_href(from._internal_href());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_hreflang(from._internal_hreflang());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_rel(from._internal_rel());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000020u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Link::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Link::CopyFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {
  return true;
}

void Link::InternalSwap(Link* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  any_attribute_value_.InternalSwap(&other->any_attribute_value_);
  href_.Swap(&other->href_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hreflang_.Swap(&other->hreflang_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rel_.Swap(&other->rel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(length_, other->length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Link::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocationAndDateOfSession::InitAsDefaultInstance() {
  ::mead101::mead::_LocationAndDateOfSession_default_instance_._instance.get_mutable()->comment_ = const_cast< ::mead101::mead::TextWithFormat*>(
      ::mead101::mead::TextWithFormat::internal_default_instance());
  ::mead101::mead::_LocationAndDateOfSession_default_instance_._instance.get_mutable()->period_ = const_cast< ::mead101::mead::Period*>(
      ::mead101::mead::Period::internal_default_instance());
}
class LocationAndDateOfSession::_Internal {
 public:
  using HasBits = decltype(std::declval<LocationAndDateOfSession>()._has_bits_);
  static const ::mead101::mead::TextWithFormat& comment(const LocationAndDateOfSession* msg);
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::Period& period(const LocationAndDateOfSession* msg);
  static void set_has_period(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mead101::mead::TextWithFormat&
LocationAndDateOfSession::_Internal::comment(const LocationAndDateOfSession* msg) {
  return *msg->comment_;
}
const ::mead101::mead::Period&
LocationAndDateOfSession::_Internal::period(const LocationAndDateOfSession* msg) {
  return *msg->period_;
}
LocationAndDateOfSession::LocationAndDateOfSession(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  contributor_(arena),
  metadata_source_reference_(arena),
  session_type_(arena),
  venue_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.LocationAndDateOfSession)
}
LocationAndDateOfSession::LocationAndDateOfSession(const LocationAndDateOfSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      contributor_(from.contributor_),
      metadata_source_reference_(from.metadata_source_reference_),
      session_type_(from.session_type_),
      venue_(from.venue_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_comment()) {
    comment_ = new ::mead101::mead::TextWithFormat(*from.comment_);
  } else {
    comment_ = nullptr;
  }
  if (from._internal_has_period()) {
    period_ = new ::mead101::mead::Period(*from.period_);
  } else {
    period_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.LocationAndDateOfSession)
}

void LocationAndDateOfSession::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocationAndDateOfSession_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&comment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_) -
      reinterpret_cast<char*>(&comment_)) + sizeof(period_));
}

LocationAndDateOfSession::~LocationAndDateOfSession() {
  // @@protoc_insertion_point(destructor:mead101.mead.LocationAndDateOfSession)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocationAndDateOfSession::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete comment_;
  if (this != internal_default_instance()) delete period_;
}

void LocationAndDateOfSession::ArenaDtor(void* object) {
  LocationAndDateOfSession* _this = reinterpret_cast< LocationAndDateOfSession* >(object);
  (void)_this;
}
void LocationAndDateOfSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocationAndDateOfSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocationAndDateOfSession& LocationAndDateOfSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocationAndDateOfSession_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void LocationAndDateOfSession::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.LocationAndDateOfSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contributor_.Clear();
  metadata_source_reference_.Clear();
  session_type_.Clear();
  venue_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(comment_ != nullptr);
      comment_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(period_ != nullptr);
      period_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocationAndDateOfSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.TextWithFormat comment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_comment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.PartyWithRole contributor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contributor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.LocationAndDateOfSession.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Period period = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.SessionType session_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_session_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Venue venue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_venue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocationAndDateOfSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.LocationAndDateOfSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.TextWithFormat comment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::comment(this), target, stream);
  }

  // repeated .mead101.mead.PartyWithRole contributor = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contributor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_contributor(i), target, stream);
  }

  // repeated string metadata_source_reference = 3;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.LocationAndDateOfSession.metadata_source_reference");
    target = stream->WriteString(3, s, target);
  }

  // optional .mead101.mead.Period period = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::period(this), target, stream);
  }

  // repeated .mead101.mead.SessionType session_type = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_session_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_session_type(i), target, stream);
  }

  // repeated .mead101.mead.Venue venue = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_venue_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_venue(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.LocationAndDateOfSession)
  return target;
}

size_t LocationAndDateOfSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.LocationAndDateOfSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.PartyWithRole contributor = 2;
  total_size += 1UL * this->_internal_contributor_size();
  for (const auto& msg : this->contributor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metadata_source_reference = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // repeated .mead101.mead.SessionType session_type = 5;
  total_size += 1UL * this->_internal_session_type_size();
  for (const auto& msg : this->session_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Venue venue = 6;
  total_size += 1UL * this->_internal_venue_size();
  for (const auto& msg : this->venue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .mead101.mead.TextWithFormat comment = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *comment_);
    }

    // optional .mead101.mead.Period period = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *period_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationAndDateOfSession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.LocationAndDateOfSession)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationAndDateOfSession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocationAndDateOfSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.LocationAndDateOfSession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.LocationAndDateOfSession)
    MergeFrom(*source);
  }
}

void LocationAndDateOfSession::MergeFrom(const LocationAndDateOfSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.LocationAndDateOfSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contributor_.MergeFrom(from.contributor_);
  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  session_type_.MergeFrom(from.session_type_);
  venue_.MergeFrom(from.venue_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_comment()->::mead101::mead::TextWithFormat::MergeFrom(from._internal_comment());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_period()->::mead101::mead::Period::MergeFrom(from._internal_period());
    }
  }
}

void LocationAndDateOfSession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.LocationAndDateOfSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationAndDateOfSession::CopyFrom(const LocationAndDateOfSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.LocationAndDateOfSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationAndDateOfSession::IsInitialized() const {
  return true;
}

void LocationAndDateOfSession::InternalSwap(LocationAndDateOfSession* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contributor_.InternalSwap(&other->contributor_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  session_type_.InternalSwap(&other->session_type_);
  venue_.InternalSwap(&other->venue_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocationAndDateOfSession, period_)
      + sizeof(LocationAndDateOfSession::period_)
      - PROTOBUF_FIELD_OFFSET(LocationAndDateOfSession, comment_)>(
          reinterpret_cast<char*>(&comment_),
          reinterpret_cast<char*>(&other->comment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationAndDateOfSession::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Logo::InitAsDefaultInstance() {
}
class Logo::_Internal {
 public:
  using HasBits = decltype(std::declval<Logo>()._has_bits_);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Logo::Logo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  any_attribute_value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Logo)
}
Logo::Logo(const Logo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      any_attribute_value_(from.any_attribute_value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Logo)
}

void Logo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Logo_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Logo::~Logo() {
  // @@protoc_insertion_point(destructor:mead101.mead.Logo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Logo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Logo::ArenaDtor(void* object) {
  Logo* _this = reinterpret_cast< Logo* >(object);
  (void)_this;
}
void Logo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Logo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Logo& Logo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Logo_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Logo::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Logo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  any_attribute_value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ext_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Logo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string any_attribute_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_any_attribute_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Logo.any_attribute_value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Logo.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Logo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Logo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  for (int i = 0, n = this->_internal_any_attribute_value_size(); i < n; i++) {
    const auto& s = this->_internal_any_attribute_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Logo.any_attribute_value");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string ext_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Logo.ext_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Logo)
  return target;
}

size_t Logo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Logo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(any_attribute_value_.size());
  for (int i = 0, n = any_attribute_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      any_attribute_value_.Get(i));
  }

  // optional string ext_value = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ext_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Logo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Logo)
  GOOGLE_DCHECK_NE(&from, this);
  const Logo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Logo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Logo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Logo)
    MergeFrom(*source);
  }
}

void Logo::MergeFrom(const Logo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Logo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  any_attribute_value_.MergeFrom(from.any_attribute_value_);
  if (from._internal_has_ext_value()) {
    _internal_set_ext_value(from._internal_ext_value());
  }
}

void Logo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Logo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logo::CopyFrom(const Logo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Logo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logo::IsInitialized() const {
  return true;
}

void Logo::InternalSwap(Logo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  any_attribute_value_.InternalSwap(&other->any_attribute_value_);
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Logo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Lyrics::InitAsDefaultInstance() {
  ::mead101::mead::_Lyrics_default_instance_._instance.get_mutable()->lyrics_type_ = const_cast< ::mead101::avs::LyricsType*>(
      ::mead101::avs::LyricsType::internal_default_instance());
  ::mead101::mead::_Lyrics_default_instance_._instance.get_mutable()->text_ = const_cast< ::mead101::mead::LyricsText*>(
      ::mead101::mead::LyricsText::internal_default_instance());
}
class Lyrics::_Internal {
 public:
  using HasBits = decltype(std::declval<Lyrics>()._has_bits_);
  static void set_has_is_misquoted(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mead101::avs::LyricsType& lyrics_type(const Lyrics* msg);
  static void set_has_lyrics_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lyrics_type_namespace(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lyrics_type_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::mead101::mead::LyricsText& text(const Lyrics* msg);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mead101::avs::LyricsType&
Lyrics::_Internal::lyrics_type(const Lyrics* msg) {
  return *msg->lyrics_type_;
}
const ::mead101::mead::LyricsText&
Lyrics::_Internal::text(const Lyrics* msg) {
  return *msg->text_;
}
void Lyrics::clear_lyrics_type() {
  if (lyrics_type_ != nullptr) lyrics_type_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
Lyrics::Lyrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_reference_(arena),
  pronunciation_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Lyrics)
}
Lyrics::Lyrics(const Lyrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metadata_source_reference_(from.metadata_source_reference_),
      pronunciation_(from.pronunciation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lyrics_type_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lyrics_type_namespace()) {
    lyrics_type_namespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lyrics_type_namespace(),
      GetArena());
  }
  lyrics_type_user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lyrics_type_user_defined_value()) {
    lyrics_type_user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lyrics_type_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_lyrics_type()) {
    lyrics_type_ = new ::mead101::avs::LyricsType(*from.lyrics_type_);
  } else {
    lyrics_type_ = nullptr;
  }
  if (from._internal_has_text()) {
    text_ = new ::mead101::mead::LyricsText(*from.text_);
  } else {
    text_ = nullptr;
  }
  ::memcpy(&is_misquoted_, &from.is_misquoted_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&is_misquoted_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Lyrics)
}

void Lyrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Lyrics_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  lyrics_type_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lyrics_type_user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lyrics_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&lyrics_type_)) + sizeof(sequence_number_));
}

Lyrics::~Lyrics() {
  // @@protoc_insertion_point(destructor:mead101.mead.Lyrics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Lyrics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  lyrics_type_namespace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lyrics_type_user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete lyrics_type_;
  if (this != internal_default_instance()) delete text_;
}

void Lyrics::ArenaDtor(void* object) {
  Lyrics* _this = reinterpret_cast< Lyrics* >(object);
  (void)_this;
}
void Lyrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Lyrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lyrics& Lyrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lyrics_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Lyrics::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Lyrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_reference_.Clear();
  pronunciation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      lyrics_type_namespace_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      lyrics_type_user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lyrics_type_ != nullptr);
      lyrics_type_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(text_ != nullptr);
      text_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&is_misquoted_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_number_) -
        reinterpret_cast<char*>(&is_misquoted_)) + sizeof(sequence_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lyrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_misquoted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_misquoted(&has_bits);
          is_misquoted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.LyricsType lyrics_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lyrics_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lyrics_type_namespace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_lyrics_type_namespace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Lyrics.lyrics_type_namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lyrics_type_user_defined_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_lyrics_type_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Lyrics.lyrics_type_user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Lyrics.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Pronunciation pronunciation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pronunciation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 sequence_number = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.LyricsText text = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lyrics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Lyrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_misquoted = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_misquoted(), target);
  }

  // optional .mead101.avs.LyricsType lyrics_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lyrics_type(this), target, stream);
  }

  // optional string lyrics_type_namespace = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lyrics_type_namespace().data(), static_cast<int>(this->_internal_lyrics_type_namespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Lyrics.lyrics_type_namespace");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lyrics_type_namespace(), target);
  }

  // optional string lyrics_type_user_defined_value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lyrics_type_user_defined_value().data(), static_cast<int>(this->_internal_lyrics_type_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Lyrics.lyrics_type_user_defined_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_lyrics_type_user_defined_value(), target);
  }

  // repeated string metadata_source_reference = 5;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Lyrics.metadata_source_reference");
    target = stream->WriteString(5, s, target);
  }

  // repeated .mead101.mead.Pronunciation pronunciation = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pronunciation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_pronunciation(i), target, stream);
  }

  // optional int32 sequence_number = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_sequence_number(), target);
  }

  // optional .mead101.mead.LyricsText text = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::text(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Lyrics)
  return target;
}

size_t Lyrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Lyrics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // repeated .mead101.mead.Pronunciation pronunciation = 6;
  total_size += 1UL * this->_internal_pronunciation_size();
  for (const auto& msg : this->pronunciation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string lyrics_type_namespace = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lyrics_type_namespace());
    }

    // optional string lyrics_type_user_defined_value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lyrics_type_user_defined_value());
    }

    // optional .mead101.avs.LyricsType lyrics_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lyrics_type_);
    }

    // optional .mead101.mead.LyricsText text = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *text_);
    }

    // optional bool is_misquoted = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 sequence_number = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sequence_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lyrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Lyrics)
  GOOGLE_DCHECK_NE(&from, this);
  const Lyrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lyrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Lyrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Lyrics)
    MergeFrom(*source);
  }
}

void Lyrics::MergeFrom(const Lyrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Lyrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  pronunciation_.MergeFrom(from.pronunciation_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_lyrics_type_namespace(from._internal_lyrics_type_namespace());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_lyrics_type_user_defined_value(from._internal_lyrics_type_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_lyrics_type()->::mead101::avs::LyricsType::MergeFrom(from._internal_lyrics_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_text()->::mead101::mead::LyricsText::MergeFrom(from._internal_text());
    }
    if (cached_has_bits & 0x00000010u) {
      is_misquoted_ = from.is_misquoted_;
    }
    if (cached_has_bits & 0x00000020u) {
      sequence_number_ = from.sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Lyrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Lyrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lyrics::CopyFrom(const Lyrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Lyrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lyrics::IsInitialized() const {
  return true;
}

void Lyrics::InternalSwap(Lyrics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  pronunciation_.InternalSwap(&other->pronunciation_);
  lyrics_type_namespace_.Swap(&other->lyrics_type_namespace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lyrics_type_user_defined_value_.Swap(&other->lyrics_type_user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Lyrics, sequence_number_)
      + sizeof(Lyrics::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(Lyrics, lyrics_type_)>(
          reinterpret_cast<char*>(&lyrics_type_),
          reinterpret_cast<char*>(&other->lyrics_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Lyrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LyricsText::InitAsDefaultInstance() {
  ::mead101::mead::_LyricsText_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::mead101::avs::CurrentTerritoryCode*>(
      ::mead101::avs::CurrentTerritoryCode::internal_default_instance());
  ::mead101::mead::_LyricsText_default_instance_._instance.get_mutable()->format_ = const_cast< ::mead101::avs::TextCodecType*>(
      ::mead101::avs::TextCodecType::internal_default_instance());
}
class LyricsText::_Internal {
 public:
  using HasBits = decltype(std::declval<LyricsText>()._has_bits_);
  static const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code(const LyricsText* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mead101::avs::TextCodecType& format(const LyricsText* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_format_namespace(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_format_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_complete(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mead101::avs::CurrentTerritoryCode&
LyricsText::_Internal::applicable_territory_code(const LyricsText* msg) {
  return *msg->applicable_territory_code_;
}
const ::mead101::avs::TextCodecType&
LyricsText::_Internal::format(const LyricsText* msg) {
  return *msg->format_;
}
void LyricsText::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void LyricsText::clear_format() {
  if (format_ != nullptr) format_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
LyricsText::LyricsText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.LyricsText)
}
LyricsText::LyricsText(const LyricsText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  format_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_format_namespace()) {
    format_namespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_format_namespace(),
      GetArena());
  }
  format_user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_format_user_defined_value()) {
    format_user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_format_user_defined_value(),
      GetArena());
  }
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::mead101::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_format()) {
    format_ = new ::mead101::avs::TextCodecType(*from.format_);
  } else {
    format_ = nullptr;
  }
  is_complete_ = from.is_complete_;
  // @@protoc_insertion_point(copy_constructor:mead101.mead.LyricsText)
}

void LyricsText::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LyricsText_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  format_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_complete_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_complete_));
}

LyricsText::~LyricsText() {
  // @@protoc_insertion_point(destructor:mead101.mead.LyricsText)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LyricsText::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  format_namespace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete format_;
}

void LyricsText::ArenaDtor(void* object) {
  LyricsText* _this = reinterpret_cast< LyricsText* >(object);
  (void)_this;
}
void LyricsText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LyricsText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LyricsText& LyricsText::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LyricsText_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void LyricsText::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.LyricsText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      format_namespace_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      format_user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(format_ != nullptr);
      format_->Clear();
    }
  }
  is_complete_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LyricsText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.TextCodecType format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string format_namespace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_format_namespace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.LyricsText.format_namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string format_user_defined_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_format_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.LyricsText.format_user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_complete = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_complete(&has_bits);
          is_complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.LyricsText.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.LyricsText.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LyricsText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.LyricsText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional .mead101.avs.TextCodecType format = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::format(this), target, stream);
  }

  // optional string format_namespace = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_format_namespace().data(), static_cast<int>(this->_internal_format_namespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.LyricsText.format_namespace");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_format_namespace(), target);
  }

  // optional string format_user_defined_value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_format_user_defined_value().data(), static_cast<int>(this->_internal_format_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.LyricsText.format_user_defined_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_format_user_defined_value(), target);
  }

  // optional bool is_complete = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_complete(), target);
  }

  // optional string language_and_script_code = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.LyricsText.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_language_and_script_code(), target);
  }

  // optional string ext_value = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.LyricsText.ext_value");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.LyricsText)
  return target;
}

size_t LyricsText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.LyricsText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string format_namespace = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_format_namespace());
    }

    // optional string format_user_defined_value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_format_user_defined_value());
    }

    // optional string language_and_script_code = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string ext_value = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

    // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .mead101.avs.TextCodecType format = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *format_);
    }

    // optional bool is_complete = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LyricsText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.LyricsText)
  GOOGLE_DCHECK_NE(&from, this);
  const LyricsText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LyricsText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.LyricsText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.LyricsText)
    MergeFrom(*source);
  }
}

void LyricsText::MergeFrom(const LyricsText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.LyricsText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_format_namespace(from._internal_format_namespace());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_format_user_defined_value(from._internal_format_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_applicable_territory_code()->::mead101::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_format()->::mead101::avs::TextCodecType::MergeFrom(from._internal_format());
    }
    if (cached_has_bits & 0x00000040u) {
      is_complete_ = from.is_complete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LyricsText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.LyricsText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LyricsText::CopyFrom(const LyricsText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.LyricsText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LyricsText::IsInitialized() const {
  return true;
}

void LyricsText::InternalSwap(LyricsText* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  format_namespace_.Swap(&other->format_namespace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  format_user_defined_value_.Swap(&other->format_user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LyricsText, is_complete_)
      + sizeof(LyricsText::is_complete_)
      - PROTOBUF_FIELD_OFFSET(LyricsText, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LyricsText::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MeadMessage::InitAsDefaultInstance() {
  ::mead101::mead::_MeadMessage_default_instance_._instance.get_mutable()->message_header_ = const_cast< ::mead101::mead::MessageHeader*>(
      ::mead101::mead::MessageHeader::internal_default_instance());
  ::mead101::mead::_MeadMessage_default_instance_._instance.get_mutable()->metadata_source_list_ = const_cast< ::mead101::mead::MetadataSourceList*>(
      ::mead101::mead::MetadataSourceList::internal_default_instance());
  ::mead101::mead::_MeadMessage_default_instance_._instance.get_mutable()->party_information_list_ = const_cast< ::mead101::mead::PartyInformationList*>(
      ::mead101::mead::PartyInformationList::internal_default_instance());
  ::mead101::mead::_MeadMessage_default_instance_._instance.get_mutable()->release_information_list_ = const_cast< ::mead101::mead::ReleaseInformationList*>(
      ::mead101::mead::ReleaseInformationList::internal_default_instance());
  ::mead101::mead::_MeadMessage_default_instance_._instance.get_mutable()->resource_information_list_ = const_cast< ::mead101::mead::ResourceInformationList*>(
      ::mead101::mead::ResourceInformationList::internal_default_instance());
  ::mead101::mead::_MeadMessage_default_instance_._instance.get_mutable()->work_information_list_ = const_cast< ::mead101::mead::WorkInformationList*>(
      ::mead101::mead::WorkInformationList::internal_default_instance());
}
class MeadMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<MeadMessage>()._has_bits_);
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::MessageHeader& message_header(const MeadMessage* msg);
  static void set_has_message_header(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::MetadataSourceList& metadata_source_list(const MeadMessage* msg);
  static void set_has_metadata_source_list(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mead101::mead::PartyInformationList& party_information_list(const MeadMessage* msg);
  static void set_has_party_information_list(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mead101::mead::ReleaseInformationList& release_information_list(const MeadMessage* msg);
  static void set_has_release_information_list(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::mead101::mead::ResourceInformationList& resource_information_list(const MeadMessage* msg);
  static void set_has_resource_information_list(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_subscription_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::WorkInformationList& work_information_list(const MeadMessage* msg);
  static void set_has_work_information_list(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::mead101::mead::MessageHeader&
MeadMessage::_Internal::message_header(const MeadMessage* msg) {
  return *msg->message_header_;
}
const ::mead101::mead::MetadataSourceList&
MeadMessage::_Internal::metadata_source_list(const MeadMessage* msg) {
  return *msg->metadata_source_list_;
}
const ::mead101::mead::PartyInformationList&
MeadMessage::_Internal::party_information_list(const MeadMessage* msg) {
  return *msg->party_information_list_;
}
const ::mead101::mead::ReleaseInformationList&
MeadMessage::_Internal::release_information_list(const MeadMessage* msg) {
  return *msg->release_information_list_;
}
const ::mead101::mead::ResourceInformationList&
MeadMessage::_Internal::resource_information_list(const MeadMessage* msg) {
  return *msg->resource_information_list_;
}
const ::mead101::mead::WorkInformationList&
MeadMessage::_Internal::work_information_list(const MeadMessage* msg) {
  return *msg->work_information_list_;
}
MeadMessage::MeadMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  any_value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.MeadMessage)
}
MeadMessage::MeadMessage(const MeadMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      any_value_(from.any_value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_subscription_id()) {
    subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription_id(),
      GetArena());
  }
  if (from._internal_has_message_header()) {
    message_header_ = new ::mead101::mead::MessageHeader(*from.message_header_);
  } else {
    message_header_ = nullptr;
  }
  if (from._internal_has_metadata_source_list()) {
    metadata_source_list_ = new ::mead101::mead::MetadataSourceList(*from.metadata_source_list_);
  } else {
    metadata_source_list_ = nullptr;
  }
  if (from._internal_has_party_information_list()) {
    party_information_list_ = new ::mead101::mead::PartyInformationList(*from.party_information_list_);
  } else {
    party_information_list_ = nullptr;
  }
  if (from._internal_has_release_information_list()) {
    release_information_list_ = new ::mead101::mead::ReleaseInformationList(*from.release_information_list_);
  } else {
    release_information_list_ = nullptr;
  }
  if (from._internal_has_resource_information_list()) {
    resource_information_list_ = new ::mead101::mead::ResourceInformationList(*from.resource_information_list_);
  } else {
    resource_information_list_ = nullptr;
  }
  if (from._internal_has_work_information_list()) {
    work_information_list_ = new ::mead101::mead::WorkInformationList(*from.work_information_list_);
  } else {
    work_information_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.MeadMessage)
}

void MeadMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MeadMessage_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&work_information_list_) -
      reinterpret_cast<char*>(&message_header_)) + sizeof(work_information_list_));
}

MeadMessage::~MeadMessage() {
  // @@protoc_insertion_point(destructor:mead101.mead.MeadMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MeadMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_header_;
  if (this != internal_default_instance()) delete metadata_source_list_;
  if (this != internal_default_instance()) delete party_information_list_;
  if (this != internal_default_instance()) delete release_information_list_;
  if (this != internal_default_instance()) delete resource_information_list_;
  if (this != internal_default_instance()) delete work_information_list_;
}

void MeadMessage::ArenaDtor(void* object) {
  MeadMessage* _this = reinterpret_cast< MeadMessage* >(object);
  (void)_this;
}
void MeadMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeadMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeadMessage& MeadMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeadMessage_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void MeadMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.MeadMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  any_value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      subscription_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(message_header_ != nullptr);
      message_header_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(metadata_source_list_ != nullptr);
      metadata_source_list_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(party_information_list_ != nullptr);
      party_information_list_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(release_information_list_ != nullptr);
      release_information_list_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(resource_information_list_ != nullptr);
      resource_information_list_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(work_information_list_ != nullptr);
      work_information_list_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeadMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language_and_script_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.MeadMessage.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.MessageHeader message_header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.MetadataSourceList metadata_source_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata_source_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.PartyInformationList party_information_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_information_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ReleaseInformationList release_information_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_information_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ResourceInformationList resource_information_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_information_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string subscription_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_subscription_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.MeadMessage.subscription_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.WorkInformationList work_information_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_work_information_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string any_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_any_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.MeadMessage.any_value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeadMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.MeadMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language_and_script_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.MeadMessage.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language_and_script_code(), target);
  }

  // optional .mead101.mead.MessageHeader message_header = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::message_header(this), target, stream);
  }

  // optional .mead101.mead.MetadataSourceList metadata_source_list = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::metadata_source_list(this), target, stream);
  }

  // optional .mead101.mead.PartyInformationList party_information_list = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::party_information_list(this), target, stream);
  }

  // optional .mead101.mead.ReleaseInformationList release_information_list = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::release_information_list(this), target, stream);
  }

  // optional .mead101.mead.ResourceInformationList resource_information_list = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::resource_information_list(this), target, stream);
  }

  // optional string subscription_id = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_subscription_id().data(), static_cast<int>(this->_internal_subscription_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.MeadMessage.subscription_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_subscription_id(), target);
  }

  // optional .mead101.mead.WorkInformationList work_information_list = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::work_information_list(this), target, stream);
  }

  // repeated string any_value = 9;
  for (int i = 0, n = this->_internal_any_value_size(); i < n; i++) {
    const auto& s = this->_internal_any_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.MeadMessage.any_value");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.MeadMessage)
  return target;
}

size_t MeadMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.MeadMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string any_value = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(any_value_.size());
  for (int i = 0, n = any_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      any_value_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string language_and_script_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string subscription_id = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_subscription_id());
    }

    // optional .mead101.mead.MessageHeader message_header = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_header_);
    }

    // optional .mead101.mead.MetadataSourceList metadata_source_list = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_source_list_);
    }

    // optional .mead101.mead.PartyInformationList party_information_list = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *party_information_list_);
    }

    // optional .mead101.mead.ReleaseInformationList release_information_list = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *release_information_list_);
    }

    // optional .mead101.mead.ResourceInformationList resource_information_list = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_information_list_);
    }

    // optional .mead101.mead.WorkInformationList work_information_list = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *work_information_list_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeadMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.MeadMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const MeadMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeadMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.MeadMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.MeadMessage)
    MergeFrom(*source);
  }
}

void MeadMessage::MergeFrom(const MeadMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.MeadMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  any_value_.MergeFrom(from.any_value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_subscription_id(from._internal_subscription_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_message_header()->::mead101::mead::MessageHeader::MergeFrom(from._internal_message_header());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_metadata_source_list()->::mead101::mead::MetadataSourceList::MergeFrom(from._internal_metadata_source_list());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_party_information_list()->::mead101::mead::PartyInformationList::MergeFrom(from._internal_party_information_list());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_release_information_list()->::mead101::mead::ReleaseInformationList::MergeFrom(from._internal_release_information_list());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_resource_information_list()->::mead101::mead::ResourceInformationList::MergeFrom(from._internal_resource_information_list());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_work_information_list()->::mead101::mead::WorkInformationList::MergeFrom(from._internal_work_information_list());
    }
  }
}

void MeadMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.MeadMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeadMessage::CopyFrom(const MeadMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.MeadMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeadMessage::IsInitialized() const {
  return true;
}

void MeadMessage::InternalSwap(MeadMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  any_value_.InternalSwap(&other->any_value_);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subscription_id_.Swap(&other->subscription_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeadMessage, work_information_list_)
      + sizeof(MeadMessage::work_information_list_)
      - PROTOBUF_FIELD_OFFSET(MeadMessage, message_header_)>(
          reinterpret_cast<char*>(&message_header_),
          reinterpret_cast<char*>(&other->message_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MeadMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageAuditTrail::InitAsDefaultInstance() {
}
class MessageAuditTrail::_Internal {
 public:
};

MessageAuditTrail::MessageAuditTrail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  message_audit_trail_event_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.MessageAuditTrail)
}
MessageAuditTrail::MessageAuditTrail(const MessageAuditTrail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      message_audit_trail_event_(from.message_audit_trail_event_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mead101.mead.MessageAuditTrail)
}

void MessageAuditTrail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageAuditTrail_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
}

MessageAuditTrail::~MessageAuditTrail() {
  // @@protoc_insertion_point(destructor:mead101.mead.MessageAuditTrail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageAuditTrail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MessageAuditTrail::ArenaDtor(void* object) {
  MessageAuditTrail* _this = reinterpret_cast< MessageAuditTrail* >(object);
  (void)_this;
}
void MessageAuditTrail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageAuditTrail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageAuditTrail& MessageAuditTrail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageAuditTrail_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void MessageAuditTrail::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.MessageAuditTrail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_audit_trail_event_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageAuditTrail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.MessageAuditTrailEvent message_audit_trail_event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_message_audit_trail_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageAuditTrail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.MessageAuditTrail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.MessageAuditTrailEvent message_audit_trail_event = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_message_audit_trail_event_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_message_audit_trail_event(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.MessageAuditTrail)
  return target;
}

size_t MessageAuditTrail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.MessageAuditTrail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.MessageAuditTrailEvent message_audit_trail_event = 1;
  total_size += 1UL * this->_internal_message_audit_trail_event_size();
  for (const auto& msg : this->message_audit_trail_event_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageAuditTrail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.MessageAuditTrail)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageAuditTrail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageAuditTrail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.MessageAuditTrail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.MessageAuditTrail)
    MergeFrom(*source);
  }
}

void MessageAuditTrail::MergeFrom(const MessageAuditTrail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.MessageAuditTrail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  message_audit_trail_event_.MergeFrom(from.message_audit_trail_event_);
}

void MessageAuditTrail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.MessageAuditTrail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageAuditTrail::CopyFrom(const MessageAuditTrail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.MessageAuditTrail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageAuditTrail::IsInitialized() const {
  return true;
}

void MessageAuditTrail::InternalSwap(MessageAuditTrail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_audit_trail_event_.InternalSwap(&other->message_audit_trail_event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageAuditTrail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageAuditTrailEvent::InitAsDefaultInstance() {
  ::mead101::mead::_MessageAuditTrailEvent_default_instance_._instance.get_mutable()->messaging_party_descriptor_ = const_cast< ::mead101::mead::MessagingPartyWithoutCode*>(
      ::mead101::mead::MessagingPartyWithoutCode::internal_default_instance());
}
class MessageAuditTrailEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageAuditTrailEvent>()._has_bits_);
  static void set_has_date_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::MessagingPartyWithoutCode& messaging_party_descriptor(const MessageAuditTrailEvent* msg);
  static void set_has_messaging_party_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mead101::mead::MessagingPartyWithoutCode&
MessageAuditTrailEvent::_Internal::messaging_party_descriptor(const MessageAuditTrailEvent* msg) {
  return *msg->messaging_party_descriptor_;
}
MessageAuditTrailEvent::MessageAuditTrailEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.MessageAuditTrailEvent)
}
MessageAuditTrailEvent::MessageAuditTrailEvent(const MessageAuditTrailEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_date_time()) {
    date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date_time(),
      GetArena());
  }
  if (from._internal_has_messaging_party_descriptor()) {
    messaging_party_descriptor_ = new ::mead101::mead::MessagingPartyWithoutCode(*from.messaging_party_descriptor_);
  } else {
    messaging_party_descriptor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.MessageAuditTrailEvent)
}

void MessageAuditTrailEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageAuditTrailEvent_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  messaging_party_descriptor_ = nullptr;
}

MessageAuditTrailEvent::~MessageAuditTrailEvent() {
  // @@protoc_insertion_point(destructor:mead101.mead.MessageAuditTrailEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageAuditTrailEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  date_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete messaging_party_descriptor_;
}

void MessageAuditTrailEvent::ArenaDtor(void* object) {
  MessageAuditTrailEvent* _this = reinterpret_cast< MessageAuditTrailEvent* >(object);
  (void)_this;
}
void MessageAuditTrailEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageAuditTrailEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageAuditTrailEvent& MessageAuditTrailEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageAuditTrailEvent_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void MessageAuditTrailEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.MessageAuditTrailEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      date_time_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(messaging_party_descriptor_ != nullptr);
      messaging_party_descriptor_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageAuditTrailEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string date_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_date_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.MessageAuditTrailEvent.date_time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.MessagingPartyWithoutCode messaging_party_descriptor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_messaging_party_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageAuditTrailEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.MessageAuditTrailEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string date_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_date_time().data(), static_cast<int>(this->_internal_date_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.MessageAuditTrailEvent.date_time");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_date_time(), target);
  }

  // optional .mead101.mead.MessagingPartyWithoutCode messaging_party_descriptor = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::messaging_party_descriptor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.MessageAuditTrailEvent)
  return target;
}

size_t MessageAuditTrailEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.MessageAuditTrailEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string date_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_date_time());
    }

    // optional .mead101.mead.MessagingPartyWithoutCode messaging_party_descriptor = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *messaging_party_descriptor_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageAuditTrailEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.MessageAuditTrailEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageAuditTrailEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageAuditTrailEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.MessageAuditTrailEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.MessageAuditTrailEvent)
    MergeFrom(*source);
  }
}

void MessageAuditTrailEvent::MergeFrom(const MessageAuditTrailEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.MessageAuditTrailEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_date_time(from._internal_date_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_messaging_party_descriptor()->::mead101::mead::MessagingPartyWithoutCode::MergeFrom(from._internal_messaging_party_descriptor());
    }
  }
}

void MessageAuditTrailEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.MessageAuditTrailEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageAuditTrailEvent::CopyFrom(const MessageAuditTrailEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.MessageAuditTrailEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageAuditTrailEvent::IsInitialized() const {
  return true;
}

void MessageAuditTrailEvent::InternalSwap(MessageAuditTrailEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  date_time_.Swap(&other->date_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(messaging_party_descriptor_, other->messaging_party_descriptor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageAuditTrailEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageHeader::InitAsDefaultInstance() {
  ::mead101::mead::_MessageHeader_default_instance_._instance.get_mutable()->message_audit_trail_ = const_cast< ::mead101::mead::MessageAuditTrail*>(
      ::mead101::mead::MessageAuditTrail::internal_default_instance());
  ::mead101::mead::_MessageHeader_default_instance_._instance.get_mutable()->message_control_type_ = const_cast< ::mead101::avs::MessageControlType*>(
      ::mead101::avs::MessageControlType::internal_default_instance());
  ::mead101::mead::_MessageHeader_default_instance_._instance.get_mutable()->message_sender_ = const_cast< ::mead101::mead::MessagingPartyWithoutCode*>(
      ::mead101::mead::MessagingPartyWithoutCode::internal_default_instance());
  ::mead101::mead::_MessageHeader_default_instance_._instance.get_mutable()->sent_on_behalf_of_ = const_cast< ::mead101::mead::MessagingPartyWithoutCode*>(
      ::mead101::mead::MessagingPartyWithoutCode::internal_default_instance());
}
class MessageHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageHeader>()._has_bits_);
  static const ::mead101::mead::MessageAuditTrail& message_audit_trail(const MessageHeader* msg);
  static void set_has_message_audit_trail(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mead101::avs::MessageControlType& message_control_type(const MessageHeader* msg);
  static void set_has_message_control_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_message_created_date_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::MessagingPartyWithoutCode& message_sender(const MessageHeader* msg);
  static void set_has_message_sender(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_message_thread_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mead101::mead::MessagingPartyWithoutCode& sent_on_behalf_of(const MessageHeader* msg);
  static void set_has_sent_on_behalf_of(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::mead101::mead::MessageAuditTrail&
MessageHeader::_Internal::message_audit_trail(const MessageHeader* msg) {
  return *msg->message_audit_trail_;
}
const ::mead101::avs::MessageControlType&
MessageHeader::_Internal::message_control_type(const MessageHeader* msg) {
  return *msg->message_control_type_;
}
const ::mead101::mead::MessagingPartyWithoutCode&
MessageHeader::_Internal::message_sender(const MessageHeader* msg) {
  return *msg->message_sender_;
}
const ::mead101::mead::MessagingPartyWithoutCode&
MessageHeader::_Internal::sent_on_behalf_of(const MessageHeader* msg) {
  return *msg->sent_on_behalf_of_;
}
void MessageHeader::clear_message_control_type() {
  if (message_control_type_ != nullptr) message_control_type_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
MessageHeader::MessageHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  message_recipient_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.MessageHeader)
}
MessageHeader::MessageHeader(const MessageHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      message_recipient_(from.message_recipient_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_created_date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message_created_date_time()) {
    message_created_date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_created_date_time(),
      GetArena());
  }
  message_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message_file_name()) {
    message_file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_file_name(),
      GetArena());
  }
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message_id()) {
    message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_id(),
      GetArena());
  }
  message_thread_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message_thread_id()) {
    message_thread_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_thread_id(),
      GetArena());
  }
  if (from._internal_has_message_audit_trail()) {
    message_audit_trail_ = new ::mead101::mead::MessageAuditTrail(*from.message_audit_trail_);
  } else {
    message_audit_trail_ = nullptr;
  }
  if (from._internal_has_message_control_type()) {
    message_control_type_ = new ::mead101::avs::MessageControlType(*from.message_control_type_);
  } else {
    message_control_type_ = nullptr;
  }
  if (from._internal_has_message_sender()) {
    message_sender_ = new ::mead101::mead::MessagingPartyWithoutCode(*from.message_sender_);
  } else {
    message_sender_ = nullptr;
  }
  if (from._internal_has_sent_on_behalf_of()) {
    sent_on_behalf_of_ = new ::mead101::mead::MessagingPartyWithoutCode(*from.sent_on_behalf_of_);
  } else {
    sent_on_behalf_of_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.MessageHeader)
}

void MessageHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageHeader_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  message_created_date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_thread_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_audit_trail_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sent_on_behalf_of_) -
      reinterpret_cast<char*>(&message_audit_trail_)) + sizeof(sent_on_behalf_of_));
}

MessageHeader::~MessageHeader() {
  // @@protoc_insertion_point(destructor:mead101.mead.MessageHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_created_date_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_thread_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_audit_trail_;
  if (this != internal_default_instance()) delete message_control_type_;
  if (this != internal_default_instance()) delete message_sender_;
  if (this != internal_default_instance()) delete sent_on_behalf_of_;
}

void MessageHeader::ArenaDtor(void* object) {
  MessageHeader* _this = reinterpret_cast< MessageHeader* >(object);
  (void)_this;
}
void MessageHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageHeader& MessageHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageHeader_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void MessageHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.MessageHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_recipient_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      message_created_date_time_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      message_file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      message_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      message_thread_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(message_audit_trail_ != nullptr);
      message_audit_trail_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(message_control_type_ != nullptr);
      message_control_type_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(message_sender_ != nullptr);
      message_sender_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(sent_on_behalf_of_ != nullptr);
      sent_on_behalf_of_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.MessageAuditTrail message_audit_trail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_audit_trail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.MessageControlType message_control_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_control_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message_created_date_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message_created_date_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.MessageHeader.message_created_date_time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message_file_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_message_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.MessageHeader.message_file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.MessageHeader.message_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.MessagingPartyWithoutCode message_recipient = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_message_recipient(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.MessagingPartyWithoutCode message_sender = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_sender(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message_thread_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_message_thread_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.MessageHeader.message_thread_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.MessagingPartyWithoutCode sent_on_behalf_of = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sent_on_behalf_of(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.MessageHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.MessageAuditTrail message_audit_trail = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::message_audit_trail(this), target, stream);
  }

  // optional .mead101.avs.MessageControlType message_control_type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::message_control_type(this), target, stream);
  }

  // optional string message_created_date_time = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_created_date_time().data(), static_cast<int>(this->_internal_message_created_date_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.MessageHeader.message_created_date_time");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message_created_date_time(), target);
  }

  // optional string message_file_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_file_name().data(), static_cast<int>(this->_internal_message_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.MessageHeader.message_file_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message_file_name(), target);
  }

  // optional string message_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.MessageHeader.message_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_message_id(), target);
  }

  // repeated .mead101.mead.MessagingPartyWithoutCode message_recipient = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_message_recipient_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_message_recipient(i), target, stream);
  }

  // optional .mead101.mead.MessagingPartyWithoutCode message_sender = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::message_sender(this), target, stream);
  }

  // optional string message_thread_id = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_thread_id().data(), static_cast<int>(this->_internal_message_thread_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.MessageHeader.message_thread_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_message_thread_id(), target);
  }

  // optional .mead101.mead.MessagingPartyWithoutCode sent_on_behalf_of = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::sent_on_behalf_of(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.MessageHeader)
  return target;
}

size_t MessageHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.MessageHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.MessagingPartyWithoutCode message_recipient = 6;
  total_size += 1UL * this->_internal_message_recipient_size();
  for (const auto& msg : this->message_recipient_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string message_created_date_time = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_created_date_time());
    }

    // optional string message_file_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_file_name());
    }

    // optional string message_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_id());
    }

    // optional string message_thread_id = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_thread_id());
    }

    // optional .mead101.mead.MessageAuditTrail message_audit_trail = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_audit_trail_);
    }

    // optional .mead101.avs.MessageControlType message_control_type = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_control_type_);
    }

    // optional .mead101.mead.MessagingPartyWithoutCode message_sender = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_sender_);
    }

    // optional .mead101.mead.MessagingPartyWithoutCode sent_on_behalf_of = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sent_on_behalf_of_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.MessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.MessageHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.MessageHeader)
    MergeFrom(*source);
  }
}

void MessageHeader::MergeFrom(const MessageHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.MessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  message_recipient_.MergeFrom(from.message_recipient_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message_created_date_time(from._internal_message_created_date_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_message_file_name(from._internal_message_file_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_message_id(from._internal_message_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_message_thread_id(from._internal_message_thread_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_message_audit_trail()->::mead101::mead::MessageAuditTrail::MergeFrom(from._internal_message_audit_trail());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_message_control_type()->::mead101::avs::MessageControlType::MergeFrom(from._internal_message_control_type());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_message_sender()->::mead101::mead::MessagingPartyWithoutCode::MergeFrom(from._internal_message_sender());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_sent_on_behalf_of()->::mead101::mead::MessagingPartyWithoutCode::MergeFrom(from._internal_sent_on_behalf_of());
    }
  }
}

void MessageHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.MessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageHeader::CopyFrom(const MessageHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.MessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageHeader::IsInitialized() const {
  return true;
}

void MessageHeader::InternalSwap(MessageHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_recipient_.InternalSwap(&other->message_recipient_);
  message_created_date_time_.Swap(&other->message_created_date_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_file_name_.Swap(&other->message_file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_thread_id_.Swap(&other->message_thread_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageHeader, sent_on_behalf_of_)
      + sizeof(MessageHeader::sent_on_behalf_of_)
      - PROTOBUF_FIELD_OFFSET(MessageHeader, message_audit_trail_)>(
          reinterpret_cast<char*>(&message_audit_trail_),
          reinterpret_cast<char*>(&other->message_audit_trail_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessagingPartyWithoutCode::InitAsDefaultInstance() {
  ::mead101::mead::_MessagingPartyWithoutCode_default_instance_._instance.get_mutable()->party_name_ = const_cast< ::mead101::mead::PartyNameWithoutCode*>(
      ::mead101::mead::PartyNameWithoutCode::internal_default_instance());
}
class MessagingPartyWithoutCode::_Internal {
 public:
  using HasBits = decltype(std::declval<MessagingPartyWithoutCode>()._has_bits_);
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::PartyNameWithoutCode& party_name(const MessagingPartyWithoutCode* msg);
  static void set_has_party_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_trading_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mead101::mead::PartyNameWithoutCode&
MessagingPartyWithoutCode::_Internal::party_name(const MessagingPartyWithoutCode* msg) {
  return *msg->party_name_;
}
MessagingPartyWithoutCode::MessagingPartyWithoutCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.MessagingPartyWithoutCode)
}
MessagingPartyWithoutCode::MessagingPartyWithoutCode(const MessagingPartyWithoutCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_party_id()) {
    party_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_party_id(),
      GetArena());
  }
  trading_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_trading_name()) {
    trading_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trading_name(),
      GetArena());
  }
  if (from._internal_has_party_name()) {
    party_name_ = new ::mead101::mead::PartyNameWithoutCode(*from.party_name_);
  } else {
    party_name_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.MessagingPartyWithoutCode)
}

void MessagingPartyWithoutCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessagingPartyWithoutCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trading_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_name_ = nullptr;
}

MessagingPartyWithoutCode::~MessagingPartyWithoutCode() {
  // @@protoc_insertion_point(destructor:mead101.mead.MessagingPartyWithoutCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessagingPartyWithoutCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trading_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete party_name_;
}

void MessagingPartyWithoutCode::ArenaDtor(void* object) {
  MessagingPartyWithoutCode* _this = reinterpret_cast< MessagingPartyWithoutCode* >(object);
  (void)_this;
}
void MessagingPartyWithoutCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessagingPartyWithoutCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessagingPartyWithoutCode& MessagingPartyWithoutCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessagingPartyWithoutCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void MessagingPartyWithoutCode::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.MessagingPartyWithoutCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      party_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      trading_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(party_name_ != nullptr);
      party_name_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessagingPartyWithoutCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.MessagingPartyWithoutCode.party_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.PartyNameWithoutCode party_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string trading_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_trading_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.MessagingPartyWithoutCode.trading_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessagingPartyWithoutCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.MessagingPartyWithoutCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string party_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.MessagingPartyWithoutCode.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // optional .mead101.mead.PartyNameWithoutCode party_name = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::party_name(this), target, stream);
  }

  // optional string trading_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_trading_name().data(), static_cast<int>(this->_internal_trading_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.MessagingPartyWithoutCode.trading_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_trading_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.MessagingPartyWithoutCode)
  return target;
}

size_t MessagingPartyWithoutCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.MessagingPartyWithoutCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string party_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_party_id());
    }

    // optional string trading_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_trading_name());
    }

    // optional .mead101.mead.PartyNameWithoutCode party_name = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *party_name_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessagingPartyWithoutCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.MessagingPartyWithoutCode)
  GOOGLE_DCHECK_NE(&from, this);
  const MessagingPartyWithoutCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessagingPartyWithoutCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.MessagingPartyWithoutCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.MessagingPartyWithoutCode)
    MergeFrom(*source);
  }
}

void MessagingPartyWithoutCode::MergeFrom(const MessagingPartyWithoutCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.MessagingPartyWithoutCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_party_id(from._internal_party_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_trading_name(from._internal_trading_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_party_name()->::mead101::mead::PartyNameWithoutCode::MergeFrom(from._internal_party_name());
    }
  }
}

void MessagingPartyWithoutCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.MessagingPartyWithoutCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagingPartyWithoutCode::CopyFrom(const MessagingPartyWithoutCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.MessagingPartyWithoutCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagingPartyWithoutCode::IsInitialized() const {
  return true;
}

void MessagingPartyWithoutCode::InternalSwap(MessagingPartyWithoutCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trading_name_.Swap(&other->trading_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(party_name_, other->party_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagingPartyWithoutCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MetadataSource::InitAsDefaultInstance() {
  ::mead101::mead::_MetadataSource_default_instance_._instance.get_mutable()->metadata_source_type_ = const_cast< ::mead101::mead::MetadataSourceType*>(
      ::mead101::mead::MetadataSourceType::internal_default_instance());
}
class MetadataSource::_Internal {
 public:
  using HasBits = decltype(std::declval<MetadataSource>()._has_bits_);
  static const ::mead101::mead::MetadataSourceType& metadata_source_type(const MetadataSource* msg);
  static void set_has_metadata_source_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mead101::mead::MetadataSourceType&
MetadataSource::_Internal::metadata_source_type(const MetadataSource* msg) {
  return *msg->metadata_source_type_;
}
MetadataSource::MetadataSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  party_id_(arena),
  party_name_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.MetadataSource)
}
MetadataSource::MetadataSource(const MetadataSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      party_id_(from.party_id_),
      party_name_(from.party_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source_reference()) {
    source_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source_reference(),
      GetArena());
  }
  if (from._internal_has_metadata_source_type()) {
    metadata_source_type_ = new ::mead101::mead::MetadataSourceType(*from.metadata_source_type_);
  } else {
    metadata_source_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.MetadataSource)
}

void MetadataSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetadataSource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  source_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_source_type_ = nullptr;
}

MetadataSource::~MetadataSource() {
  // @@protoc_insertion_point(destructor:mead101.mead.MetadataSource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetadataSource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_source_type_;
}

void MetadataSource::ArenaDtor(void* object) {
  MetadataSource* _this = reinterpret_cast< MetadataSource* >(object);
  (void)_this;
}
void MetadataSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetadataSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetadataSource& MetadataSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetadataSource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void MetadataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.MetadataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.Clear();
  party_name_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      source_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(metadata_source_type_ != nullptr);
      metadata_source_type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetadataSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.MetadataSourceType metadata_source_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata_source_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.DetailedPartyId party_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_party_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.PartyNameWithTerritory party_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_party_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string source_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_source_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.MetadataSource.source_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetadataSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.MetadataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.MetadataSourceType metadata_source_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata_source_type(this), target, stream);
  }

  // repeated .mead101.mead.DetailedPartyId party_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_party_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_party_id(i), target, stream);
  }

  // repeated .mead101.mead.PartyNameWithTerritory party_name = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_party_name_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_party_name(i), target, stream);
  }

  // optional string source_reference = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source_reference().data(), static_cast<int>(this->_internal_source_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.MetadataSource.source_reference");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_source_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.MetadataSource)
  return target;
}

size_t MetadataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.MetadataSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.DetailedPartyId party_id = 2;
  total_size += 1UL * this->_internal_party_id_size();
  for (const auto& msg : this->party_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.PartyNameWithTerritory party_name = 3;
  total_size += 1UL * this->_internal_party_name_size();
  for (const auto& msg : this->party_name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string source_reference = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_reference());
    }

    // optional .mead101.mead.MetadataSourceType metadata_source_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_source_type_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetadataSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.MetadataSource)
  GOOGLE_DCHECK_NE(&from, this);
  const MetadataSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetadataSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.MetadataSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.MetadataSource)
    MergeFrom(*source);
  }
}

void MetadataSource::MergeFrom(const MetadataSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.MetadataSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  party_id_.MergeFrom(from.party_id_);
  party_name_.MergeFrom(from.party_name_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source_reference(from._internal_source_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_metadata_source_type()->::mead101::mead::MetadataSourceType::MergeFrom(from._internal_metadata_source_type());
    }
  }
}

void MetadataSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.MetadataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetadataSource::CopyFrom(const MetadataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.MetadataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataSource::IsInitialized() const {
  return true;
}

void MetadataSource::InternalSwap(MetadataSource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  party_id_.InternalSwap(&other->party_id_);
  party_name_.InternalSwap(&other->party_name_);
  source_reference_.Swap(&other->source_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(metadata_source_type_, other->metadata_source_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetadataSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MetadataSourceList::InitAsDefaultInstance() {
}
class MetadataSourceList::_Internal {
 public:
};

MetadataSourceList::MetadataSourceList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.MetadataSourceList)
}
MetadataSourceList::MetadataSourceList(const MetadataSourceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metadata_source_(from.metadata_source_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mead101.mead.MetadataSourceList)
}

void MetadataSourceList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetadataSourceList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
}

MetadataSourceList::~MetadataSourceList() {
  // @@protoc_insertion_point(destructor:mead101.mead.MetadataSourceList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetadataSourceList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MetadataSourceList::ArenaDtor(void* object) {
  MetadataSourceList* _this = reinterpret_cast< MetadataSourceList* >(object);
  (void)_this;
}
void MetadataSourceList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetadataSourceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetadataSourceList& MetadataSourceList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetadataSourceList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void MetadataSourceList::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.MetadataSourceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetadataSourceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.MetadataSource metadata_source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata_source(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetadataSourceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.MetadataSourceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.MetadataSource metadata_source = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metadata_source_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_metadata_source(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.MetadataSourceList)
  return target;
}

size_t MetadataSourceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.MetadataSourceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.MetadataSource metadata_source = 1;
  total_size += 1UL * this->_internal_metadata_source_size();
  for (const auto& msg : this->metadata_source_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetadataSourceList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.MetadataSourceList)
  GOOGLE_DCHECK_NE(&from, this);
  const MetadataSourceList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetadataSourceList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.MetadataSourceList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.MetadataSourceList)
    MergeFrom(*source);
  }
}

void MetadataSourceList::MergeFrom(const MetadataSourceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.MetadataSourceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_.MergeFrom(from.metadata_source_);
}

void MetadataSourceList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.MetadataSourceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetadataSourceList::CopyFrom(const MetadataSourceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.MetadataSourceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataSourceList::IsInitialized() const {
  return true;
}

void MetadataSourceList::InternalSwap(MetadataSourceList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metadata_source_.InternalSwap(&other->metadata_source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetadataSourceList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MetadataSourceType::InitAsDefaultInstance() {
  ::mead101::mead::_MetadataSourceType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::MetadataSourceType*>(
      ::mead101::avs::MetadataSourceType::internal_default_instance());
}
class MetadataSourceType::_Internal {
 public:
  using HasBits = decltype(std::declval<MetadataSourceType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::MetadataSourceType& ext_value(const MetadataSourceType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::MetadataSourceType&
MetadataSourceType::_Internal::ext_value(const MetadataSourceType* msg) {
  return *msg->ext_value_;
}
void MetadataSourceType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
MetadataSourceType::MetadataSourceType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.MetadataSourceType)
}
MetadataSourceType::MetadataSourceType(const MetadataSourceType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::MetadataSourceType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.MetadataSourceType)
}

void MetadataSourceType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetadataSourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

MetadataSourceType::~MetadataSourceType() {
  // @@protoc_insertion_point(destructor:mead101.mead.MetadataSourceType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetadataSourceType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void MetadataSourceType::ArenaDtor(void* object) {
  MetadataSourceType* _this = reinterpret_cast< MetadataSourceType* >(object);
  (void)_this;
}
void MetadataSourceType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetadataSourceType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetadataSourceType& MetadataSourceType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetadataSourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void MetadataSourceType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.MetadataSourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetadataSourceType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.MetadataSourceType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.MetadataSourceType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.MetadataSourceType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetadataSourceType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.MetadataSourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.MetadataSourceType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.MetadataSourceType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.MetadataSourceType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.MetadataSourceType)
  return target;
}

size_t MetadataSourceType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.MetadataSourceType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.MetadataSourceType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetadataSourceType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.MetadataSourceType)
  GOOGLE_DCHECK_NE(&from, this);
  const MetadataSourceType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetadataSourceType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.MetadataSourceType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.MetadataSourceType)
    MergeFrom(*source);
  }
}

void MetadataSourceType::MergeFrom(const MetadataSourceType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.MetadataSourceType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::MetadataSourceType::MergeFrom(from._internal_ext_value());
    }
  }
}

void MetadataSourceType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.MetadataSourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetadataSourceType::CopyFrom(const MetadataSourceType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.MetadataSourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataSourceType::IsInitialized() const {
  return true;
}

void MetadataSourceType::InternalSwap(MetadataSourceType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetadataSourceType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Meter::InitAsDefaultInstance() {
}
class Meter::_Internal {
 public:
  using HasBits = decltype(std::declval<Meter>()._has_bits_);
  static void set_has_note_equivalent_to_beat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number_of_beats_in_bar(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Meter::Meter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Meter)
}
Meter::Meter(const Meter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&note_equivalent_to_beat_, &from.note_equivalent_to_beat_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_beats_in_bar_) -
    reinterpret_cast<char*>(&note_equivalent_to_beat_)) + sizeof(number_of_beats_in_bar_));
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Meter)
}

void Meter::SharedCtor() {
  ::memset(&note_equivalent_to_beat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_beats_in_bar_) -
      reinterpret_cast<char*>(&note_equivalent_to_beat_)) + sizeof(number_of_beats_in_bar_));
}

Meter::~Meter() {
  // @@protoc_insertion_point(destructor:mead101.mead.Meter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Meter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Meter::ArenaDtor(void* object) {
  Meter* _this = reinterpret_cast< Meter* >(object);
  (void)_this;
}
void Meter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Meter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Meter& Meter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Meter_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Meter::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Meter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&note_equivalent_to_beat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_beats_in_bar_) -
        reinterpret_cast<char*>(&note_equivalent_to_beat_)) + sizeof(number_of_beats_in_bar_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Meter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 note_equivalent_to_beat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_note_equivalent_to_beat(&has_bits);
          note_equivalent_to_beat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 number_of_beats_in_bar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_number_of_beats_in_bar(&has_bits);
          number_of_beats_in_bar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Meter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Meter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 note_equivalent_to_beat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_note_equivalent_to_beat(), target);
  }

  // optional int32 number_of_beats_in_bar = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_number_of_beats_in_bar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Meter)
  return target;
}

size_t Meter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Meter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 note_equivalent_to_beat = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_note_equivalent_to_beat());
    }

    // optional int32 number_of_beats_in_bar = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_number_of_beats_in_bar());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Meter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Meter)
  GOOGLE_DCHECK_NE(&from, this);
  const Meter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Meter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Meter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Meter)
    MergeFrom(*source);
  }
}

void Meter::MergeFrom(const Meter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Meter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      note_equivalent_to_beat_ = from.note_equivalent_to_beat_;
    }
    if (cached_has_bits & 0x00000002u) {
      number_of_beats_in_bar_ = from.number_of_beats_in_bar_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Meter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Meter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Meter::CopyFrom(const Meter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Meter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Meter::IsInitialized() const {
  return true;
}

void Meter::InternalSwap(Meter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Meter, number_of_beats_in_bar_)
      + sizeof(Meter::number_of_beats_in_bar_)
      - PROTOBUF_FIELD_OFFSET(Meter, note_equivalent_to_beat_)>(
          reinterpret_cast<char*>(&note_equivalent_to_beat_),
          reinterpret_cast<char*>(&other->note_equivalent_to_beat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Meter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Mode::InitAsDefaultInstance() {
  ::mead101::mead::_Mode_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::Mode*>(
      ::mead101::avs::Mode::internal_default_instance());
}
class Mode::_Internal {
 public:
  using HasBits = decltype(std::declval<Mode>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::Mode& ext_value(const Mode* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::Mode&
Mode::_Internal::ext_value(const Mode* msg) {
  return *msg->ext_value_;
}
void Mode::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
Mode::Mode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Mode)
}
Mode::Mode(const Mode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::Mode(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Mode)
}

void Mode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

Mode::~Mode() {
  // @@protoc_insertion_point(destructor:mead101.mead.Mode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Mode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void Mode::ArenaDtor(void* object) {
  Mode* _this = reinterpret_cast< Mode* >(object);
  (void)_this;
}
void Mode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mode& Mode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Mode::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Mode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Mode.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Mode.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.Mode ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Mode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Mode.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Mode.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.Mode ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Mode)
  return target;
}

size_t Mode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Mode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.Mode ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Mode)
  GOOGLE_DCHECK_NE(&from, this);
  const Mode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Mode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Mode)
    MergeFrom(*source);
  }
}

void Mode::MergeFrom(const Mode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Mode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::Mode::MergeFrom(from._internal_ext_value());
    }
  }
}

void Mode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Mode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mode::CopyFrom(const Mode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Mode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mode::IsInitialized() const {
  return true;
}

void Mode::InternalSwap(Mode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Modulation::InitAsDefaultInstance() {
}
class Modulation::_Internal {
 public:
  using HasBits = decltype(std::declval<Modulation>()._has_bits_);
  static void set_has_end_bar(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_bar(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_point(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Modulation::Modulation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Modulation)
}
Modulation::Modulation(const Modulation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&end_point_, &from.end_point_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&end_point_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Modulation)
}

void Modulation::SharedCtor() {
  ::memset(&end_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&end_point_)) + sizeof(value_));
}

Modulation::~Modulation() {
  // @@protoc_insertion_point(destructor:mead101.mead.Modulation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Modulation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Modulation::ArenaDtor(void* object) {
  Modulation* _this = reinterpret_cast< Modulation* >(object);
  (void)_this;
}
void Modulation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Modulation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Modulation& Modulation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Modulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Modulation::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Modulation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&end_point_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&end_point_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Modulation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 end_bar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_end_bar(&has_bits);
          end_bar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double end_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_end_point(&has_bits);
          end_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 start_bar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_start_bar(&has_bits);
          start_bar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double start_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_start_point(&has_bits);
          start_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Modulation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Modulation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 end_bar = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_end_bar(), target);
  }

  // optional double end_point = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_end_point(), target);
  }

  // optional int32 start_bar = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_start_bar(), target);
  }

  // optional double start_point = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_start_point(), target);
  }

  // optional double value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Modulation)
  return target;
}

size_t Modulation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Modulation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double end_point = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 end_bar = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_end_bar());
    }

    // optional int32 start_bar = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_start_bar());
    }

    // optional double start_point = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double value = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Modulation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Modulation)
  GOOGLE_DCHECK_NE(&from, this);
  const Modulation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Modulation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Modulation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Modulation)
    MergeFrom(*source);
  }
}

void Modulation::MergeFrom(const Modulation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Modulation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      end_point_ = from.end_point_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_bar_ = from.end_bar_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_bar_ = from.start_bar_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_point_ = from.start_point_;
    }
    if (cached_has_bits & 0x00000010u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Modulation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Modulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Modulation::CopyFrom(const Modulation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Modulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Modulation::IsInitialized() const {
  return true;
}

void Modulation::InternalSwap(Modulation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Modulation, value_)
      + sizeof(Modulation::value_)
      - PROTOBUF_FIELD_OFFSET(Modulation, end_point_)>(
          reinterpret_cast<char*>(&end_point_),
          reinterpret_cast<char*>(&other->end_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Modulation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Mood::InitAsDefaultInstance() {
  ::mead101::mead::_Mood_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::mead101::avs::CurrentTerritoryCode*>(
      ::mead101::avs::CurrentTerritoryCode::internal_default_instance());
  ::mead101::mead::_Mood_default_instance_._instance.get_mutable()->value_ = const_cast< ::mead101::mead::MoodValue*>(
      ::mead101::mead::MoodValue::internal_default_instance());
}
class Mood::_Internal {
 public:
  using HasBits = decltype(std::declval<Mood>()._has_bits_);
  static const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code(const Mood* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::MoodValue& value(const Mood* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mead101::avs::CurrentTerritoryCode&
Mood::_Internal::applicable_territory_code(const Mood* msg) {
  return *msg->applicable_territory_code_;
}
const ::mead101::mead::MoodValue&
Mood::_Internal::value(const Mood* msg) {
  return *msg->value_;
}
void Mood::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Mood::Mood(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  description_(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Mood)
}
Mood::Mood(const Mood& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      description_(from.description_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::mead101::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::mead101::mead::MoodValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Mood)
}

void Mood::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mood_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(value_));
}

Mood::~Mood() {
  // @@protoc_insertion_point(destructor:mead101.mead.Mood)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Mood::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete value_;
}

void Mood::ArenaDtor(void* object) {
  Mood* _this = reinterpret_cast< Mood* >(object);
  (void)_this;
}
void Mood::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mood::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mood& Mood::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mood_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Mood::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Mood)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.Clear();
  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mood::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.TextWithoutTerritory description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_description(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Mood.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.MoodValue value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mood::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Mood)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // repeated .mead101.mead.TextWithoutTerritory description = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_description_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_description(i), target, stream);
  }

  // repeated string metadata_source_reference = 3;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Mood.metadata_source_reference");
    target = stream->WriteString(3, s, target);
  }

  // optional .mead101.mead.MoodValue value = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Mood)
  return target;
}

size_t Mood::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Mood)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.TextWithoutTerritory description = 2;
  total_size += 1UL * this->_internal_description_size();
  for (const auto& msg : this->description_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metadata_source_reference = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .mead101.mead.MoodValue value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mood::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Mood)
  GOOGLE_DCHECK_NE(&from, this);
  const Mood* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mood>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Mood)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Mood)
    MergeFrom(*source);
  }
}

void Mood::MergeFrom(const Mood& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Mood)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  description_.MergeFrom(from.description_);
  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_applicable_territory_code()->::mead101::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::mead101::mead::MoodValue::MergeFrom(from._internal_value());
    }
  }
}

void Mood::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Mood)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mood::CopyFrom(const Mood& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Mood)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mood::IsInitialized() const {
  return true;
}

void Mood::InternalSwap(Mood* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.InternalSwap(&other->description_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mood, value_)
      + sizeof(Mood::value_)
      - PROTOBUF_FIELD_OFFSET(Mood, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mood::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoodValue::InitAsDefaultInstance() {
  ::mead101::mead::_MoodValue_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::MoodType*>(
      ::mead101::avs::MoodType::internal_default_instance());
}
class MoodValue::_Internal {
 public:
  using HasBits = decltype(std::declval<MoodValue>()._has_bits_);
  static void set_has_applies_to_composition(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_applies_to_lyrics(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::MoodType& ext_value(const MoodValue* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::MoodType&
MoodValue::_Internal::ext_value(const MoodValue* msg) {
  return *msg->ext_value_;
}
void MoodValue::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
MoodValue::MoodValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.MoodValue)
}
MoodValue::MoodValue(const MoodValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::MoodType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  ::memcpy(&applies_to_composition_, &from.applies_to_composition_,
    static_cast<size_t>(reinterpret_cast<char*>(&applies_to_lyrics_) -
    reinterpret_cast<char*>(&applies_to_composition_)) + sizeof(applies_to_lyrics_));
  // @@protoc_insertion_point(copy_constructor:mead101.mead.MoodValue)
}

void MoodValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoodValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ext_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applies_to_lyrics_) -
      reinterpret_cast<char*>(&ext_value_)) + sizeof(applies_to_lyrics_));
}

MoodValue::~MoodValue() {
  // @@protoc_insertion_point(destructor:mead101.mead.MoodValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoodValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void MoodValue::ArenaDtor(void* object) {
  MoodValue* _this = reinterpret_cast< MoodValue* >(object);
  (void)_this;
}
void MoodValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoodValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoodValue& MoodValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoodValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void MoodValue::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.MoodValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  ::memset(&applies_to_composition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applies_to_lyrics_) -
      reinterpret_cast<char*>(&applies_to_composition_)) + sizeof(applies_to_lyrics_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoodValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool applies_to_composition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_applies_to_composition(&has_bits);
          applies_to_composition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool applies_to_lyrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_applies_to_lyrics(&has_bits);
          applies_to_lyrics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string namespace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.MoodValue.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.MoodValue.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.MoodType ext_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoodValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.MoodValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool applies_to_composition = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_applies_to_composition(), target);
  }

  // optional bool applies_to_lyrics = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_applies_to_lyrics(), target);
  }

  // optional string namespace = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.MoodValue.namespace");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.MoodValue.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.MoodType ext_value = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.MoodValue)
  return target;
}

size_t MoodValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.MoodValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string namespace = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.MoodType ext_value = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

    // optional bool applies_to_composition = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool applies_to_lyrics = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoodValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.MoodValue)
  GOOGLE_DCHECK_NE(&from, this);
  const MoodValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoodValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.MoodValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.MoodValue)
    MergeFrom(*source);
  }
}

void MoodValue::MergeFrom(const MoodValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.MoodValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::MoodType::MergeFrom(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000008u) {
      applies_to_composition_ = from.applies_to_composition_;
    }
    if (cached_has_bits & 0x00000010u) {
      applies_to_lyrics_ = from.applies_to_lyrics_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoodValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.MoodValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoodValue::CopyFrom(const MoodValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.MoodValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoodValue::IsInitialized() const {
  return true;
}

void MoodValue::InternalSwap(MoodValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoodValue, applies_to_lyrics_)
      + sizeof(MoodValue::applies_to_lyrics_)
      - PROTOBUF_FIELD_OFFSET(MoodValue, ext_value_)>(
          reinterpret_cast<char*>(&ext_value_),
          reinterpret_cast<char*>(&other->ext_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoodValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MusicalWorkId::InitAsDefaultInstance() {
}
class MusicalWorkId::_Internal {
 public:
  using HasBits = decltype(std::declval<MusicalWorkId>()._has_bits_);
  static void set_has_i_s_w_c(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_opus_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MusicalWorkId::MusicalWorkId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  composer_catalog_number_(arena),
  proprietary_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.MusicalWorkId)
}
MusicalWorkId::MusicalWorkId(const MusicalWorkId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      composer_catalog_number_(from.composer_catalog_number_),
      proprietary_id_(from.proprietary_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  i_s_w_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_w_c()) {
    i_s_w_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_w_c(),
      GetArena());
  }
  opus_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_opus_number()) {
    opus_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_opus_number(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.MusicalWorkId)
}

void MusicalWorkId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  i_s_w_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opus_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MusicalWorkId::~MusicalWorkId() {
  // @@protoc_insertion_point(destructor:mead101.mead.MusicalWorkId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MusicalWorkId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  i_s_w_c_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opus_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MusicalWorkId::ArenaDtor(void* object) {
  MusicalWorkId* _this = reinterpret_cast< MusicalWorkId* >(object);
  (void)_this;
}
void MusicalWorkId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MusicalWorkId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MusicalWorkId& MusicalWorkId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void MusicalWorkId::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.MusicalWorkId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  composer_catalog_number_.Clear();
  proprietary_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      i_s_w_c_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      opus_number_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MusicalWorkId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string composer_catalog_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_composer_catalog_number();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.MusicalWorkId.composer_catalog_number");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string i_s_w_c = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_i_s_w_c();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.MusicalWorkId.i_s_w_c");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string opus_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_opus_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.MusicalWorkId.opus_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.ProprietaryId proprietary_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proprietary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MusicalWorkId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.MusicalWorkId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string composer_catalog_number = 1;
  for (int i = 0, n = this->_internal_composer_catalog_number_size(); i < n; i++) {
    const auto& s = this->_internal_composer_catalog_number(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.MusicalWorkId.composer_catalog_number");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string i_s_w_c = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_w_c().data(), static_cast<int>(this->_internal_i_s_w_c().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.MusicalWorkId.i_s_w_c");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_i_s_w_c(), target);
  }

  // optional string opus_number = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_opus_number().data(), static_cast<int>(this->_internal_opus_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.MusicalWorkId.opus_number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_opus_number(), target);
  }

  // repeated .mead101.mead.ProprietaryId proprietary_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proprietary_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_proprietary_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.MusicalWorkId)
  return target;
}

size_t MusicalWorkId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.MusicalWorkId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string composer_catalog_number = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(composer_catalog_number_.size());
  for (int i = 0, n = composer_catalog_number_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      composer_catalog_number_.Get(i));
  }

  // repeated .mead101.mead.ProprietaryId proprietary_id = 4;
  total_size += 1UL * this->_internal_proprietary_id_size();
  for (const auto& msg : this->proprietary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string i_s_w_c = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_w_c());
    }

    // optional string opus_number = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_opus_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MusicalWorkId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.MusicalWorkId)
  GOOGLE_DCHECK_NE(&from, this);
  const MusicalWorkId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MusicalWorkId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.MusicalWorkId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.MusicalWorkId)
    MergeFrom(*source);
  }
}

void MusicalWorkId::MergeFrom(const MusicalWorkId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.MusicalWorkId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  composer_catalog_number_.MergeFrom(from.composer_catalog_number_);
  proprietary_id_.MergeFrom(from.proprietary_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_i_s_w_c(from._internal_i_s_w_c());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_opus_number(from._internal_opus_number());
    }
  }
}

void MusicalWorkId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.MusicalWorkId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MusicalWorkId::CopyFrom(const MusicalWorkId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.MusicalWorkId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MusicalWorkId::IsInitialized() const {
  return true;
}

void MusicalWorkId::InternalSwap(MusicalWorkId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  composer_catalog_number_.InternalSwap(&other->composer_catalog_number_);
  proprietary_id_.InternalSwap(&other->proprietary_id_);
  i_s_w_c_.Swap(&other->i_s_w_c_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  opus_number_.Swap(&other->opus_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MusicalWorkId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Name::InitAsDefaultInstance() {
}
class Name::_Internal {
 public:
  using HasBits = decltype(std::declval<Name>()._has_bits_);
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Name::Name(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Name)
}
Name::Name(const Name& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Name)
}

void Name::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Name_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Name::~Name() {
  // @@protoc_insertion_point(destructor:mead101.mead.Name)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Name::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Name::ArenaDtor(void* object) {
  Name* _this = reinterpret_cast< Name* >(object);
  (void)_this;
}
void Name::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Name::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Name& Name::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Name_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Name::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Name)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Name::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language_and_script_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Name.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Name.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Name::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Name)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language_and_script_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Name.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language_and_script_code(), target);
  }

  // optional string ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Name.ext_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Name)
  return target;
}

size_t Name::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Name)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string language_and_script_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Name::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Name)
  GOOGLE_DCHECK_NE(&from, this);
  const Name* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Name>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Name)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Name)
    MergeFrom(*source);
  }
}

void Name::MergeFrom(const Name& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Name)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
  }
}

void Name::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Name::CopyFrom(const Name& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Name::IsInitialized() const {
  return true;
}

void Name::InternalSwap(Name* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Name::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NameWithPronunciation::InitAsDefaultInstance() {
}
class NameWithPronunciation::_Internal {
 public:
  using HasBits = decltype(std::declval<NameWithPronunciation>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NameWithPronunciation::NameWithPronunciation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pronunciation_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.NameWithPronunciation)
}
NameWithPronunciation::NameWithPronunciation(const NameWithPronunciation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pronunciation_(from.pronunciation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.NameWithPronunciation)
}

void NameWithPronunciation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NameWithPronunciation::~NameWithPronunciation() {
  // @@protoc_insertion_point(destructor:mead101.mead.NameWithPronunciation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NameWithPronunciation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NameWithPronunciation::ArenaDtor(void* object) {
  NameWithPronunciation* _this = reinterpret_cast< NameWithPronunciation* >(object);
  (void)_this;
}
void NameWithPronunciation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NameWithPronunciation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NameWithPronunciation& NameWithPronunciation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void NameWithPronunciation::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.NameWithPronunciation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pronunciation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NameWithPronunciation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.NameWithPronunciation.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Pronunciation pronunciation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pronunciation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NameWithPronunciation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.NameWithPronunciation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.NameWithPronunciation.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .mead101.mead.Pronunciation pronunciation = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pronunciation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_pronunciation(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.NameWithPronunciation)
  return target;
}

size_t NameWithPronunciation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.NameWithPronunciation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.Pronunciation pronunciation = 2;
  total_size += 1UL * this->_internal_pronunciation_size();
  for (const auto& msg : this->pronunciation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NameWithPronunciation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.NameWithPronunciation)
  GOOGLE_DCHECK_NE(&from, this);
  const NameWithPronunciation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NameWithPronunciation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.NameWithPronunciation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.NameWithPronunciation)
    MergeFrom(*source);
  }
}

void NameWithPronunciation::MergeFrom(const NameWithPronunciation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.NameWithPronunciation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pronunciation_.MergeFrom(from.pronunciation_);
  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
}

void NameWithPronunciation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.NameWithPronunciation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameWithPronunciation::CopyFrom(const NameWithPronunciation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.NameWithPronunciation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameWithPronunciation::IsInitialized() const {
  return true;
}

void NameWithPronunciation::InternalSwap(NameWithPronunciation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pronunciation_.InternalSwap(&other->pronunciation_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NameWithPronunciation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NameWithPronunciationAndScriptCode::InitAsDefaultInstance() {
  ::mead101::mead::_NameWithPronunciationAndScriptCode_default_instance_._instance.get_mutable()->name_ = const_cast< ::mead101::mead::Name*>(
      ::mead101::mead::Name::internal_default_instance());
}
class NameWithPronunciationAndScriptCode::_Internal {
 public:
  using HasBits = decltype(std::declval<NameWithPronunciationAndScriptCode>()._has_bits_);
  static const ::mead101::mead::Name& name(const NameWithPronunciationAndScriptCode* msg);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mead101::mead::Name&
NameWithPronunciationAndScriptCode::_Internal::name(const NameWithPronunciationAndScriptCode* msg) {
  return *msg->name_;
}
NameWithPronunciationAndScriptCode::NameWithPronunciationAndScriptCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pronunciation_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.NameWithPronunciationAndScriptCode)
}
NameWithPronunciationAndScriptCode::NameWithPronunciationAndScriptCode(const NameWithPronunciationAndScriptCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pronunciation_(from.pronunciation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_name()) {
    name_ = new ::mead101::mead::Name(*from.name_);
  } else {
    name_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.NameWithPronunciationAndScriptCode)
}

void NameWithPronunciationAndScriptCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NameWithPronunciationAndScriptCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  name_ = nullptr;
}

NameWithPronunciationAndScriptCode::~NameWithPronunciationAndScriptCode() {
  // @@protoc_insertion_point(destructor:mead101.mead.NameWithPronunciationAndScriptCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NameWithPronunciationAndScriptCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete name_;
}

void NameWithPronunciationAndScriptCode::ArenaDtor(void* object) {
  NameWithPronunciationAndScriptCode* _this = reinterpret_cast< NameWithPronunciationAndScriptCode* >(object);
  (void)_this;
}
void NameWithPronunciationAndScriptCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NameWithPronunciationAndScriptCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NameWithPronunciationAndScriptCode& NameWithPronunciationAndScriptCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NameWithPronunciationAndScriptCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void NameWithPronunciationAndScriptCode::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.NameWithPronunciationAndScriptCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pronunciation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(name_ != nullptr);
    name_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NameWithPronunciationAndScriptCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.Name name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Pronunciation pronunciation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pronunciation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NameWithPronunciationAndScriptCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.NameWithPronunciationAndScriptCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.Name name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::name(this), target, stream);
  }

  // repeated .mead101.mead.Pronunciation pronunciation = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pronunciation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_pronunciation(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.NameWithPronunciationAndScriptCode)
  return target;
}

size_t NameWithPronunciationAndScriptCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.NameWithPronunciationAndScriptCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.Pronunciation pronunciation = 2;
  total_size += 1UL * this->_internal_pronunciation_size();
  for (const auto& msg : this->pronunciation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .mead101.mead.Name name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NameWithPronunciationAndScriptCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.NameWithPronunciationAndScriptCode)
  GOOGLE_DCHECK_NE(&from, this);
  const NameWithPronunciationAndScriptCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NameWithPronunciationAndScriptCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.NameWithPronunciationAndScriptCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.NameWithPronunciationAndScriptCode)
    MergeFrom(*source);
  }
}

void NameWithPronunciationAndScriptCode::MergeFrom(const NameWithPronunciationAndScriptCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.NameWithPronunciationAndScriptCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pronunciation_.MergeFrom(from.pronunciation_);
  if (from._internal_has_name()) {
    _internal_mutable_name()->::mead101::mead::Name::MergeFrom(from._internal_name());
  }
}

void NameWithPronunciationAndScriptCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.NameWithPronunciationAndScriptCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameWithPronunciationAndScriptCode::CopyFrom(const NameWithPronunciationAndScriptCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.NameWithPronunciationAndScriptCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameWithPronunciationAndScriptCode::IsInitialized() const {
  return true;
}

void NameWithPronunciationAndScriptCode::InternalSwap(NameWithPronunciationAndScriptCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pronunciation_.InternalSwap(&other->pronunciation_);
  swap(name_, other->name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NameWithPronunciationAndScriptCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Party::InitAsDefaultInstance() {
}
class Party::_Internal {
 public:
  using HasBits = decltype(std::declval<Party>()._has_bits_);
  static void set_has_d_p_i_d(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_i_p_n(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_i_s_n_i(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ipi_name_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_party_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Party::Party(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proprietary_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Party)
}
Party::Party(const Party& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      proprietary_id_(from.proprietary_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  d_p_i_d_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_d_p_i_d()) {
    d_p_i_d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_d_p_i_d(),
      GetArena());
  }
  i_p_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_p_n()) {
    i_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_p_n(),
      GetArena());
  }
  i_s_n_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_n_i()) {
    i_s_n_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_n_i(),
      GetArena());
  }
  ipi_name_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipi_name_number()) {
    ipi_name_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ipi_name_number(),
      GetArena());
  }
  party_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_party_name()) {
    party_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_party_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Party)
}

void Party::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Party_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  d_p_i_d_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_p_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_n_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipi_name_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Party::~Party() {
  // @@protoc_insertion_point(destructor:mead101.mead.Party)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Party::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  d_p_i_d_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_p_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_n_i_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipi_name_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Party::ArenaDtor(void* object) {
  Party* _this = reinterpret_cast< Party* >(object);
  (void)_this;
}
void Party::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Party::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Party& Party::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Party_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Party::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Party)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proprietary_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      d_p_i_d_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      i_p_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      i_s_n_i_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ipi_name_number_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      party_name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Party::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string d_p_i_d = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_d_p_i_d();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Party.d_p_i_d");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_p_n = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_i_p_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Party.i_p_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_s_n_i = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_i_s_n_i();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Party.i_s_n_i");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ipi_name_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ipi_name_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Party.ipi_name_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string party_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_party_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Party.party_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.ProprietaryId proprietary_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proprietary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Party::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Party)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string d_p_i_d = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_d_p_i_d().data(), static_cast<int>(this->_internal_d_p_i_d().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Party.d_p_i_d");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_d_p_i_d(), target);
  }

  // optional string i_p_n = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_p_n().data(), static_cast<int>(this->_internal_i_p_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Party.i_p_n");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_i_p_n(), target);
  }

  // optional string i_s_n_i = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_n_i().data(), static_cast<int>(this->_internal_i_s_n_i().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Party.i_s_n_i");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_i_s_n_i(), target);
  }

  // optional string ipi_name_number = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipi_name_number().data(), static_cast<int>(this->_internal_ipi_name_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Party.ipi_name_number");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ipi_name_number(), target);
  }

  // optional string party_name = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_party_name().data(), static_cast<int>(this->_internal_party_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Party.party_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_party_name(), target);
  }

  // repeated .mead101.mead.ProprietaryId proprietary_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proprietary_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_proprietary_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Party)
  return target;
}

size_t Party::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Party)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.ProprietaryId proprietary_id = 6;
  total_size += 1UL * this->_internal_proprietary_id_size();
  for (const auto& msg : this->proprietary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string d_p_i_d = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_d_p_i_d());
    }

    // optional string i_p_n = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_p_n());
    }

    // optional string i_s_n_i = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_n_i());
    }

    // optional string ipi_name_number = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipi_name_number());
    }

    // optional string party_name = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_party_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Party::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Party)
  GOOGLE_DCHECK_NE(&from, this);
  const Party* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Party>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Party)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Party)
    MergeFrom(*source);
  }
}

void Party::MergeFrom(const Party& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Party)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proprietary_id_.MergeFrom(from.proprietary_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_d_p_i_d(from._internal_d_p_i_d());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_i_p_n(from._internal_i_p_n());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_i_s_n_i(from._internal_i_s_n_i());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_ipi_name_number(from._internal_ipi_name_number());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_party_name(from._internal_party_name());
    }
  }
}

void Party::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Party)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Party::CopyFrom(const Party& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Party)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Party::IsInitialized() const {
  return true;
}

void Party::InternalSwap(Party* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  proprietary_id_.InternalSwap(&other->proprietary_id_);
  d_p_i_d_.Swap(&other->d_p_i_d_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_p_n_.Swap(&other->i_p_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_s_n_i_.Swap(&other->i_s_n_i_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipi_name_number_.Swap(&other->ipi_name_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  party_name_.Swap(&other->party_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Party::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PartyDescriptor::InitAsDefaultInstance() {
}
class PartyDescriptor::_Internal {
 public:
};

PartyDescriptor::PartyDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  party_id_(arena),
  party_name_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.PartyDescriptor)
}
PartyDescriptor::PartyDescriptor(const PartyDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      party_id_(from.party_id_),
      party_name_(from.party_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mead101.mead.PartyDescriptor)
}

void PartyDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyDescriptor_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
}

PartyDescriptor::~PartyDescriptor() {
  // @@protoc_insertion_point(destructor:mead101.mead.PartyDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PartyDescriptor::ArenaDtor(void* object) {
  PartyDescriptor* _this = reinterpret_cast< PartyDescriptor* >(object);
  (void)_this;
}
void PartyDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyDescriptor& PartyDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyDescriptor_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void PartyDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.PartyDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.Clear();
  party_name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.DetailedPartyId party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_party_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.PartyName party_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_party_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.PartyDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.DetailedPartyId party_id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_party_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_party_id(i), target, stream);
  }

  // repeated .mead101.mead.PartyName party_name = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_party_name_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_party_name(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.PartyDescriptor)
  return target;
}

size_t PartyDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.PartyDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.DetailedPartyId party_id = 1;
  total_size += 1UL * this->_internal_party_id_size();
  for (const auto& msg : this->party_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.PartyName party_name = 2;
  total_size += 1UL * this->_internal_party_name_size();
  for (const auto& msg : this->party_name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.PartyDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.PartyDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.PartyDescriptor)
    MergeFrom(*source);
  }
}

void PartyDescriptor::MergeFrom(const PartyDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.PartyDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  party_id_.MergeFrom(from.party_id_);
  party_name_.MergeFrom(from.party_name_);
}

void PartyDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.PartyDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyDescriptor::CopyFrom(const PartyDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.PartyDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyDescriptor::IsInitialized() const {
  return true;
}

void PartyDescriptor::InternalSwap(PartyDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_id_.InternalSwap(&other->party_id_);
  party_name_.InternalSwap(&other->party_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PartyInformation::InitAsDefaultInstance() {
  ::mead101::mead::_PartyInformation_default_instance_._instance.get_mutable()->classical_period_ = const_cast< ::mead101::mead::ClassicalPeriod*>(
      ::mead101::mead::ClassicalPeriod::internal_default_instance());
  ::mead101::mead::_PartyInformation_default_instance_._instance.get_mutable()->party_ = const_cast< ::mead101::mead::PartyWithNames*>(
      ::mead101::mead::PartyWithNames::internal_default_instance());
  ::mead101::mead::_PartyInformation_default_instance_._instance.get_mutable()->vocal_register_ = const_cast< ::mead101::mead::VocalRegister*>(
      ::mead101::mead::VocalRegister::internal_default_instance());
}
class PartyInformation::_Internal {
 public:
  using HasBits = decltype(std::declval<PartyInformation>()._has_bits_);
  static const ::mead101::mead::ClassicalPeriod& classical_period(const PartyInformation* msg);
  static void set_has_classical_period(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::PartyWithNames& party(const PartyInformation* msg);
  static void set_has_party(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::VocalRegister& vocal_register(const PartyInformation* msg);
  static void set_has_vocal_register(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::mead::ClassicalPeriod&
PartyInformation::_Internal::classical_period(const PartyInformation* msg) {
  return *msg->classical_period_;
}
const ::mead101::mead::PartyWithNames&
PartyInformation::_Internal::party(const PartyInformation* msg) {
  return *msg->party_;
}
const ::mead101::mead::VocalRegister&
PartyInformation::_Internal::vocal_register(const PartyInformation* msg) {
  return *msg->vocal_register_;
}
PartyInformation::PartyInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  artist_type_(arena),
  artistic_influence_(arena),
  award_(arena),
  biography_(arena),
  commentary_note_(arena),
  epoch_(arena),
  focus_track_(arena),
  historic_charting_information_(arena),
  image_(arena),
  is_similar_(arena),
  pseudonym_(arena),
  related_creation_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.PartyInformation)
}
PartyInformation::PartyInformation(const PartyInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      artist_type_(from.artist_type_),
      artistic_influence_(from.artistic_influence_),
      award_(from.award_),
      biography_(from.biography_),
      commentary_note_(from.commentary_note_),
      epoch_(from.epoch_),
      focus_track_(from.focus_track_),
      historic_charting_information_(from.historic_charting_information_),
      image_(from.image_),
      is_similar_(from.is_similar_),
      pseudonym_(from.pseudonym_),
      related_creation_(from.related_creation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_classical_period()) {
    classical_period_ = new ::mead101::mead::ClassicalPeriod(*from.classical_period_);
  } else {
    classical_period_ = nullptr;
  }
  if (from._internal_has_party()) {
    party_ = new ::mead101::mead::PartyWithNames(*from.party_);
  } else {
    party_ = nullptr;
  }
  if (from._internal_has_vocal_register()) {
    vocal_register_ = new ::mead101::mead::VocalRegister(*from.vocal_register_);
  } else {
    vocal_register_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.PartyInformation)
}

void PartyInformation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&classical_period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vocal_register_) -
      reinterpret_cast<char*>(&classical_period_)) + sizeof(vocal_register_));
}

PartyInformation::~PartyInformation() {
  // @@protoc_insertion_point(destructor:mead101.mead.PartyInformation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete classical_period_;
  if (this != internal_default_instance()) delete party_;
  if (this != internal_default_instance()) delete vocal_register_;
}

void PartyInformation::ArenaDtor(void* object) {
  PartyInformation* _this = reinterpret_cast< PartyInformation* >(object);
  (void)_this;
}
void PartyInformation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyInformation& PartyInformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void PartyInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.PartyInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  artist_type_.Clear();
  artistic_influence_.Clear();
  award_.Clear();
  biography_.Clear();
  commentary_note_.Clear();
  epoch_.Clear();
  focus_track_.Clear();
  historic_charting_information_.Clear();
  image_.Clear();
  is_similar_.Clear();
  pseudonym_.Clear();
  related_creation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(classical_period_ != nullptr);
      classical_period_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(party_ != nullptr);
      party_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(vocal_register_ != nullptr);
      vocal_register_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.ArtistType artist_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_artist_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.ArtisticInfluence artistic_influence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_artistic_influence(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.AwardForParty award = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_award(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Biography biography = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_biography(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ClassicalPeriod classical_period = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_classical_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.CommentaryNote commentary_note = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commentary_note(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Epoch epoch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_epoch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.FocusTrack focus_track = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_focus_track(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.HistoricChartingInformationForParty historic_charting_information = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_historic_charting_information(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Image image = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.SimilarParty is_similar = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_is_similar(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.PartyWithNames party = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_party(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Pseudonym pseudonym = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pseudonym(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.RelatedCreation related_creation = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_related_creation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.VocalRegister vocal_register = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_vocal_register(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyInformation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.PartyInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.ArtistType artist_type = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_artist_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_artist_type(i), target, stream);
  }

  // repeated .mead101.mead.ArtisticInfluence artistic_influence = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_artistic_influence_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_artistic_influence(i), target, stream);
  }

  // repeated .mead101.mead.AwardForParty award = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_award_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_award(i), target, stream);
  }

  // repeated .mead101.mead.Biography biography = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_biography_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_biography(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.ClassicalPeriod classical_period = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::classical_period(this), target, stream);
  }

  // repeated .mead101.mead.CommentaryNote commentary_note = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_commentary_note_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_commentary_note(i), target, stream);
  }

  // repeated .mead101.mead.Epoch epoch = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_epoch_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_epoch(i), target, stream);
  }

  // repeated .mead101.mead.FocusTrack focus_track = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_focus_track_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_focus_track(i), target, stream);
  }

  // repeated .mead101.mead.HistoricChartingInformationForParty historic_charting_information = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_historic_charting_information_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_historic_charting_information(i), target, stream);
  }

  // repeated .mead101.mead.Image image = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_image_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_image(i), target, stream);
  }

  // repeated .mead101.mead.SimilarParty is_similar = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_is_similar_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_is_similar(i), target, stream);
  }

  // optional .mead101.mead.PartyWithNames party = 12;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::party(this), target, stream);
  }

  // repeated .mead101.mead.Pseudonym pseudonym = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pseudonym_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_pseudonym(i), target, stream);
  }

  // repeated .mead101.mead.RelatedCreation related_creation = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_related_creation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_related_creation(i), target, stream);
  }

  // optional .mead101.mead.VocalRegister vocal_register = 15;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::vocal_register(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.PartyInformation)
  return target;
}

size_t PartyInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.PartyInformation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.ArtistType artist_type = 1;
  total_size += 1UL * this->_internal_artist_type_size();
  for (const auto& msg : this->artist_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.ArtisticInfluence artistic_influence = 2;
  total_size += 1UL * this->_internal_artistic_influence_size();
  for (const auto& msg : this->artistic_influence_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.AwardForParty award = 3;
  total_size += 1UL * this->_internal_award_size();
  for (const auto& msg : this->award_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Biography biography = 4;
  total_size += 1UL * this->_internal_biography_size();
  for (const auto& msg : this->biography_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.CommentaryNote commentary_note = 6;
  total_size += 1UL * this->_internal_commentary_note_size();
  for (const auto& msg : this->commentary_note_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Epoch epoch = 7;
  total_size += 1UL * this->_internal_epoch_size();
  for (const auto& msg : this->epoch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.FocusTrack focus_track = 8;
  total_size += 1UL * this->_internal_focus_track_size();
  for (const auto& msg : this->focus_track_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.HistoricChartingInformationForParty historic_charting_information = 9;
  total_size += 1UL * this->_internal_historic_charting_information_size();
  for (const auto& msg : this->historic_charting_information_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Image image = 10;
  total_size += 1UL * this->_internal_image_size();
  for (const auto& msg : this->image_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.SimilarParty is_similar = 11;
  total_size += 1UL * this->_internal_is_similar_size();
  for (const auto& msg : this->is_similar_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Pseudonym pseudonym = 13;
  total_size += 1UL * this->_internal_pseudonym_size();
  for (const auto& msg : this->pseudonym_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.RelatedCreation related_creation = 14;
  total_size += 1UL * this->_internal_related_creation_size();
  for (const auto& msg : this->related_creation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .mead101.mead.ClassicalPeriod classical_period = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classical_period_);
    }

    // optional .mead101.mead.PartyWithNames party = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *party_);
    }

    // optional .mead101.mead.VocalRegister vocal_register = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vocal_register_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyInformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.PartyInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyInformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyInformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.PartyInformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.PartyInformation)
    MergeFrom(*source);
  }
}

void PartyInformation::MergeFrom(const PartyInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.PartyInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  artist_type_.MergeFrom(from.artist_type_);
  artistic_influence_.MergeFrom(from.artistic_influence_);
  award_.MergeFrom(from.award_);
  biography_.MergeFrom(from.biography_);
  commentary_note_.MergeFrom(from.commentary_note_);
  epoch_.MergeFrom(from.epoch_);
  focus_track_.MergeFrom(from.focus_track_);
  historic_charting_information_.MergeFrom(from.historic_charting_information_);
  image_.MergeFrom(from.image_);
  is_similar_.MergeFrom(from.is_similar_);
  pseudonym_.MergeFrom(from.pseudonym_);
  related_creation_.MergeFrom(from.related_creation_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_classical_period()->::mead101::mead::ClassicalPeriod::MergeFrom(from._internal_classical_period());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_party()->::mead101::mead::PartyWithNames::MergeFrom(from._internal_party());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_vocal_register()->::mead101::mead::VocalRegister::MergeFrom(from._internal_vocal_register());
    }
  }
}

void PartyInformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.PartyInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyInformation::CopyFrom(const PartyInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.PartyInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyInformation::IsInitialized() const {
  return true;
}

void PartyInformation::InternalSwap(PartyInformation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  artist_type_.InternalSwap(&other->artist_type_);
  artistic_influence_.InternalSwap(&other->artistic_influence_);
  award_.InternalSwap(&other->award_);
  biography_.InternalSwap(&other->biography_);
  commentary_note_.InternalSwap(&other->commentary_note_);
  epoch_.InternalSwap(&other->epoch_);
  focus_track_.InternalSwap(&other->focus_track_);
  historic_charting_information_.InternalSwap(&other->historic_charting_information_);
  image_.InternalSwap(&other->image_);
  is_similar_.InternalSwap(&other->is_similar_);
  pseudonym_.InternalSwap(&other->pseudonym_);
  related_creation_.InternalSwap(&other->related_creation_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartyInformation, vocal_register_)
      + sizeof(PartyInformation::vocal_register_)
      - PROTOBUF_FIELD_OFFSET(PartyInformation, classical_period_)>(
          reinterpret_cast<char*>(&classical_period_),
          reinterpret_cast<char*>(&other->classical_period_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyInformation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PartyInformationList::InitAsDefaultInstance() {
}
class PartyInformationList::_Internal {
 public:
};

PartyInformationList::PartyInformationList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  party_information_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.PartyInformationList)
}
PartyInformationList::PartyInformationList(const PartyInformationList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      party_information_(from.party_information_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mead101.mead.PartyInformationList)
}

void PartyInformationList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
}

PartyInformationList::~PartyInformationList() {
  // @@protoc_insertion_point(destructor:mead101.mead.PartyInformationList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyInformationList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PartyInformationList::ArenaDtor(void* object) {
  PartyInformationList* _this = reinterpret_cast< PartyInformationList* >(object);
  (void)_this;
}
void PartyInformationList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyInformationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyInformationList& PartyInformationList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void PartyInformationList::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.PartyInformationList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_information_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyInformationList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.PartyInformation party_information = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_party_information(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyInformationList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.PartyInformationList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.PartyInformation party_information = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_party_information_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_party_information(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.PartyInformationList)
  return target;
}

size_t PartyInformationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.PartyInformationList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.PartyInformation party_information = 1;
  total_size += 1UL * this->_internal_party_information_size();
  for (const auto& msg : this->party_information_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyInformationList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.PartyInformationList)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyInformationList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyInformationList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.PartyInformationList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.PartyInformationList)
    MergeFrom(*source);
  }
}

void PartyInformationList::MergeFrom(const PartyInformationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.PartyInformationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  party_information_.MergeFrom(from.party_information_);
}

void PartyInformationList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.PartyInformationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyInformationList::CopyFrom(const PartyInformationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.PartyInformationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyInformationList::IsInitialized() const {
  return true;
}

void PartyInformationList::InternalSwap(PartyInformationList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_information_.InternalSwap(&other->party_information_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyInformationList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PartyName::InitAsDefaultInstance() {
  ::mead101::mead::_PartyName_default_instance_._instance.get_mutable()->abbreviated_name_ = const_cast< ::mead101::mead::Name*>(
      ::mead101::mead::Name::internal_default_instance());
  ::mead101::mead::_PartyName_default_instance_._instance.get_mutable()->full_name_ = const_cast< ::mead101::mead::Name*>(
      ::mead101::mead::Name::internal_default_instance());
  ::mead101::mead::_PartyName_default_instance_._instance.get_mutable()->full_name_indexed_ = const_cast< ::mead101::mead::Name*>(
      ::mead101::mead::Name::internal_default_instance());
  ::mead101::mead::_PartyName_default_instance_._instance.get_mutable()->key_name_ = const_cast< ::mead101::mead::Name*>(
      ::mead101::mead::Name::internal_default_instance());
  ::mead101::mead::_PartyName_default_instance_._instance.get_mutable()->names_after_key_name_ = const_cast< ::mead101::mead::Name*>(
      ::mead101::mead::Name::internal_default_instance());
  ::mead101::mead::_PartyName_default_instance_._instance.get_mutable()->names_before_key_name_ = const_cast< ::mead101::mead::Name*>(
      ::mead101::mead::Name::internal_default_instance());
}
class PartyName::_Internal {
 public:
  using HasBits = decltype(std::declval<PartyName>()._has_bits_);
  static const ::mead101::mead::Name& abbreviated_name(const PartyName* msg);
  static void set_has_abbreviated_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::Name& full_name(const PartyName* msg);
  static void set_has_full_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_full_name_ascii_transcribed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::Name& full_name_indexed(const PartyName* msg);
  static void set_has_full_name_indexed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mead101::mead::Name& key_name(const PartyName* msg);
  static void set_has_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::Name& names_after_key_name(const PartyName* msg);
  static void set_has_names_after_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::mead101::mead::Name& names_before_key_name(const PartyName* msg);
  static void set_has_names_before_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::mead101::mead::Name&
PartyName::_Internal::abbreviated_name(const PartyName* msg) {
  return *msg->abbreviated_name_;
}
const ::mead101::mead::Name&
PartyName::_Internal::full_name(const PartyName* msg) {
  return *msg->full_name_;
}
const ::mead101::mead::Name&
PartyName::_Internal::full_name_indexed(const PartyName* msg) {
  return *msg->full_name_indexed_;
}
const ::mead101::mead::Name&
PartyName::_Internal::key_name(const PartyName* msg) {
  return *msg->key_name_;
}
const ::mead101::mead::Name&
PartyName::_Internal::names_after_key_name(const PartyName* msg) {
  return *msg->names_after_key_name_;
}
const ::mead101::mead::Name&
PartyName::_Internal::names_before_key_name(const PartyName* msg) {
  return *msg->names_before_key_name_;
}
PartyName::PartyName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.PartyName)
}
PartyName::PartyName(const PartyName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  full_name_ascii_transcribed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_full_name_ascii_transcribed()) {
    full_name_ascii_transcribed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_full_name_ascii_transcribed(),
      GetArena());
  }
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  if (from._internal_has_abbreviated_name()) {
    abbreviated_name_ = new ::mead101::mead::Name(*from.abbreviated_name_);
  } else {
    abbreviated_name_ = nullptr;
  }
  if (from._internal_has_full_name()) {
    full_name_ = new ::mead101::mead::Name(*from.full_name_);
  } else {
    full_name_ = nullptr;
  }
  if (from._internal_has_full_name_indexed()) {
    full_name_indexed_ = new ::mead101::mead::Name(*from.full_name_indexed_);
  } else {
    full_name_indexed_ = nullptr;
  }
  if (from._internal_has_key_name()) {
    key_name_ = new ::mead101::mead::Name(*from.key_name_);
  } else {
    key_name_ = nullptr;
  }
  if (from._internal_has_names_after_key_name()) {
    names_after_key_name_ = new ::mead101::mead::Name(*from.names_after_key_name_);
  } else {
    names_after_key_name_ = nullptr;
  }
  if (from._internal_has_names_before_key_name()) {
    names_before_key_name_ = new ::mead101::mead::Name(*from.names_before_key_name_);
  } else {
    names_before_key_name_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.PartyName)
}

void PartyName::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyName_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  full_name_ascii_transcribed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&abbreviated_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&names_before_key_name_) -
      reinterpret_cast<char*>(&abbreviated_name_)) + sizeof(names_before_key_name_));
}

PartyName::~PartyName() {
  // @@protoc_insertion_point(destructor:mead101.mead.PartyName)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyName::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  full_name_ascii_transcribed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete abbreviated_name_;
  if (this != internal_default_instance()) delete full_name_;
  if (this != internal_default_instance()) delete full_name_indexed_;
  if (this != internal_default_instance()) delete key_name_;
  if (this != internal_default_instance()) delete names_after_key_name_;
  if (this != internal_default_instance()) delete names_before_key_name_;
}

void PartyName::ArenaDtor(void* object) {
  PartyName* _this = reinterpret_cast< PartyName* >(object);
  (void)_this;
}
void PartyName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyName& PartyName::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyName_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void PartyName::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.PartyName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      full_name_ascii_transcribed_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(abbreviated_name_ != nullptr);
      abbreviated_name_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(full_name_ != nullptr);
      full_name_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(full_name_indexed_ != nullptr);
      full_name_indexed_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(key_name_ != nullptr);
      key_name_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(names_after_key_name_ != nullptr);
      names_after_key_name_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(names_before_key_name_ != nullptr);
      names_before_key_name_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.Name abbreviated_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_abbreviated_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Name full_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_full_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string full_name_ascii_transcribed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_full_name_ascii_transcribed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PartyName.full_name_ascii_transcribed");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Name full_name_indexed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_full_name_indexed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Name key_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PartyName.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Name names_after_key_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_names_after_key_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Name names_before_key_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_names_before_key_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.PartyName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.Name abbreviated_name = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::abbreviated_name(this), target, stream);
  }

  // optional .mead101.mead.Name full_name = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::full_name(this), target, stream);
  }

  // optional string full_name_ascii_transcribed = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_name_ascii_transcribed().data(), static_cast<int>(this->_internal_full_name_ascii_transcribed().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PartyName.full_name_ascii_transcribed");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_full_name_ascii_transcribed(), target);
  }

  // optional .mead101.mead.Name full_name_indexed = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::full_name_indexed(this), target, stream);
  }

  // optional .mead101.mead.Name key_name = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::key_name(this), target, stream);
  }

  // optional string language_and_script_code = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PartyName.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_language_and_script_code(), target);
  }

  // optional .mead101.mead.Name names_after_key_name = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::names_after_key_name(this), target, stream);
  }

  // optional .mead101.mead.Name names_before_key_name = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::names_before_key_name(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.PartyName)
  return target;
}

size_t PartyName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.PartyName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string full_name_ascii_transcribed = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_name_ascii_transcribed());
    }

    // optional string language_and_script_code = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional .mead101.mead.Name abbreviated_name = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *abbreviated_name_);
    }

    // optional .mead101.mead.Name full_name = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *full_name_);
    }

    // optional .mead101.mead.Name full_name_indexed = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *full_name_indexed_);
    }

    // optional .mead101.mead.Name key_name = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_name_);
    }

    // optional .mead101.mead.Name names_after_key_name = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *names_after_key_name_);
    }

    // optional .mead101.mead.Name names_before_key_name = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *names_before_key_name_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.PartyName)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.PartyName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.PartyName)
    MergeFrom(*source);
  }
}

void PartyName::MergeFrom(const PartyName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.PartyName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_full_name_ascii_transcribed(from._internal_full_name_ascii_transcribed());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_abbreviated_name()->::mead101::mead::Name::MergeFrom(from._internal_abbreviated_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_full_name()->::mead101::mead::Name::MergeFrom(from._internal_full_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_full_name_indexed()->::mead101::mead::Name::MergeFrom(from._internal_full_name_indexed());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_key_name()->::mead101::mead::Name::MergeFrom(from._internal_key_name());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_names_after_key_name()->::mead101::mead::Name::MergeFrom(from._internal_names_after_key_name());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_names_before_key_name()->::mead101::mead::Name::MergeFrom(from._internal_names_before_key_name());
    }
  }
}

void PartyName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.PartyName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyName::CopyFrom(const PartyName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.PartyName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyName::IsInitialized() const {
  return true;
}

void PartyName::InternalSwap(PartyName* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  full_name_ascii_transcribed_.Swap(&other->full_name_ascii_transcribed_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartyName, names_before_key_name_)
      + sizeof(PartyName::names_before_key_name_)
      - PROTOBUF_FIELD_OFFSET(PartyName, abbreviated_name_)>(
          reinterpret_cast<char*>(&abbreviated_name_),
          reinterpret_cast<char*>(&other->abbreviated_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyName::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PartyNameWithPronunciation::InitAsDefaultInstance() {
  ::mead101::mead::_PartyNameWithPronunciation_default_instance_._instance.get_mutable()->abbreviated_name_ = const_cast< ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      ::mead101::mead::NameWithPronunciationAndScriptCode::internal_default_instance());
  ::mead101::mead::_PartyNameWithPronunciation_default_instance_._instance.get_mutable()->full_name_ = const_cast< ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      ::mead101::mead::NameWithPronunciationAndScriptCode::internal_default_instance());
  ::mead101::mead::_PartyNameWithPronunciation_default_instance_._instance.get_mutable()->full_name_ascii_transcribed_ = const_cast< ::mead101::mead::NameWithPronunciation*>(
      ::mead101::mead::NameWithPronunciation::internal_default_instance());
  ::mead101::mead::_PartyNameWithPronunciation_default_instance_._instance.get_mutable()->full_name_indexed_ = const_cast< ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      ::mead101::mead::NameWithPronunciationAndScriptCode::internal_default_instance());
  ::mead101::mead::_PartyNameWithPronunciation_default_instance_._instance.get_mutable()->key_name_ = const_cast< ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      ::mead101::mead::NameWithPronunciationAndScriptCode::internal_default_instance());
  ::mead101::mead::_PartyNameWithPronunciation_default_instance_._instance.get_mutable()->names_after_key_name_ = const_cast< ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      ::mead101::mead::NameWithPronunciationAndScriptCode::internal_default_instance());
  ::mead101::mead::_PartyNameWithPronunciation_default_instance_._instance.get_mutable()->names_before_key_name_ = const_cast< ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      ::mead101::mead::NameWithPronunciationAndScriptCode::internal_default_instance());
}
class PartyNameWithPronunciation::_Internal {
 public:
  using HasBits = decltype(std::declval<PartyNameWithPronunciation>()._has_bits_);
  static const ::mead101::mead::NameWithPronunciationAndScriptCode& abbreviated_name(const PartyNameWithPronunciation* msg);
  static void set_has_abbreviated_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::NameWithPronunciationAndScriptCode& full_name(const PartyNameWithPronunciation* msg);
  static void set_has_full_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::NameWithPronunciation& full_name_ascii_transcribed(const PartyNameWithPronunciation* msg);
  static void set_has_full_name_ascii_transcribed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mead101::mead::NameWithPronunciationAndScriptCode& full_name_indexed(const PartyNameWithPronunciation* msg);
  static void set_has_full_name_indexed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mead101::mead::NameWithPronunciationAndScriptCode& key_name(const PartyNameWithPronunciation* msg);
  static void set_has_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::NameWithPronunciationAndScriptCode& names_after_key_name(const PartyNameWithPronunciation* msg);
  static void set_has_names_after_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::mead101::mead::NameWithPronunciationAndScriptCode& names_before_key_name(const PartyNameWithPronunciation* msg);
  static void set_has_names_before_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::mead101::mead::NameWithPronunciationAndScriptCode&
PartyNameWithPronunciation::_Internal::abbreviated_name(const PartyNameWithPronunciation* msg) {
  return *msg->abbreviated_name_;
}
const ::mead101::mead::NameWithPronunciationAndScriptCode&
PartyNameWithPronunciation::_Internal::full_name(const PartyNameWithPronunciation* msg) {
  return *msg->full_name_;
}
const ::mead101::mead::NameWithPronunciation&
PartyNameWithPronunciation::_Internal::full_name_ascii_transcribed(const PartyNameWithPronunciation* msg) {
  return *msg->full_name_ascii_transcribed_;
}
const ::mead101::mead::NameWithPronunciationAndScriptCode&
PartyNameWithPronunciation::_Internal::full_name_indexed(const PartyNameWithPronunciation* msg) {
  return *msg->full_name_indexed_;
}
const ::mead101::mead::NameWithPronunciationAndScriptCode&
PartyNameWithPronunciation::_Internal::key_name(const PartyNameWithPronunciation* msg) {
  return *msg->key_name_;
}
const ::mead101::mead::NameWithPronunciationAndScriptCode&
PartyNameWithPronunciation::_Internal::names_after_key_name(const PartyNameWithPronunciation* msg) {
  return *msg->names_after_key_name_;
}
const ::mead101::mead::NameWithPronunciationAndScriptCode&
PartyNameWithPronunciation::_Internal::names_before_key_name(const PartyNameWithPronunciation* msg) {
  return *msg->names_before_key_name_;
}
PartyNameWithPronunciation::PartyNameWithPronunciation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.PartyNameWithPronunciation)
}
PartyNameWithPronunciation::PartyNameWithPronunciation(const PartyNameWithPronunciation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  if (from._internal_has_abbreviated_name()) {
    abbreviated_name_ = new ::mead101::mead::NameWithPronunciationAndScriptCode(*from.abbreviated_name_);
  } else {
    abbreviated_name_ = nullptr;
  }
  if (from._internal_has_full_name()) {
    full_name_ = new ::mead101::mead::NameWithPronunciationAndScriptCode(*from.full_name_);
  } else {
    full_name_ = nullptr;
  }
  if (from._internal_has_full_name_ascii_transcribed()) {
    full_name_ascii_transcribed_ = new ::mead101::mead::NameWithPronunciation(*from.full_name_ascii_transcribed_);
  } else {
    full_name_ascii_transcribed_ = nullptr;
  }
  if (from._internal_has_full_name_indexed()) {
    full_name_indexed_ = new ::mead101::mead::NameWithPronunciationAndScriptCode(*from.full_name_indexed_);
  } else {
    full_name_indexed_ = nullptr;
  }
  if (from._internal_has_key_name()) {
    key_name_ = new ::mead101::mead::NameWithPronunciationAndScriptCode(*from.key_name_);
  } else {
    key_name_ = nullptr;
  }
  if (from._internal_has_names_after_key_name()) {
    names_after_key_name_ = new ::mead101::mead::NameWithPronunciationAndScriptCode(*from.names_after_key_name_);
  } else {
    names_after_key_name_ = nullptr;
  }
  if (from._internal_has_names_before_key_name()) {
    names_before_key_name_ = new ::mead101::mead::NameWithPronunciationAndScriptCode(*from.names_before_key_name_);
  } else {
    names_before_key_name_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.PartyNameWithPronunciation)
}

void PartyNameWithPronunciation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyNameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&abbreviated_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&names_before_key_name_) -
      reinterpret_cast<char*>(&abbreviated_name_)) + sizeof(names_before_key_name_));
}

PartyNameWithPronunciation::~PartyNameWithPronunciation() {
  // @@protoc_insertion_point(destructor:mead101.mead.PartyNameWithPronunciation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyNameWithPronunciation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete abbreviated_name_;
  if (this != internal_default_instance()) delete full_name_;
  if (this != internal_default_instance()) delete full_name_ascii_transcribed_;
  if (this != internal_default_instance()) delete full_name_indexed_;
  if (this != internal_default_instance()) delete key_name_;
  if (this != internal_default_instance()) delete names_after_key_name_;
  if (this != internal_default_instance()) delete names_before_key_name_;
}

void PartyNameWithPronunciation::ArenaDtor(void* object) {
  PartyNameWithPronunciation* _this = reinterpret_cast< PartyNameWithPronunciation* >(object);
  (void)_this;
}
void PartyNameWithPronunciation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyNameWithPronunciation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyNameWithPronunciation& PartyNameWithPronunciation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyNameWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void PartyNameWithPronunciation::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.PartyNameWithPronunciation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(abbreviated_name_ != nullptr);
      abbreviated_name_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(full_name_ != nullptr);
      full_name_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(full_name_ascii_transcribed_ != nullptr);
      full_name_ascii_transcribed_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(full_name_indexed_ != nullptr);
      full_name_indexed_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(key_name_ != nullptr);
      key_name_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(names_after_key_name_ != nullptr);
      names_after_key_name_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(names_before_key_name_ != nullptr);
      names_before_key_name_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyNameWithPronunciation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.NameWithPronunciationAndScriptCode abbreviated_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_abbreviated_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.NameWithPronunciationAndScriptCode full_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_full_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.NameWithPronunciation full_name_ascii_transcribed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_full_name_ascii_transcribed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.NameWithPronunciationAndScriptCode full_name_indexed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_full_name_indexed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.NameWithPronunciationAndScriptCode key_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PartyNameWithPronunciation.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.NameWithPronunciationAndScriptCode names_after_key_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_names_after_key_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.NameWithPronunciationAndScriptCode names_before_key_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_names_before_key_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyNameWithPronunciation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.PartyNameWithPronunciation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.NameWithPronunciationAndScriptCode abbreviated_name = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::abbreviated_name(this), target, stream);
  }

  // optional .mead101.mead.NameWithPronunciationAndScriptCode full_name = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::full_name(this), target, stream);
  }

  // optional .mead101.mead.NameWithPronunciation full_name_ascii_transcribed = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::full_name_ascii_transcribed(this), target, stream);
  }

  // optional .mead101.mead.NameWithPronunciationAndScriptCode full_name_indexed = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::full_name_indexed(this), target, stream);
  }

  // optional .mead101.mead.NameWithPronunciationAndScriptCode key_name = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::key_name(this), target, stream);
  }

  // optional string language_and_script_code = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PartyNameWithPronunciation.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_language_and_script_code(), target);
  }

  // optional .mead101.mead.NameWithPronunciationAndScriptCode names_after_key_name = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::names_after_key_name(this), target, stream);
  }

  // optional .mead101.mead.NameWithPronunciationAndScriptCode names_before_key_name = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::names_before_key_name(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.PartyNameWithPronunciation)
  return target;
}

size_t PartyNameWithPronunciation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.PartyNameWithPronunciation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string language_and_script_code = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional .mead101.mead.NameWithPronunciationAndScriptCode abbreviated_name = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *abbreviated_name_);
    }

    // optional .mead101.mead.NameWithPronunciationAndScriptCode full_name = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *full_name_);
    }

    // optional .mead101.mead.NameWithPronunciation full_name_ascii_transcribed = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *full_name_ascii_transcribed_);
    }

    // optional .mead101.mead.NameWithPronunciationAndScriptCode full_name_indexed = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *full_name_indexed_);
    }

    // optional .mead101.mead.NameWithPronunciationAndScriptCode key_name = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_name_);
    }

    // optional .mead101.mead.NameWithPronunciationAndScriptCode names_after_key_name = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *names_after_key_name_);
    }

    // optional .mead101.mead.NameWithPronunciationAndScriptCode names_before_key_name = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *names_before_key_name_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyNameWithPronunciation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.PartyNameWithPronunciation)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyNameWithPronunciation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyNameWithPronunciation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.PartyNameWithPronunciation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.PartyNameWithPronunciation)
    MergeFrom(*source);
  }
}

void PartyNameWithPronunciation::MergeFrom(const PartyNameWithPronunciation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.PartyNameWithPronunciation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_abbreviated_name()->::mead101::mead::NameWithPronunciationAndScriptCode::MergeFrom(from._internal_abbreviated_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_full_name()->::mead101::mead::NameWithPronunciationAndScriptCode::MergeFrom(from._internal_full_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_full_name_ascii_transcribed()->::mead101::mead::NameWithPronunciation::MergeFrom(from._internal_full_name_ascii_transcribed());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_full_name_indexed()->::mead101::mead::NameWithPronunciationAndScriptCode::MergeFrom(from._internal_full_name_indexed());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_key_name()->::mead101::mead::NameWithPronunciationAndScriptCode::MergeFrom(from._internal_key_name());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_names_after_key_name()->::mead101::mead::NameWithPronunciationAndScriptCode::MergeFrom(from._internal_names_after_key_name());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_names_before_key_name()->::mead101::mead::NameWithPronunciationAndScriptCode::MergeFrom(from._internal_names_before_key_name());
    }
  }
}

void PartyNameWithPronunciation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.PartyNameWithPronunciation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyNameWithPronunciation::CopyFrom(const PartyNameWithPronunciation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.PartyNameWithPronunciation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyNameWithPronunciation::IsInitialized() const {
  return true;
}

void PartyNameWithPronunciation::InternalSwap(PartyNameWithPronunciation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartyNameWithPronunciation, names_before_key_name_)
      + sizeof(PartyNameWithPronunciation::names_before_key_name_)
      - PROTOBUF_FIELD_OFFSET(PartyNameWithPronunciation, abbreviated_name_)>(
          reinterpret_cast<char*>(&abbreviated_name_),
          reinterpret_cast<char*>(&other->abbreviated_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyNameWithPronunciation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PartyNameWithTerritory::InitAsDefaultInstance() {
  ::mead101::mead::_PartyNameWithTerritory_default_instance_._instance.get_mutable()->abbreviated_name_ = const_cast< ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      ::mead101::mead::NameWithPronunciationAndScriptCode::internal_default_instance());
  ::mead101::mead::_PartyNameWithTerritory_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::mead101::avs::CurrentTerritoryCode*>(
      ::mead101::avs::CurrentTerritoryCode::internal_default_instance());
  ::mead101::mead::_PartyNameWithTerritory_default_instance_._instance.get_mutable()->full_name_ = const_cast< ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      ::mead101::mead::NameWithPronunciationAndScriptCode::internal_default_instance());
  ::mead101::mead::_PartyNameWithTerritory_default_instance_._instance.get_mutable()->full_name_ascii_transcribed_ = const_cast< ::mead101::mead::NameWithPronunciation*>(
      ::mead101::mead::NameWithPronunciation::internal_default_instance());
  ::mead101::mead::_PartyNameWithTerritory_default_instance_._instance.get_mutable()->full_name_indexed_ = const_cast< ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      ::mead101::mead::NameWithPronunciationAndScriptCode::internal_default_instance());
  ::mead101::mead::_PartyNameWithTerritory_default_instance_._instance.get_mutable()->key_name_ = const_cast< ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      ::mead101::mead::NameWithPronunciationAndScriptCode::internal_default_instance());
  ::mead101::mead::_PartyNameWithTerritory_default_instance_._instance.get_mutable()->names_after_key_name_ = const_cast< ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      ::mead101::mead::NameWithPronunciationAndScriptCode::internal_default_instance());
  ::mead101::mead::_PartyNameWithTerritory_default_instance_._instance.get_mutable()->names_before_key_name_ = const_cast< ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      ::mead101::mead::NameWithPronunciationAndScriptCode::internal_default_instance());
}
class PartyNameWithTerritory::_Internal {
 public:
  using HasBits = decltype(std::declval<PartyNameWithTerritory>()._has_bits_);
  static const ::mead101::mead::NameWithPronunciationAndScriptCode& abbreviated_name(const PartyNameWithTerritory* msg);
  static void set_has_abbreviated_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code(const PartyNameWithTerritory* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::NameWithPronunciationAndScriptCode& full_name(const PartyNameWithTerritory* msg);
  static void set_has_full_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mead101::mead::NameWithPronunciation& full_name_ascii_transcribed(const PartyNameWithTerritory* msg);
  static void set_has_full_name_ascii_transcribed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mead101::mead::NameWithPronunciationAndScriptCode& full_name_indexed(const PartyNameWithTerritory* msg);
  static void set_has_full_name_indexed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::mead101::mead::NameWithPronunciationAndScriptCode& key_name(const PartyNameWithTerritory* msg);
  static void set_has_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::NameWithPronunciationAndScriptCode& names_after_key_name(const PartyNameWithTerritory* msg);
  static void set_has_names_after_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::mead101::mead::NameWithPronunciationAndScriptCode& names_before_key_name(const PartyNameWithTerritory* msg);
  static void set_has_names_before_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::mead101::mead::NameWithPronunciationAndScriptCode&
PartyNameWithTerritory::_Internal::abbreviated_name(const PartyNameWithTerritory* msg) {
  return *msg->abbreviated_name_;
}
const ::mead101::avs::CurrentTerritoryCode&
PartyNameWithTerritory::_Internal::applicable_territory_code(const PartyNameWithTerritory* msg) {
  return *msg->applicable_territory_code_;
}
const ::mead101::mead::NameWithPronunciationAndScriptCode&
PartyNameWithTerritory::_Internal::full_name(const PartyNameWithTerritory* msg) {
  return *msg->full_name_;
}
const ::mead101::mead::NameWithPronunciation&
PartyNameWithTerritory::_Internal::full_name_ascii_transcribed(const PartyNameWithTerritory* msg) {
  return *msg->full_name_ascii_transcribed_;
}
const ::mead101::mead::NameWithPronunciationAndScriptCode&
PartyNameWithTerritory::_Internal::full_name_indexed(const PartyNameWithTerritory* msg) {
  return *msg->full_name_indexed_;
}
const ::mead101::mead::NameWithPronunciationAndScriptCode&
PartyNameWithTerritory::_Internal::key_name(const PartyNameWithTerritory* msg) {
  return *msg->key_name_;
}
const ::mead101::mead::NameWithPronunciationAndScriptCode&
PartyNameWithTerritory::_Internal::names_after_key_name(const PartyNameWithTerritory* msg) {
  return *msg->names_after_key_name_;
}
const ::mead101::mead::NameWithPronunciationAndScriptCode&
PartyNameWithTerritory::_Internal::names_before_key_name(const PartyNameWithTerritory* msg) {
  return *msg->names_before_key_name_;
}
void PartyNameWithTerritory::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
PartyNameWithTerritory::PartyNameWithTerritory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.PartyNameWithTerritory)
}
PartyNameWithTerritory::PartyNameWithTerritory(const PartyNameWithTerritory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  if (from._internal_has_abbreviated_name()) {
    abbreviated_name_ = new ::mead101::mead::NameWithPronunciationAndScriptCode(*from.abbreviated_name_);
  } else {
    abbreviated_name_ = nullptr;
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::mead101::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_full_name()) {
    full_name_ = new ::mead101::mead::NameWithPronunciationAndScriptCode(*from.full_name_);
  } else {
    full_name_ = nullptr;
  }
  if (from._internal_has_full_name_ascii_transcribed()) {
    full_name_ascii_transcribed_ = new ::mead101::mead::NameWithPronunciation(*from.full_name_ascii_transcribed_);
  } else {
    full_name_ascii_transcribed_ = nullptr;
  }
  if (from._internal_has_full_name_indexed()) {
    full_name_indexed_ = new ::mead101::mead::NameWithPronunciationAndScriptCode(*from.full_name_indexed_);
  } else {
    full_name_indexed_ = nullptr;
  }
  if (from._internal_has_key_name()) {
    key_name_ = new ::mead101::mead::NameWithPronunciationAndScriptCode(*from.key_name_);
  } else {
    key_name_ = nullptr;
  }
  if (from._internal_has_names_after_key_name()) {
    names_after_key_name_ = new ::mead101::mead::NameWithPronunciationAndScriptCode(*from.names_after_key_name_);
  } else {
    names_after_key_name_ = nullptr;
  }
  if (from._internal_has_names_before_key_name()) {
    names_before_key_name_ = new ::mead101::mead::NameWithPronunciationAndScriptCode(*from.names_before_key_name_);
  } else {
    names_before_key_name_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.PartyNameWithTerritory)
}

void PartyNameWithTerritory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyNameWithTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&abbreviated_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&names_before_key_name_) -
      reinterpret_cast<char*>(&abbreviated_name_)) + sizeof(names_before_key_name_));
}

PartyNameWithTerritory::~PartyNameWithTerritory() {
  // @@protoc_insertion_point(destructor:mead101.mead.PartyNameWithTerritory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyNameWithTerritory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete abbreviated_name_;
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete full_name_;
  if (this != internal_default_instance()) delete full_name_ascii_transcribed_;
  if (this != internal_default_instance()) delete full_name_indexed_;
  if (this != internal_default_instance()) delete key_name_;
  if (this != internal_default_instance()) delete names_after_key_name_;
  if (this != internal_default_instance()) delete names_before_key_name_;
}

void PartyNameWithTerritory::ArenaDtor(void* object) {
  PartyNameWithTerritory* _this = reinterpret_cast< PartyNameWithTerritory* >(object);
  (void)_this;
}
void PartyNameWithTerritory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyNameWithTerritory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyNameWithTerritory& PartyNameWithTerritory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyNameWithTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void PartyNameWithTerritory::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.PartyNameWithTerritory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(abbreviated_name_ != nullptr);
      abbreviated_name_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(full_name_ != nullptr);
      full_name_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(full_name_ascii_transcribed_ != nullptr);
      full_name_ascii_transcribed_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(full_name_indexed_ != nullptr);
      full_name_indexed_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(key_name_ != nullptr);
      key_name_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(names_after_key_name_ != nullptr);
      names_after_key_name_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(names_before_key_name_ != nullptr);
    names_before_key_name_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyNameWithTerritory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.NameWithPronunciationAndScriptCode abbreviated_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_abbreviated_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.NameWithPronunciationAndScriptCode full_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_full_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.NameWithPronunciation full_name_ascii_transcribed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_full_name_ascii_transcribed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.NameWithPronunciationAndScriptCode full_name_indexed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_full_name_indexed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.NameWithPronunciationAndScriptCode key_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PartyNameWithTerritory.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.NameWithPronunciationAndScriptCode names_after_key_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_names_after_key_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.NameWithPronunciationAndScriptCode names_before_key_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_names_before_key_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyNameWithTerritory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.PartyNameWithTerritory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.NameWithPronunciationAndScriptCode abbreviated_name = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::abbreviated_name(this), target, stream);
  }

  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional .mead101.mead.NameWithPronunciationAndScriptCode full_name = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::full_name(this), target, stream);
  }

  // optional .mead101.mead.NameWithPronunciation full_name_ascii_transcribed = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::full_name_ascii_transcribed(this), target, stream);
  }

  // optional .mead101.mead.NameWithPronunciationAndScriptCode full_name_indexed = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::full_name_indexed(this), target, stream);
  }

  // optional .mead101.mead.NameWithPronunciationAndScriptCode key_name = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::key_name(this), target, stream);
  }

  // optional string language_and_script_code = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PartyNameWithTerritory.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_language_and_script_code(), target);
  }

  // optional .mead101.mead.NameWithPronunciationAndScriptCode names_after_key_name = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::names_after_key_name(this), target, stream);
  }

  // optional .mead101.mead.NameWithPronunciationAndScriptCode names_before_key_name = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::names_before_key_name(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.PartyNameWithTerritory)
  return target;
}

size_t PartyNameWithTerritory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.PartyNameWithTerritory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string language_and_script_code = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional .mead101.mead.NameWithPronunciationAndScriptCode abbreviated_name = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *abbreviated_name_);
    }

    // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .mead101.mead.NameWithPronunciationAndScriptCode full_name = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *full_name_);
    }

    // optional .mead101.mead.NameWithPronunciation full_name_ascii_transcribed = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *full_name_ascii_transcribed_);
    }

    // optional .mead101.mead.NameWithPronunciationAndScriptCode full_name_indexed = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *full_name_indexed_);
    }

    // optional .mead101.mead.NameWithPronunciationAndScriptCode key_name = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_name_);
    }

    // optional .mead101.mead.NameWithPronunciationAndScriptCode names_after_key_name = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *names_after_key_name_);
    }

  }
  // optional .mead101.mead.NameWithPronunciationAndScriptCode names_before_key_name = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *names_before_key_name_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyNameWithTerritory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.PartyNameWithTerritory)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyNameWithTerritory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyNameWithTerritory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.PartyNameWithTerritory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.PartyNameWithTerritory)
    MergeFrom(*source);
  }
}

void PartyNameWithTerritory::MergeFrom(const PartyNameWithTerritory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.PartyNameWithTerritory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_abbreviated_name()->::mead101::mead::NameWithPronunciationAndScriptCode::MergeFrom(from._internal_abbreviated_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_applicable_territory_code()->::mead101::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_full_name()->::mead101::mead::NameWithPronunciationAndScriptCode::MergeFrom(from._internal_full_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_full_name_ascii_transcribed()->::mead101::mead::NameWithPronunciation::MergeFrom(from._internal_full_name_ascii_transcribed());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_full_name_indexed()->::mead101::mead::NameWithPronunciationAndScriptCode::MergeFrom(from._internal_full_name_indexed());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_key_name()->::mead101::mead::NameWithPronunciationAndScriptCode::MergeFrom(from._internal_key_name());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_names_after_key_name()->::mead101::mead::NameWithPronunciationAndScriptCode::MergeFrom(from._internal_names_after_key_name());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_mutable_names_before_key_name()->::mead101::mead::NameWithPronunciationAndScriptCode::MergeFrom(from._internal_names_before_key_name());
  }
}

void PartyNameWithTerritory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.PartyNameWithTerritory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyNameWithTerritory::CopyFrom(const PartyNameWithTerritory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.PartyNameWithTerritory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyNameWithTerritory::IsInitialized() const {
  return true;
}

void PartyNameWithTerritory::InternalSwap(PartyNameWithTerritory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartyNameWithTerritory, names_before_key_name_)
      + sizeof(PartyNameWithTerritory::names_before_key_name_)
      - PROTOBUF_FIELD_OFFSET(PartyNameWithTerritory, abbreviated_name_)>(
          reinterpret_cast<char*>(&abbreviated_name_),
          reinterpret_cast<char*>(&other->abbreviated_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyNameWithTerritory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PartyNameWithoutCode::InitAsDefaultInstance() {
}
class PartyNameWithoutCode::_Internal {
 public:
  using HasBits = decltype(std::declval<PartyNameWithoutCode>()._has_bits_);
  static void set_has_abbreviated_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_full_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_full_name_ascii_transcribed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_full_name_indexed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_names_after_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_names_before_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

PartyNameWithoutCode::PartyNameWithoutCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.PartyNameWithoutCode)
}
PartyNameWithoutCode::PartyNameWithoutCode(const PartyNameWithoutCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  abbreviated_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_abbreviated_name()) {
    abbreviated_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_abbreviated_name(),
      GetArena());
  }
  full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_full_name()) {
    full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_full_name(),
      GetArena());
  }
  full_name_ascii_transcribed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_full_name_ascii_transcribed()) {
    full_name_ascii_transcribed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_full_name_ascii_transcribed(),
      GetArena());
  }
  full_name_indexed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_full_name_indexed()) {
    full_name_indexed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_full_name_indexed(),
      GetArena());
  }
  key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key_name()) {
    key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key_name(),
      GetArena());
  }
  names_after_key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_names_after_key_name()) {
    names_after_key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_names_after_key_name(),
      GetArena());
  }
  names_before_key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_names_before_key_name()) {
    names_before_key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_names_before_key_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.PartyNameWithoutCode)
}

void PartyNameWithoutCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyNameWithoutCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  abbreviated_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_name_ascii_transcribed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_name_indexed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  names_after_key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  names_before_key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PartyNameWithoutCode::~PartyNameWithoutCode() {
  // @@protoc_insertion_point(destructor:mead101.mead.PartyNameWithoutCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyNameWithoutCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  abbreviated_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_name_ascii_transcribed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_name_indexed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  names_after_key_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  names_before_key_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyNameWithoutCode::ArenaDtor(void* object) {
  PartyNameWithoutCode* _this = reinterpret_cast< PartyNameWithoutCode* >(object);
  (void)_this;
}
void PartyNameWithoutCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyNameWithoutCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyNameWithoutCode& PartyNameWithoutCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyNameWithoutCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void PartyNameWithoutCode::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.PartyNameWithoutCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      abbreviated_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      full_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      full_name_ascii_transcribed_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      full_name_indexed_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      key_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      names_after_key_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      names_before_key_name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyNameWithoutCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string abbreviated_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_abbreviated_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PartyNameWithoutCode.abbreviated_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string full_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_full_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PartyNameWithoutCode.full_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string full_name_ascii_transcribed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_full_name_ascii_transcribed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PartyNameWithoutCode.full_name_ascii_transcribed");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string full_name_indexed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_full_name_indexed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PartyNameWithoutCode.full_name_indexed");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string key_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_key_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PartyNameWithoutCode.key_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string names_after_key_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_names_after_key_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PartyNameWithoutCode.names_after_key_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string names_before_key_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_names_before_key_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PartyNameWithoutCode.names_before_key_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyNameWithoutCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.PartyNameWithoutCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string abbreviated_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_abbreviated_name().data(), static_cast<int>(this->_internal_abbreviated_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PartyNameWithoutCode.abbreviated_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_abbreviated_name(), target);
  }

  // optional string full_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_name().data(), static_cast<int>(this->_internal_full_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PartyNameWithoutCode.full_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_full_name(), target);
  }

  // optional string full_name_ascii_transcribed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_name_ascii_transcribed().data(), static_cast<int>(this->_internal_full_name_ascii_transcribed().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PartyNameWithoutCode.full_name_ascii_transcribed");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_full_name_ascii_transcribed(), target);
  }

  // optional string full_name_indexed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_name_indexed().data(), static_cast<int>(this->_internal_full_name_indexed().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PartyNameWithoutCode.full_name_indexed");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_full_name_indexed(), target);
  }

  // optional string key_name = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key_name().data(), static_cast<int>(this->_internal_key_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PartyNameWithoutCode.key_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_key_name(), target);
  }

  // optional string names_after_key_name = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_names_after_key_name().data(), static_cast<int>(this->_internal_names_after_key_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PartyNameWithoutCode.names_after_key_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_names_after_key_name(), target);
  }

  // optional string names_before_key_name = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_names_before_key_name().data(), static_cast<int>(this->_internal_names_before_key_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PartyNameWithoutCode.names_before_key_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_names_before_key_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.PartyNameWithoutCode)
  return target;
}

size_t PartyNameWithoutCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.PartyNameWithoutCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string abbreviated_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_abbreviated_name());
    }

    // optional string full_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_name());
    }

    // optional string full_name_ascii_transcribed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_name_ascii_transcribed());
    }

    // optional string full_name_indexed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_name_indexed());
    }

    // optional string key_name = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key_name());
    }

    // optional string names_after_key_name = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_names_after_key_name());
    }

    // optional string names_before_key_name = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_names_before_key_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyNameWithoutCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.PartyNameWithoutCode)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyNameWithoutCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyNameWithoutCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.PartyNameWithoutCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.PartyNameWithoutCode)
    MergeFrom(*source);
  }
}

void PartyNameWithoutCode::MergeFrom(const PartyNameWithoutCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.PartyNameWithoutCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_abbreviated_name(from._internal_abbreviated_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_full_name(from._internal_full_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_full_name_ascii_transcribed(from._internal_full_name_ascii_transcribed());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_full_name_indexed(from._internal_full_name_indexed());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_key_name(from._internal_key_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_names_after_key_name(from._internal_names_after_key_name());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_names_before_key_name(from._internal_names_before_key_name());
    }
  }
}

void PartyNameWithoutCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.PartyNameWithoutCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyNameWithoutCode::CopyFrom(const PartyNameWithoutCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.PartyNameWithoutCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyNameWithoutCode::IsInitialized() const {
  return true;
}

void PartyNameWithoutCode::InternalSwap(PartyNameWithoutCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  abbreviated_name_.Swap(&other->abbreviated_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  full_name_.Swap(&other->full_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  full_name_ascii_transcribed_.Swap(&other->full_name_ascii_transcribed_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  full_name_indexed_.Swap(&other->full_name_indexed_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_name_.Swap(&other->key_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  names_after_key_name_.Swap(&other->names_after_key_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  names_before_key_name_.Swap(&other->names_before_key_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyNameWithoutCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PartyWithNames::InitAsDefaultInstance() {
}
class PartyWithNames::_Internal {
 public:
  using HasBits = decltype(std::declval<PartyWithNames>()._has_bits_);
  static void set_has_d_p_i_d(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_i_p_n(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_i_s_n_i(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ipi_name_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PartyWithNames::PartyWithNames(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  name_(arena),
  proprietary_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.PartyWithNames)
}
PartyWithNames::PartyWithNames(const PartyWithNames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_(from.name_),
      proprietary_id_(from.proprietary_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  d_p_i_d_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_d_p_i_d()) {
    d_p_i_d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_d_p_i_d(),
      GetArena());
  }
  i_p_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_p_n()) {
    i_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_p_n(),
      GetArena());
  }
  i_s_n_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_n_i()) {
    i_s_n_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_n_i(),
      GetArena());
  }
  ipi_name_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipi_name_number()) {
    ipi_name_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ipi_name_number(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.PartyWithNames)
}

void PartyWithNames::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyWithNames_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  d_p_i_d_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_p_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_n_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipi_name_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PartyWithNames::~PartyWithNames() {
  // @@protoc_insertion_point(destructor:mead101.mead.PartyWithNames)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyWithNames::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  d_p_i_d_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_p_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_n_i_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipi_name_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyWithNames::ArenaDtor(void* object) {
  PartyWithNames* _this = reinterpret_cast< PartyWithNames* >(object);
  (void)_this;
}
void PartyWithNames::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyWithNames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyWithNames& PartyWithNames::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyWithNames_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void PartyWithNames::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.PartyWithNames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.Clear();
  proprietary_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      d_p_i_d_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      i_p_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      i_s_n_i_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ipi_name_number_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyWithNames::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string d_p_i_d = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_d_p_i_d();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PartyWithNames.d_p_i_d");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_p_n = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_i_p_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PartyWithNames.i_p_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_s_n_i = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_i_s_n_i();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PartyWithNames.i_s_n_i");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ipi_name_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ipi_name_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PartyWithNames.ipi_name_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.PartyNameWithTerritory name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.ProprietaryId proprietary_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proprietary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyWithNames::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.PartyWithNames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string d_p_i_d = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_d_p_i_d().data(), static_cast<int>(this->_internal_d_p_i_d().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PartyWithNames.d_p_i_d");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_d_p_i_d(), target);
  }

  // optional string i_p_n = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_p_n().data(), static_cast<int>(this->_internal_i_p_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PartyWithNames.i_p_n");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_i_p_n(), target);
  }

  // optional string i_s_n_i = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_n_i().data(), static_cast<int>(this->_internal_i_s_n_i().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PartyWithNames.i_s_n_i");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_i_s_n_i(), target);
  }

  // optional string ipi_name_number = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipi_name_number().data(), static_cast<int>(this->_internal_ipi_name_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PartyWithNames.ipi_name_number");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ipi_name_number(), target);
  }

  // repeated .mead101.mead.PartyNameWithTerritory name = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_name_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_name(i), target, stream);
  }

  // repeated .mead101.mead.ProprietaryId proprietary_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proprietary_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_proprietary_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.PartyWithNames)
  return target;
}

size_t PartyWithNames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.PartyWithNames)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.PartyNameWithTerritory name = 5;
  total_size += 1UL * this->_internal_name_size();
  for (const auto& msg : this->name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.ProprietaryId proprietary_id = 6;
  total_size += 1UL * this->_internal_proprietary_id_size();
  for (const auto& msg : this->proprietary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string d_p_i_d = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_d_p_i_d());
    }

    // optional string i_p_n = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_p_n());
    }

    // optional string i_s_n_i = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_n_i());
    }

    // optional string ipi_name_number = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipi_name_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyWithNames::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.PartyWithNames)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyWithNames* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyWithNames>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.PartyWithNames)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.PartyWithNames)
    MergeFrom(*source);
  }
}

void PartyWithNames::MergeFrom(const PartyWithNames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.PartyWithNames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  name_.MergeFrom(from.name_);
  proprietary_id_.MergeFrom(from.proprietary_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_d_p_i_d(from._internal_d_p_i_d());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_i_p_n(from._internal_i_p_n());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_i_s_n_i(from._internal_i_s_n_i());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_ipi_name_number(from._internal_ipi_name_number());
    }
  }
}

void PartyWithNames::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.PartyWithNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyWithNames::CopyFrom(const PartyWithNames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.PartyWithNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyWithNames::IsInitialized() const {
  return true;
}

void PartyWithNames::InternalSwap(PartyWithNames* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.InternalSwap(&other->name_);
  proprietary_id_.InternalSwap(&other->proprietary_id_);
  d_p_i_d_.Swap(&other->d_p_i_d_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_p_n_.Swap(&other->i_p_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_s_n_i_.Swap(&other->i_s_n_i_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipi_name_number_.Swap(&other->ipi_name_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyWithNames::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PartyWithRole::InitAsDefaultInstance() {
  ::mead101::mead::_PartyWithRole_default_instance_._instance.get_mutable()->party_name_ = const_cast< ::mead101::mead::PartyNameWithPronunciation*>(
      ::mead101::mead::PartyNameWithPronunciation::internal_default_instance());
  ::mead101::mead::_PartyWithRole_default_instance_._instance.get_mutable()->role_ = const_cast< ::mead101::mead::ResourceContributorRole*>(
      ::mead101::mead::ResourceContributorRole::internal_default_instance());
}
class PartyWithRole::_Internal {
 public:
  using HasBits = decltype(std::declval<PartyWithRole>()._has_bits_);
  static void set_has_d_p_i_d(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_i_p_n(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_i_s_n_i(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ipi_name_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mead101::mead::PartyNameWithPronunciation& party_name(const PartyWithRole* msg);
  static void set_has_party_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mead101::mead::ResourceContributorRole& role(const PartyWithRole* msg);
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::mead101::mead::PartyNameWithPronunciation&
PartyWithRole::_Internal::party_name(const PartyWithRole* msg) {
  return *msg->party_name_;
}
const ::mead101::mead::ResourceContributorRole&
PartyWithRole::_Internal::role(const PartyWithRole* msg) {
  return *msg->role_;
}
PartyWithRole::PartyWithRole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proprietary_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.PartyWithRole)
}
PartyWithRole::PartyWithRole(const PartyWithRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      proprietary_id_(from.proprietary_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  d_p_i_d_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_d_p_i_d()) {
    d_p_i_d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_d_p_i_d(),
      GetArena());
  }
  i_p_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_p_n()) {
    i_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_p_n(),
      GetArena());
  }
  i_s_n_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_n_i()) {
    i_s_n_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_n_i(),
      GetArena());
  }
  ipi_name_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipi_name_number()) {
    ipi_name_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ipi_name_number(),
      GetArena());
  }
  if (from._internal_has_party_name()) {
    party_name_ = new ::mead101::mead::PartyNameWithPronunciation(*from.party_name_);
  } else {
    party_name_ = nullptr;
  }
  if (from._internal_has_role()) {
    role_ = new ::mead101::mead::ResourceContributorRole(*from.role_);
  } else {
    role_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.PartyWithRole)
}

void PartyWithRole::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyWithRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  d_p_i_d_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_p_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_n_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipi_name_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&party_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_) -
      reinterpret_cast<char*>(&party_name_)) + sizeof(role_));
}

PartyWithRole::~PartyWithRole() {
  // @@protoc_insertion_point(destructor:mead101.mead.PartyWithRole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyWithRole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  d_p_i_d_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_p_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_n_i_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipi_name_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete party_name_;
  if (this != internal_default_instance()) delete role_;
}

void PartyWithRole::ArenaDtor(void* object) {
  PartyWithRole* _this = reinterpret_cast< PartyWithRole* >(object);
  (void)_this;
}
void PartyWithRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyWithRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyWithRole& PartyWithRole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyWithRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void PartyWithRole::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.PartyWithRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proprietary_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      d_p_i_d_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      i_p_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      i_s_n_i_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ipi_name_number_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(party_name_ != nullptr);
      party_name_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(role_ != nullptr);
      role_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyWithRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string d_p_i_d = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_d_p_i_d();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PartyWithRole.d_p_i_d");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_p_n = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_i_p_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PartyWithRole.i_p_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_s_n_i = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_i_s_n_i();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PartyWithRole.i_s_n_i");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ipi_name_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ipi_name_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PartyWithRole.ipi_name_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.PartyNameWithPronunciation party_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.ProprietaryId proprietary_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proprietary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ResourceContributorRole role = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyWithRole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.PartyWithRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string d_p_i_d = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_d_p_i_d().data(), static_cast<int>(this->_internal_d_p_i_d().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PartyWithRole.d_p_i_d");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_d_p_i_d(), target);
  }

  // optional string i_p_n = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_p_n().data(), static_cast<int>(this->_internal_i_p_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PartyWithRole.i_p_n");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_i_p_n(), target);
  }

  // optional string i_s_n_i = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_n_i().data(), static_cast<int>(this->_internal_i_s_n_i().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PartyWithRole.i_s_n_i");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_i_s_n_i(), target);
  }

  // optional string ipi_name_number = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipi_name_number().data(), static_cast<int>(this->_internal_ipi_name_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PartyWithRole.ipi_name_number");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ipi_name_number(), target);
  }

  // optional .mead101.mead.PartyNameWithPronunciation party_name = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::party_name(this), target, stream);
  }

  // repeated .mead101.mead.ProprietaryId proprietary_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proprietary_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_proprietary_id(i), target, stream);
  }

  // optional .mead101.mead.ResourceContributorRole role = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::role(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.PartyWithRole)
  return target;
}

size_t PartyWithRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.PartyWithRole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.ProprietaryId proprietary_id = 6;
  total_size += 1UL * this->_internal_proprietary_id_size();
  for (const auto& msg : this->proprietary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string d_p_i_d = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_d_p_i_d());
    }

    // optional string i_p_n = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_p_n());
    }

    // optional string i_s_n_i = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_n_i());
    }

    // optional string ipi_name_number = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipi_name_number());
    }

    // optional .mead101.mead.PartyNameWithPronunciation party_name = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *party_name_);
    }

    // optional .mead101.mead.ResourceContributorRole role = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *role_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyWithRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.PartyWithRole)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyWithRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyWithRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.PartyWithRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.PartyWithRole)
    MergeFrom(*source);
  }
}

void PartyWithRole::MergeFrom(const PartyWithRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.PartyWithRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proprietary_id_.MergeFrom(from.proprietary_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_d_p_i_d(from._internal_d_p_i_d());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_i_p_n(from._internal_i_p_n());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_i_s_n_i(from._internal_i_s_n_i());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_ipi_name_number(from._internal_ipi_name_number());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_party_name()->::mead101::mead::PartyNameWithPronunciation::MergeFrom(from._internal_party_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_role()->::mead101::mead::ResourceContributorRole::MergeFrom(from._internal_role());
    }
  }
}

void PartyWithRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.PartyWithRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyWithRole::CopyFrom(const PartyWithRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.PartyWithRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyWithRole::IsInitialized() const {
  return true;
}

void PartyWithRole::InternalSwap(PartyWithRole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  proprietary_id_.InternalSwap(&other->proprietary_id_);
  d_p_i_d_.Swap(&other->d_p_i_d_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_p_n_.Swap(&other->i_p_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_s_n_i_.Swap(&other->i_s_n_i_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipi_name_number_.Swap(&other->ipi_name_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartyWithRole, role_)
      + sizeof(PartyWithRole::role_)
      - PROTOBUF_FIELD_OFFSET(PartyWithRole, party_name_)>(
          reinterpret_cast<char*>(&party_name_),
          reinterpret_cast<char*>(&other->party_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyWithRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Period::InitAsDefaultInstance() {
  ::mead101::mead::_Period_default_instance_._instance.get_mutable()->end_date_ = const_cast< ::mead101::mead::EventDate*>(
      ::mead101::mead::EventDate::internal_default_instance());
  ::mead101::mead::_Period_default_instance_._instance.get_mutable()->end_date_time_ = const_cast< ::mead101::mead::EventDateTime*>(
      ::mead101::mead::EventDateTime::internal_default_instance());
  ::mead101::mead::_Period_default_instance_._instance.get_mutable()->start_date_ = const_cast< ::mead101::mead::EventDate*>(
      ::mead101::mead::EventDate::internal_default_instance());
  ::mead101::mead::_Period_default_instance_._instance.get_mutable()->start_date_time_ = const_cast< ::mead101::mead::EventDateTime*>(
      ::mead101::mead::EventDateTime::internal_default_instance());
}
class Period::_Internal {
 public:
  using HasBits = decltype(std::declval<Period>()._has_bits_);
  static const ::mead101::mead::EventDate& end_date(const Period* msg);
  static void set_has_end_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::EventDateTime& end_date_time(const Period* msg);
  static void set_has_end_date_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::EventDate& start_date(const Period* msg);
  static void set_has_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::EventDateTime& start_date_time(const Period* msg);
  static void set_has_start_date_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mead101::mead::EventDate&
Period::_Internal::end_date(const Period* msg) {
  return *msg->end_date_;
}
const ::mead101::mead::EventDateTime&
Period::_Internal::end_date_time(const Period* msg) {
  return *msg->end_date_time_;
}
const ::mead101::mead::EventDate&
Period::_Internal::start_date(const Period* msg) {
  return *msg->start_date_;
}
const ::mead101::mead::EventDateTime&
Period::_Internal::start_date_time(const Period* msg) {
  return *msg->start_date_time_;
}
Period::Period(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Period)
}
Period::Period(const Period& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_end_date()) {
    end_date_ = new ::mead101::mead::EventDate(*from.end_date_);
  } else {
    end_date_ = nullptr;
  }
  if (from._internal_has_end_date_time()) {
    end_date_time_ = new ::mead101::mead::EventDateTime(*from.end_date_time_);
  } else {
    end_date_time_ = nullptr;
  }
  if (from._internal_has_start_date()) {
    start_date_ = new ::mead101::mead::EventDate(*from.start_date_);
  } else {
    start_date_ = nullptr;
  }
  if (from._internal_has_start_date_time()) {
    start_date_time_ = new ::mead101::mead::EventDateTime(*from.start_date_time_);
  } else {
    start_date_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Period)
}

void Period::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Period_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&end_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_date_time_) -
      reinterpret_cast<char*>(&end_date_)) + sizeof(start_date_time_));
}

Period::~Period() {
  // @@protoc_insertion_point(destructor:mead101.mead.Period)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Period::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete end_date_;
  if (this != internal_default_instance()) delete end_date_time_;
  if (this != internal_default_instance()) delete start_date_;
  if (this != internal_default_instance()) delete start_date_time_;
}

void Period::ArenaDtor(void* object) {
  Period* _this = reinterpret_cast< Period* >(object);
  (void)_this;
}
void Period::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Period::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Period& Period::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Period_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Period::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Period)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(end_date_ != nullptr);
      end_date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(end_date_time_ != nullptr);
      end_date_time_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(start_date_ != nullptr);
      start_date_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(start_date_time_ != nullptr);
      start_date_time_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Period::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.EventDate end_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.EventDateTime end_date_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_date_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.EventDate start_date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.EventDateTime start_date_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_date_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Period::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Period)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.EventDate end_date = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::end_date(this), target, stream);
  }

  // optional .mead101.mead.EventDateTime end_date_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end_date_time(this), target, stream);
  }

  // optional .mead101.mead.EventDate start_date = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::start_date(this), target, stream);
  }

  // optional .mead101.mead.EventDateTime start_date_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::start_date_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Period)
  return target;
}

size_t Period::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Period)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .mead101.mead.EventDate end_date = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_date_);
    }

    // optional .mead101.mead.EventDateTime end_date_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_date_time_);
    }

    // optional .mead101.mead.EventDate start_date = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_date_);
    }

    // optional .mead101.mead.EventDateTime start_date_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_date_time_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Period::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Period)
  GOOGLE_DCHECK_NE(&from, this);
  const Period* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Period>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Period)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Period)
    MergeFrom(*source);
  }
}

void Period::MergeFrom(const Period& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Period)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_end_date()->::mead101::mead::EventDate::MergeFrom(from._internal_end_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_end_date_time()->::mead101::mead::EventDateTime::MergeFrom(from._internal_end_date_time());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_start_date()->::mead101::mead::EventDate::MergeFrom(from._internal_start_date());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_start_date_time()->::mead101::mead::EventDateTime::MergeFrom(from._internal_start_date_time());
    }
  }
}

void Period::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Period)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Period::CopyFrom(const Period& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Period)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Period::IsInitialized() const {
  return true;
}

void Period::InternalSwap(Period* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Period, start_date_time_)
      + sizeof(Period::start_date_time_)
      - PROTOBUF_FIELD_OFFSET(Period, end_date_)>(
          reinterpret_cast<char*>(&end_date_),
          reinterpret_cast<char*>(&other->end_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Period::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeriodValue::InitAsDefaultInstance() {
  ::mead101::mead::_PeriodValue_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::Period*>(
      ::mead101::avs::Period::internal_default_instance());
}
class PeriodValue::_Internal {
 public:
  using HasBits = decltype(std::declval<PeriodValue>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::Period& ext_value(const PeriodValue* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::Period&
PeriodValue::_Internal::ext_value(const PeriodValue* msg) {
  return *msg->ext_value_;
}
void PeriodValue::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
PeriodValue::PeriodValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.PeriodValue)
}
PeriodValue::PeriodValue(const PeriodValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::Period(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.PeriodValue)
}

void PeriodValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeriodValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

PeriodValue::~PeriodValue() {
  // @@protoc_insertion_point(destructor:mead101.mead.PeriodValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeriodValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void PeriodValue::ArenaDtor(void* object) {
  PeriodValue* _this = reinterpret_cast< PeriodValue* >(object);
  (void)_this;
}
void PeriodValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeriodValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeriodValue& PeriodValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeriodValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void PeriodValue::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.PeriodValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeriodValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PeriodValue.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PeriodValue.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.Period ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeriodValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.PeriodValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PeriodValue.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PeriodValue.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.Period ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.PeriodValue)
  return target;
}

size_t PeriodValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.PeriodValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.Period ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeriodValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.PeriodValue)
  GOOGLE_DCHECK_NE(&from, this);
  const PeriodValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeriodValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.PeriodValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.PeriodValue)
    MergeFrom(*source);
  }
}

void PeriodValue::MergeFrom(const PeriodValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.PeriodValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::Period::MergeFrom(from._internal_ext_value());
    }
  }
}

void PeriodValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.PeriodValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeriodValue::CopyFrom(const PeriodValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.PeriodValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeriodValue::IsInitialized() const {
  return true;
}

void PeriodValue::InternalSwap(PeriodValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeriodValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeriodWithTime::InitAsDefaultInstance() {
}
class PeriodWithTime::_Internal {
 public:
  using HasBits = decltype(std::declval<PeriodWithTime>()._has_bits_);
  static void set_has_end_date_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_date_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PeriodWithTime::PeriodWithTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.PeriodWithTime)
}
PeriodWithTime::PeriodWithTime(const PeriodWithTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  end_date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_end_date_time()) {
    end_date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_end_date_time(),
      GetArena());
  }
  start_date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_start_date_time()) {
    start_date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_start_date_time(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.PeriodWithTime)
}

void PeriodWithTime::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeriodWithTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  end_date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PeriodWithTime::~PeriodWithTime() {
  // @@protoc_insertion_point(destructor:mead101.mead.PeriodWithTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeriodWithTime::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  end_date_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_date_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeriodWithTime::ArenaDtor(void* object) {
  PeriodWithTime* _this = reinterpret_cast< PeriodWithTime* >(object);
  (void)_this;
}
void PeriodWithTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeriodWithTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeriodWithTime& PeriodWithTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeriodWithTime_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void PeriodWithTime::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.PeriodWithTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      end_date_time_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      start_date_time_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeriodWithTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string end_date_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_end_date_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PeriodWithTime.end_date_time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string start_date_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_start_date_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.PeriodWithTime.start_date_time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeriodWithTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.PeriodWithTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string end_date_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_end_date_time().data(), static_cast<int>(this->_internal_end_date_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PeriodWithTime.end_date_time");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_end_date_time(), target);
  }

  // optional string start_date_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_start_date_time().data(), static_cast<int>(this->_internal_start_date_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.PeriodWithTime.start_date_time");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_start_date_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.PeriodWithTime)
  return target;
}

size_t PeriodWithTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.PeriodWithTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string end_date_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_end_date_time());
    }

    // optional string start_date_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_date_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeriodWithTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.PeriodWithTime)
  GOOGLE_DCHECK_NE(&from, this);
  const PeriodWithTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeriodWithTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.PeriodWithTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.PeriodWithTime)
    MergeFrom(*source);
  }
}

void PeriodWithTime::MergeFrom(const PeriodWithTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.PeriodWithTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_end_date_time(from._internal_end_date_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_start_date_time(from._internal_start_date_time());
    }
  }
}

void PeriodWithTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.PeriodWithTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeriodWithTime::CopyFrom(const PeriodWithTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.PeriodWithTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeriodWithTime::IsInitialized() const {
  return true;
}

void PeriodWithTime::InternalSwap(PeriodWithTime* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  end_date_time_.Swap(&other->end_date_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  start_date_time_.Swap(&other->start_date_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PeriodWithTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Person::InitAsDefaultInstance() {
  ::mead101::mead::_Person_default_instance_._instance.get_mutable()->uri_ = const_cast< ::mead101::mead::URI*>(
      ::mead101::mead::URI::internal_default_instance());
}
class Person::_Internal {
 public:
  using HasBits = decltype(std::declval<Person>()._has_bits_);
  static void set_has_any_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::URI& uri(const Person* msg);
  static void set_has_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mead101::mead::URI&
Person::_Internal::uri(const Person* msg) {
  return *msg->uri_;
}
Person::Person(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  any_attribute_value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Person)
}
Person::Person(const Person& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      any_attribute_value_(from.any_attribute_value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  any_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_any_value()) {
    any_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_any_value(),
      GetArena());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_email()) {
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_email(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_uri()) {
    uri_ = new ::mead101::mead::URI(*from.uri_);
  } else {
    uri_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Person)
}

void Person::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Person_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  any_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uri_ = nullptr;
}

Person::~Person() {
  // @@protoc_insertion_point(destructor:mead101.mead.Person)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Person::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  any_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete uri_;
}

void Person::ArenaDtor(void* object) {
  Person* _this = reinterpret_cast< Person* >(object);
  (void)_this;
}
void Person::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Person::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Person& Person::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Person_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Person::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Person)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  any_attribute_value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      any_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      email_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(uri_ != nullptr);
      uri_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Person::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string any_attribute_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_any_attribute_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Person.any_attribute_value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string any_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_any_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Person.any_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string email = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Person.email");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Person.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.URI uri = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_uri(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Person::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Person)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  for (int i = 0, n = this->_internal_any_attribute_value_size(); i < n; i++) {
    const auto& s = this->_internal_any_attribute_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Person.any_attribute_value");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string any_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_any_value().data(), static_cast<int>(this->_internal_any_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Person.any_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_any_value(), target);
  }

  // optional string email = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Person.email");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_email(), target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Person.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // optional .mead101.mead.URI uri = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::uri(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Person)
  return target;
}

size_t Person::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Person)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(any_attribute_value_.size());
  for (int i = 0, n = any_attribute_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      any_attribute_value_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string any_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_any_value());
    }

    // optional string email = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email());
    }

    // optional string name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .mead101.mead.URI uri = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uri_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Person::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Person)
  GOOGLE_DCHECK_NE(&from, this);
  const Person* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Person>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Person)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Person)
    MergeFrom(*source);
  }
}

void Person::MergeFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Person)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  any_attribute_value_.MergeFrom(from.any_attribute_value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_any_value(from._internal_any_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_email(from._internal_email());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_uri()->::mead101::mead::URI::MergeFrom(from._internal_uri());
    }
  }
}

void Person::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Person::CopyFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person::IsInitialized() const {
  return true;
}

void Person::InternalSwap(Person* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  any_attribute_value_.InternalSwap(&other->any_attribute_value_);
  any_value_.Swap(&other->any_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(uri_, other->uri_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Person::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pronunciation::InitAsDefaultInstance() {
  ::mead101::mead::_Pronunciation_default_instance_._instance.get_mutable()->encoding_type_ = const_cast< ::mead101::avs::EncodingType*>(
      ::mead101::avs::EncodingType::internal_default_instance());
}
class Pronunciation::_Internal {
 public:
  using HasBits = decltype(std::declval<Pronunciation>()._has_bits_);
  static void set_has_encoding_namespace(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::avs::EncodingType& encoding_type(const Pronunciation* msg);
  static void set_has_encoding_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_encoding_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_canonical(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_language_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mead101::avs::EncodingType&
Pronunciation::_Internal::encoding_type(const Pronunciation* msg) {
  return *msg->encoding_type_;
}
void Pronunciation::clear_encoding_type() {
  if (encoding_type_ != nullptr) encoding_type_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
Pronunciation::Pronunciation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Pronunciation)
}
Pronunciation::Pronunciation(const Pronunciation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoding_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_encoding_namespace()) {
    encoding_namespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_encoding_namespace(),
      GetArena());
  }
  encoding_user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_encoding_user_defined_value()) {
    encoding_user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_encoding_user_defined_value(),
      GetArena());
  }
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_code()) {
    language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_code(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  if (from._internal_has_encoding_type()) {
    encoding_type_ = new ::mead101::avs::EncodingType(*from.encoding_type_);
  } else {
    encoding_type_ = nullptr;
  }
  is_canonical_ = from.is_canonical_;
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Pronunciation)
}

void Pronunciation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  encoding_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encoding_user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&encoding_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_canonical_) -
      reinterpret_cast<char*>(&encoding_type_)) + sizeof(is_canonical_));
}

Pronunciation::~Pronunciation() {
  // @@protoc_insertion_point(destructor:mead101.mead.Pronunciation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pronunciation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encoding_namespace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encoding_user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete encoding_type_;
}

void Pronunciation::ArenaDtor(void* object) {
  Pronunciation* _this = reinterpret_cast< Pronunciation* >(object);
  (void)_this;
}
void Pronunciation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pronunciation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pronunciation& Pronunciation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Pronunciation::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Pronunciation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      encoding_namespace_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      encoding_user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      language_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(encoding_type_ != nullptr);
      encoding_type_->Clear();
    }
  }
  is_canonical_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pronunciation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string encoding_namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_encoding_namespace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Pronunciation.encoding_namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.EncodingType encoding_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_encoding_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string encoding_user_defined_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_encoding_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Pronunciation.encoding_user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_canonical = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_canonical(&has_bits);
          is_canonical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_language_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Pronunciation.language_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Pronunciation.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pronunciation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Pronunciation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string encoding_namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_encoding_namespace().data(), static_cast<int>(this->_internal_encoding_namespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Pronunciation.encoding_namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_encoding_namespace(), target);
  }

  // optional .mead101.avs.EncodingType encoding_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::encoding_type(this), target, stream);
  }

  // optional string encoding_user_defined_value = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_encoding_user_defined_value().data(), static_cast<int>(this->_internal_encoding_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Pronunciation.encoding_user_defined_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_encoding_user_defined_value(), target);
  }

  // optional bool is_canonical = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_canonical(), target);
  }

  // optional string language_code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_code().data(), static_cast<int>(this->_internal_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Pronunciation.language_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_language_code(), target);
  }

  // optional string ext_value = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Pronunciation.ext_value");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Pronunciation)
  return target;
}

size_t Pronunciation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Pronunciation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string encoding_namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_encoding_namespace());
    }

    // optional string encoding_user_defined_value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_encoding_user_defined_value());
    }

    // optional string language_code = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_code());
    }

    // optional string ext_value = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

    // optional .mead101.avs.EncodingType encoding_type = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *encoding_type_);
    }

    // optional bool is_canonical = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pronunciation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Pronunciation)
  GOOGLE_DCHECK_NE(&from, this);
  const Pronunciation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pronunciation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Pronunciation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Pronunciation)
    MergeFrom(*source);
  }
}

void Pronunciation::MergeFrom(const Pronunciation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Pronunciation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_encoding_namespace(from._internal_encoding_namespace());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_encoding_user_defined_value(from._internal_encoding_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_language_code(from._internal_language_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_encoding_type()->::mead101::avs::EncodingType::MergeFrom(from._internal_encoding_type());
    }
    if (cached_has_bits & 0x00000020u) {
      is_canonical_ = from.is_canonical_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pronunciation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Pronunciation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pronunciation::CopyFrom(const Pronunciation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Pronunciation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pronunciation::IsInitialized() const {
  return true;
}

void Pronunciation::InternalSwap(Pronunciation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  encoding_namespace_.Swap(&other->encoding_namespace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  encoding_user_defined_value_.Swap(&other->encoding_user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_code_.Swap(&other->language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pronunciation, is_canonical_)
      + sizeof(Pronunciation::is_canonical_)
      - PROTOBUF_FIELD_OFFSET(Pronunciation, encoding_type_)>(
          reinterpret_cast<char*>(&encoding_type_),
          reinterpret_cast<char*>(&other->encoding_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pronunciation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProprietaryId::InitAsDefaultInstance() {
}
class ProprietaryId::_Internal {
 public:
  using HasBits = decltype(std::declval<ProprietaryId>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProprietaryId::ProprietaryId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ProprietaryId)
}
ProprietaryId::ProprietaryId(const ProprietaryId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ProprietaryId)
}

void ProprietaryId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProprietaryId::~ProprietaryId() {
  // @@protoc_insertion_point(destructor:mead101.mead.ProprietaryId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProprietaryId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProprietaryId::ArenaDtor(void* object) {
  ProprietaryId* _this = reinterpret_cast< ProprietaryId* >(object);
  (void)_this;
}
void ProprietaryId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProprietaryId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProprietaryId& ProprietaryId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ProprietaryId::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ProprietaryId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProprietaryId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ProprietaryId.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ProprietaryId.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProprietaryId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ProprietaryId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ProprietaryId.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ProprietaryId.ext_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ProprietaryId)
  return target;
}

size_t ProprietaryId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ProprietaryId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProprietaryId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ProprietaryId)
  GOOGLE_DCHECK_NE(&from, this);
  const ProprietaryId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProprietaryId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ProprietaryId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ProprietaryId)
    MergeFrom(*source);
  }
}

void ProprietaryId::MergeFrom(const ProprietaryId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ProprietaryId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
  }
}

void ProprietaryId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ProprietaryId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProprietaryId::CopyFrom(const ProprietaryId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ProprietaryId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProprietaryId::IsInitialized() const {
  return true;
}

void ProprietaryId::InternalSwap(ProprietaryId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProprietaryId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pseudonym::InitAsDefaultInstance() {
  ::mead101::mead::_Pseudonym_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::mead101::avs::CurrentTerritoryCode*>(
      ::mead101::avs::CurrentTerritoryCode::internal_default_instance());
  ::mead101::mead::_Pseudonym_default_instance_._instance.get_mutable()->name_ = const_cast< ::mead101::mead::PartyNameWithPronunciation*>(
      ::mead101::mead::PartyNameWithPronunciation::internal_default_instance());
}
class Pseudonym::_Internal {
 public:
  using HasBits = decltype(std::declval<Pseudonym>()._has_bits_);
  static const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code(const Pseudonym* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_official(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mead101::mead::PartyNameWithPronunciation& name(const Pseudonym* msg);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mead101::avs::CurrentTerritoryCode&
Pseudonym::_Internal::applicable_territory_code(const Pseudonym* msg) {
  return *msg->applicable_territory_code_;
}
const ::mead101::mead::PartyNameWithPronunciation&
Pseudonym::_Internal::name(const Pseudonym* msg) {
  return *msg->name_;
}
void Pseudonym::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Pseudonym::Pseudonym(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Pseudonym)
}
Pseudonym::Pseudonym(const Pseudonym& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::mead101::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_name()) {
    name_ = new ::mead101::mead::PartyNameWithPronunciation(*from.name_);
  } else {
    name_ = nullptr;
  }
  ::memcpy(&is_default_, &from.is_default_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_official_) -
    reinterpret_cast<char*>(&is_default_)) + sizeof(is_official_));
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Pseudonym)
}

void Pseudonym::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pseudonym_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_official_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_official_));
}

Pseudonym::~Pseudonym() {
  // @@protoc_insertion_point(destructor:mead101.mead.Pseudonym)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pseudonym::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete name_;
}

void Pseudonym::ArenaDtor(void* object) {
  Pseudonym* _this = reinterpret_cast< Pseudonym* >(object);
  (void)_this;
}
void Pseudonym::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pseudonym::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pseudonym& Pseudonym::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pseudonym_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Pseudonym::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Pseudonym)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(name_ != nullptr);
      name_->Clear();
    }
  }
  ::memset(&is_default_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_official_) -
      reinterpret_cast<char*>(&is_default_)) + sizeof(is_official_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pseudonym::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_official = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_official(&has_bits);
          is_official_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Pseudonym.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.PartyNameWithPronunciation name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pseudonym::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Pseudonym)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_default = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_default(), target);
  }

  // optional bool is_official = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_official(), target);
  }

  // repeated string metadata_source_reference = 4;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Pseudonym.metadata_source_reference");
    target = stream->WriteString(4, s, target);
  }

  // optional .mead101.mead.PartyNameWithPronunciation name = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::name(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Pseudonym)
  return target;
}

size_t Pseudonym::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Pseudonym)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .mead101.mead.PartyNameWithPronunciation name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *name_);
    }

    // optional bool is_default = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_official = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pseudonym::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Pseudonym)
  GOOGLE_DCHECK_NE(&from, this);
  const Pseudonym* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pseudonym>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Pseudonym)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Pseudonym)
    MergeFrom(*source);
  }
}

void Pseudonym::MergeFrom(const Pseudonym& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Pseudonym)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_applicable_territory_code()->::mead101::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_name()->::mead101::mead::PartyNameWithPronunciation::MergeFrom(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      is_default_ = from.is_default_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_official_ = from.is_official_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pseudonym::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Pseudonym)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pseudonym::CopyFrom(const Pseudonym& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Pseudonym)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pseudonym::IsInitialized() const {
  return true;
}

void Pseudonym::InternalSwap(Pseudonym* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pseudonym, is_official_)
      + sizeof(Pseudonym::is_official_)
      - PROTOBUF_FIELD_OFFSET(Pseudonym, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pseudonym::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecordingPart::InitAsDefaultInstance() {
  ::mead101::mead::_RecordingPart_default_instance_._instance.get_mutable()->recording_part_type_ = const_cast< ::mead101::mead::RecordingPartType*>(
      ::mead101::mead::RecordingPartType::internal_default_instance());
  ::mead101::mead::_RecordingPart_default_instance_._instance.get_mutable()->unit_ = const_cast< ::mead101::avs::UnitOfCuePoints*>(
      ::mead101::avs::UnitOfCuePoints::internal_default_instance());
}
class RecordingPart::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingPart>()._has_bits_);
  static void set_has_end_point(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::RecordingPartType& recording_part_type(const RecordingPart* msg);
  static void set_has_recording_part_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_start_point(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mead101::avs::UnitOfCuePoints& unit(const RecordingPart* msg);
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mead101::mead::RecordingPartType&
RecordingPart::_Internal::recording_part_type(const RecordingPart* msg) {
  return *msg->recording_part_type_;
}
const ::mead101::avs::UnitOfCuePoints&
RecordingPart::_Internal::unit(const RecordingPart* msg) {
  return *msg->unit_;
}
void RecordingPart::clear_unit() {
  if (unit_ != nullptr) unit_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
RecordingPart::RecordingPart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  comment_(arena),
  metadata_source_reference_(arena),
  usage_information_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.RecordingPart)
}
RecordingPart::RecordingPart(const RecordingPart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      comment_(from.comment_),
      metadata_source_reference_(from.metadata_source_reference_),
      usage_information_(from.usage_information_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_recording_part_type()) {
    recording_part_type_ = new ::mead101::mead::RecordingPartType(*from.recording_part_type_);
  } else {
    recording_part_type_ = nullptr;
  }
  if (from._internal_has_unit()) {
    unit_ = new ::mead101::avs::UnitOfCuePoints(*from.unit_);
  } else {
    unit_ = nullptr;
  }
  ::memcpy(&end_point_, &from.end_point_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&end_point_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:mead101.mead.RecordingPart)
}

void RecordingPart::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecordingPart_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&recording_part_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&recording_part_type_)) + sizeof(sequence_number_));
}

RecordingPart::~RecordingPart() {
  // @@protoc_insertion_point(destructor:mead101.mead.RecordingPart)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordingPart::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete recording_part_type_;
  if (this != internal_default_instance()) delete unit_;
}

void RecordingPart::ArenaDtor(void* object) {
  RecordingPart* _this = reinterpret_cast< RecordingPart* >(object);
  (void)_this;
}
void RecordingPart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordingPart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordingPart& RecordingPart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordingPart_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void RecordingPart::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.RecordingPart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comment_.Clear();
  metadata_source_reference_.Clear();
  usage_information_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(recording_part_type_ != nullptr);
      recording_part_type_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(unit_ != nullptr);
      unit_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&end_point_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_number_) -
        reinterpret_cast<char*>(&end_point_)) + sizeof(sequence_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingPart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.Annotation comment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_comment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double end_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_end_point(&has_bits);
          end_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.RecordingPart.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.RecordingPartType recording_part_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_recording_part_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sequence_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double start_point = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_start_point(&has_bits);
          start_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.UnitOfCuePoints unit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.TextWithFormat usage_information = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_usage_information(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordingPart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.RecordingPart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.Annotation comment = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_comment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_comment(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional double end_point = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_end_point(), target);
  }

  // repeated string metadata_source_reference = 3;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.RecordingPart.metadata_source_reference");
    target = stream->WriteString(3, s, target);
  }

  // optional .mead101.mead.RecordingPartType recording_part_type = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::recording_part_type(this), target, stream);
  }

  // optional int32 sequence_number = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_sequence_number(), target);
  }

  // optional double start_point = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_start_point(), target);
  }

  // optional .mead101.avs.UnitOfCuePoints unit = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::unit(this), target, stream);
  }

  // repeated .mead101.mead.TextWithFormat usage_information = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_usage_information_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_usage_information(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.RecordingPart)
  return target;
}

size_t RecordingPart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.RecordingPart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.Annotation comment = 1;
  total_size += 1UL * this->_internal_comment_size();
  for (const auto& msg : this->comment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metadata_source_reference = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // repeated .mead101.mead.TextWithFormat usage_information = 8;
  total_size += 1UL * this->_internal_usage_information_size();
  for (const auto& msg : this->usage_information_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .mead101.mead.RecordingPartType recording_part_type = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recording_part_type_);
    }

    // optional .mead101.avs.UnitOfCuePoints unit = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unit_);
    }

    // optional double end_point = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double start_point = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 sequence_number = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sequence_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordingPart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.RecordingPart)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordingPart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordingPart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.RecordingPart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.RecordingPart)
    MergeFrom(*source);
  }
}

void RecordingPart::MergeFrom(const RecordingPart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.RecordingPart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  comment_.MergeFrom(from.comment_);
  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  usage_information_.MergeFrom(from.usage_information_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_recording_part_type()->::mead101::mead::RecordingPartType::MergeFrom(from._internal_recording_part_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_unit()->::mead101::avs::UnitOfCuePoints::MergeFrom(from._internal_unit());
    }
    if (cached_has_bits & 0x00000004u) {
      end_point_ = from.end_point_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_point_ = from.start_point_;
    }
    if (cached_has_bits & 0x00000010u) {
      sequence_number_ = from.sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RecordingPart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.RecordingPart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordingPart::CopyFrom(const RecordingPart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.RecordingPart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingPart::IsInitialized() const {
  return true;
}

void RecordingPart::InternalSwap(RecordingPart* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  comment_.InternalSwap(&other->comment_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  usage_information_.InternalSwap(&other->usage_information_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordingPart, sequence_number_)
      + sizeof(RecordingPart::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(RecordingPart, recording_part_type_)>(
          reinterpret_cast<char*>(&recording_part_type_),
          reinterpret_cast<char*>(&other->recording_part_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingPart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecordingPartType::InitAsDefaultInstance() {
  ::mead101::mead::_RecordingPartType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::RecordingPartType*>(
      ::mead101::avs::RecordingPartType::internal_default_instance());
}
class RecordingPartType::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingPartType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::RecordingPartType& ext_value(const RecordingPartType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::RecordingPartType&
RecordingPartType::_Internal::ext_value(const RecordingPartType* msg) {
  return *msg->ext_value_;
}
void RecordingPartType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
RecordingPartType::RecordingPartType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.RecordingPartType)
}
RecordingPartType::RecordingPartType(const RecordingPartType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::RecordingPartType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.RecordingPartType)
}

void RecordingPartType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecordingPartType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

RecordingPartType::~RecordingPartType() {
  // @@protoc_insertion_point(destructor:mead101.mead.RecordingPartType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordingPartType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void RecordingPartType::ArenaDtor(void* object) {
  RecordingPartType* _this = reinterpret_cast< RecordingPartType* >(object);
  (void)_this;
}
void RecordingPartType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordingPartType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordingPartType& RecordingPartType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordingPartType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void RecordingPartType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.RecordingPartType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingPartType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.RecordingPartType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.RecordingPartType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.RecordingPartType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordingPartType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.RecordingPartType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.RecordingPartType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.RecordingPartType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.RecordingPartType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.RecordingPartType)
  return target;
}

size_t RecordingPartType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.RecordingPartType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.RecordingPartType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordingPartType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.RecordingPartType)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordingPartType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordingPartType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.RecordingPartType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.RecordingPartType)
    MergeFrom(*source);
  }
}

void RecordingPartType::MergeFrom(const RecordingPartType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.RecordingPartType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::RecordingPartType::MergeFrom(from._internal_ext_value());
    }
  }
}

void RecordingPartType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.RecordingPartType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordingPartType::CopyFrom(const RecordingPartType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.RecordingPartType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingPartType::IsInitialized() const {
  return true;
}

void RecordingPartType::InternalSwap(RecordingPartType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingPartType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelatedCreation::InitAsDefaultInstance() {
  ::mead101::mead::_RelatedCreation_default_instance_._instance.get_mutable()->musical_work_id_ = const_cast< ::mead101::mead::MusicalWorkId*>(
      ::mead101::mead::MusicalWorkId::internal_default_instance());
  ::mead101::mead::_RelatedCreation_default_instance_._instance.get_mutable()->release_id_ = const_cast< ::mead101::mead::ReleaseId*>(
      ::mead101::mead::ReleaseId::internal_default_instance());
  ::mead101::mead::_RelatedCreation_default_instance_._instance.get_mutable()->resource_id_ = const_cast< ::mead101::mead::ResourceId*>(
      ::mead101::mead::ResourceId::internal_default_instance());
  ::mead101::mead::_RelatedCreation_default_instance_._instance.get_mutable()->title_ = const_cast< ::mead101::mead::TitleWithPronunciation*>(
      ::mead101::mead::TitleWithPronunciation::internal_default_instance());
}
class RelatedCreation::_Internal {
 public:
  using HasBits = decltype(std::declval<RelatedCreation>()._has_bits_);
  static const ::mead101::mead::MusicalWorkId& musical_work_id(const RelatedCreation* msg);
  static void set_has_musical_work_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::ReleaseId& release_id(const RelatedCreation* msg);
  static void set_has_release_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::ResourceId& resource_id(const RelatedCreation* msg);
  static void set_has_resource_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::TitleWithPronunciation& title(const RelatedCreation* msg);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mead101::mead::MusicalWorkId&
RelatedCreation::_Internal::musical_work_id(const RelatedCreation* msg) {
  return *msg->musical_work_id_;
}
const ::mead101::mead::ReleaseId&
RelatedCreation::_Internal::release_id(const RelatedCreation* msg) {
  return *msg->release_id_;
}
const ::mead101::mead::ResourceId&
RelatedCreation::_Internal::resource_id(const RelatedCreation* msg) {
  return *msg->resource_id_;
}
const ::mead101::mead::TitleWithPronunciation&
RelatedCreation::_Internal::title(const RelatedCreation* msg) {
  return *msg->title_;
}
RelatedCreation::RelatedCreation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.RelatedCreation)
}
RelatedCreation::RelatedCreation(const RelatedCreation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_musical_work_id()) {
    musical_work_id_ = new ::mead101::mead::MusicalWorkId(*from.musical_work_id_);
  } else {
    musical_work_id_ = nullptr;
  }
  if (from._internal_has_release_id()) {
    release_id_ = new ::mead101::mead::ReleaseId(*from.release_id_);
  } else {
    release_id_ = nullptr;
  }
  if (from._internal_has_resource_id()) {
    resource_id_ = new ::mead101::mead::ResourceId(*from.resource_id_);
  } else {
    resource_id_ = nullptr;
  }
  if (from._internal_has_title()) {
    title_ = new ::mead101::mead::TitleWithPronunciation(*from.title_);
  } else {
    title_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.RelatedCreation)
}

void RelatedCreation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelatedCreation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&musical_work_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&title_) -
      reinterpret_cast<char*>(&musical_work_id_)) + sizeof(title_));
}

RelatedCreation::~RelatedCreation() {
  // @@protoc_insertion_point(destructor:mead101.mead.RelatedCreation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelatedCreation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete musical_work_id_;
  if (this != internal_default_instance()) delete release_id_;
  if (this != internal_default_instance()) delete resource_id_;
  if (this != internal_default_instance()) delete title_;
}

void RelatedCreation::ArenaDtor(void* object) {
  RelatedCreation* _this = reinterpret_cast< RelatedCreation* >(object);
  (void)_this;
}
void RelatedCreation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelatedCreation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelatedCreation& RelatedCreation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelatedCreation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void RelatedCreation::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.RelatedCreation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(musical_work_id_ != nullptr);
      musical_work_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(release_id_ != nullptr);
      release_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(resource_id_ != nullptr);
      resource_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(title_ != nullptr);
      title_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelatedCreation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.MusicalWorkId musical_work_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_musical_work_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ReleaseId release_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ResourceId resource_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.TitleWithPronunciation title = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_title(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelatedCreation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.RelatedCreation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.MusicalWorkId musical_work_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::musical_work_id(this), target, stream);
  }

  // optional .mead101.mead.ReleaseId release_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::release_id(this), target, stream);
  }

  // optional .mead101.mead.ResourceId resource_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::resource_id(this), target, stream);
  }

  // optional .mead101.mead.TitleWithPronunciation title = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::title(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.RelatedCreation)
  return target;
}

size_t RelatedCreation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.RelatedCreation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .mead101.mead.MusicalWorkId musical_work_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *musical_work_id_);
    }

    // optional .mead101.mead.ReleaseId release_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *release_id_);
    }

    // optional .mead101.mead.ResourceId resource_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_id_);
    }

    // optional .mead101.mead.TitleWithPronunciation title = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *title_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelatedCreation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.RelatedCreation)
  GOOGLE_DCHECK_NE(&from, this);
  const RelatedCreation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelatedCreation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.RelatedCreation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.RelatedCreation)
    MergeFrom(*source);
  }
}

void RelatedCreation::MergeFrom(const RelatedCreation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.RelatedCreation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_musical_work_id()->::mead101::mead::MusicalWorkId::MergeFrom(from._internal_musical_work_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_release_id()->::mead101::mead::ReleaseId::MergeFrom(from._internal_release_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_resource_id()->::mead101::mead::ResourceId::MergeFrom(from._internal_resource_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_title()->::mead101::mead::TitleWithPronunciation::MergeFrom(from._internal_title());
    }
  }
}

void RelatedCreation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.RelatedCreation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelatedCreation::CopyFrom(const RelatedCreation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.RelatedCreation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelatedCreation::IsInitialized() const {
  return true;
}

void RelatedCreation::InternalSwap(RelatedCreation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelatedCreation, title_)
      + sizeof(RelatedCreation::title_)
      - PROTOBUF_FIELD_OFFSET(RelatedCreation, musical_work_id_)>(
          reinterpret_cast<char*>(&musical_work_id_),
          reinterpret_cast<char*>(&other->musical_work_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelatedCreation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelatedResource::InitAsDefaultInstance() {
  ::mead101::mead::_RelatedResource_default_instance_._instance.get_mutable()->resource_id_ = const_cast< ::mead101::mead::ResourceId*>(
      ::mead101::mead::ResourceId::internal_default_instance());
  ::mead101::mead::_RelatedResource_default_instance_._instance.get_mutable()->resource_relationship_type_ = const_cast< ::mead101::mead::ResourceRelationshipType*>(
      ::mead101::mead::ResourceRelationshipType::internal_default_instance());
}
class RelatedResource::_Internal {
 public:
  using HasBits = decltype(std::declval<RelatedResource>()._has_bits_);
  static const ::mead101::mead::ResourceId& resource_id(const RelatedResource* msg);
  static void set_has_resource_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::ResourceRelationshipType& resource_relationship_type(const RelatedResource* msg);
  static void set_has_resource_relationship_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mead101::mead::ResourceId&
RelatedResource::_Internal::resource_id(const RelatedResource* msg) {
  return *msg->resource_id_;
}
const ::mead101::mead::ResourceRelationshipType&
RelatedResource::_Internal::resource_relationship_type(const RelatedResource* msg) {
  return *msg->resource_relationship_type_;
}
RelatedResource::RelatedResource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.RelatedResource)
}
RelatedResource::RelatedResource(const RelatedResource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_resource_id()) {
    resource_id_ = new ::mead101::mead::ResourceId(*from.resource_id_);
  } else {
    resource_id_ = nullptr;
  }
  if (from._internal_has_resource_relationship_type()) {
    resource_relationship_type_ = new ::mead101::mead::ResourceRelationshipType(*from.resource_relationship_type_);
  } else {
    resource_relationship_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.RelatedResource)
}

void RelatedResource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelatedResource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&resource_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_relationship_type_) -
      reinterpret_cast<char*>(&resource_id_)) + sizeof(resource_relationship_type_));
}

RelatedResource::~RelatedResource() {
  // @@protoc_insertion_point(destructor:mead101.mead.RelatedResource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelatedResource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete resource_id_;
  if (this != internal_default_instance()) delete resource_relationship_type_;
}

void RelatedResource::ArenaDtor(void* object) {
  RelatedResource* _this = reinterpret_cast< RelatedResource* >(object);
  (void)_this;
}
void RelatedResource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelatedResource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelatedResource& RelatedResource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelatedResource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void RelatedResource::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.RelatedResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(resource_id_ != nullptr);
      resource_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resource_relationship_type_ != nullptr);
      resource_relationship_type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelatedResource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.ResourceId resource_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ResourceRelationshipType resource_relationship_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_relationship_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelatedResource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.RelatedResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.ResourceId resource_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::resource_id(this), target, stream);
  }

  // optional .mead101.mead.ResourceRelationshipType resource_relationship_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::resource_relationship_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.RelatedResource)
  return target;
}

size_t RelatedResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.RelatedResource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .mead101.mead.ResourceId resource_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_id_);
    }

    // optional .mead101.mead.ResourceRelationshipType resource_relationship_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_relationship_type_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelatedResource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.RelatedResource)
  GOOGLE_DCHECK_NE(&from, this);
  const RelatedResource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelatedResource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.RelatedResource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.RelatedResource)
    MergeFrom(*source);
  }
}

void RelatedResource::MergeFrom(const RelatedResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.RelatedResource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_resource_id()->::mead101::mead::ResourceId::MergeFrom(from._internal_resource_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_resource_relationship_type()->::mead101::mead::ResourceRelationshipType::MergeFrom(from._internal_resource_relationship_type());
    }
  }
}

void RelatedResource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.RelatedResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelatedResource::CopyFrom(const RelatedResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.RelatedResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelatedResource::IsInitialized() const {
  return true;
}

void RelatedResource::InternalSwap(RelatedResource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelatedResource, resource_relationship_type_)
      + sizeof(RelatedResource::resource_relationship_type_)
      - PROTOBUF_FIELD_OFFSET(RelatedResource, resource_id_)>(
          reinterpret_cast<char*>(&resource_id_),
          reinterpret_cast<char*>(&other->resource_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelatedResource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelatedResourceType::InitAsDefaultInstance() {
  ::mead101::mead::_RelatedResourceType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::RelatedResourceType*>(
      ::mead101::avs::RelatedResourceType::internal_default_instance());
}
class RelatedResourceType::_Internal {
 public:
  using HasBits = decltype(std::declval<RelatedResourceType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::RelatedResourceType& ext_value(const RelatedResourceType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::RelatedResourceType&
RelatedResourceType::_Internal::ext_value(const RelatedResourceType* msg) {
  return *msg->ext_value_;
}
void RelatedResourceType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
RelatedResourceType::RelatedResourceType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.RelatedResourceType)
}
RelatedResourceType::RelatedResourceType(const RelatedResourceType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::RelatedResourceType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.RelatedResourceType)
}

void RelatedResourceType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelatedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

RelatedResourceType::~RelatedResourceType() {
  // @@protoc_insertion_point(destructor:mead101.mead.RelatedResourceType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelatedResourceType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void RelatedResourceType::ArenaDtor(void* object) {
  RelatedResourceType* _this = reinterpret_cast< RelatedResourceType* >(object);
  (void)_this;
}
void RelatedResourceType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelatedResourceType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelatedResourceType& RelatedResourceType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelatedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void RelatedResourceType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.RelatedResourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelatedResourceType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.RelatedResourceType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.RelatedResourceType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.RelatedResourceType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelatedResourceType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.RelatedResourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.RelatedResourceType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.RelatedResourceType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.RelatedResourceType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.RelatedResourceType)
  return target;
}

size_t RelatedResourceType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.RelatedResourceType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.RelatedResourceType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelatedResourceType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.RelatedResourceType)
  GOOGLE_DCHECK_NE(&from, this);
  const RelatedResourceType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelatedResourceType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.RelatedResourceType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.RelatedResourceType)
    MergeFrom(*source);
  }
}

void RelatedResourceType::MergeFrom(const RelatedResourceType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.RelatedResourceType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::RelatedResourceType::MergeFrom(from._internal_ext_value());
    }
  }
}

void RelatedResourceType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.RelatedResourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelatedResourceType::CopyFrom(const RelatedResourceType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.RelatedResourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelatedResourceType::IsInitialized() const {
  return true;
}

void RelatedResourceType::InternalSwap(RelatedResourceType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelatedResourceType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelatedWork::InitAsDefaultInstance() {
  ::mead101::mead::_RelatedWork_default_instance_._instance.get_mutable()->work_id_ = const_cast< ::mead101::mead::MusicalWorkId*>(
      ::mead101::mead::MusicalWorkId::internal_default_instance());
  ::mead101::mead::_RelatedWork_default_instance_._instance.get_mutable()->work_relationship_type_ = const_cast< ::mead101::mead::WorkRelationshipType*>(
      ::mead101::mead::WorkRelationshipType::internal_default_instance());
}
class RelatedWork::_Internal {
 public:
  using HasBits = decltype(std::declval<RelatedWork>()._has_bits_);
  static const ::mead101::mead::MusicalWorkId& work_id(const RelatedWork* msg);
  static void set_has_work_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::WorkRelationshipType& work_relationship_type(const RelatedWork* msg);
  static void set_has_work_relationship_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mead101::mead::MusicalWorkId&
RelatedWork::_Internal::work_id(const RelatedWork* msg) {
  return *msg->work_id_;
}
const ::mead101::mead::WorkRelationshipType&
RelatedWork::_Internal::work_relationship_type(const RelatedWork* msg) {
  return *msg->work_relationship_type_;
}
RelatedWork::RelatedWork(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_reference_(arena),
  work_title_(arena),
  writer_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.RelatedWork)
}
RelatedWork::RelatedWork(const RelatedWork& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metadata_source_reference_(from.metadata_source_reference_),
      work_title_(from.work_title_),
      writer_(from.writer_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_work_id()) {
    work_id_ = new ::mead101::mead::MusicalWorkId(*from.work_id_);
  } else {
    work_id_ = nullptr;
  }
  if (from._internal_has_work_relationship_type()) {
    work_relationship_type_ = new ::mead101::mead::WorkRelationshipType(*from.work_relationship_type_);
  } else {
    work_relationship_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.RelatedWork)
}

void RelatedWork::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelatedWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&work_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&work_relationship_type_) -
      reinterpret_cast<char*>(&work_id_)) + sizeof(work_relationship_type_));
}

RelatedWork::~RelatedWork() {
  // @@protoc_insertion_point(destructor:mead101.mead.RelatedWork)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelatedWork::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete work_id_;
  if (this != internal_default_instance()) delete work_relationship_type_;
}

void RelatedWork::ArenaDtor(void* object) {
  RelatedWork* _this = reinterpret_cast< RelatedWork* >(object);
  (void)_this;
}
void RelatedWork::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelatedWork::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelatedWork& RelatedWork::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelatedWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void RelatedWork::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.RelatedWork)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_reference_.Clear();
  work_title_.Clear();
  writer_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(work_id_ != nullptr);
      work_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(work_relationship_type_ != nullptr);
      work_relationship_type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelatedWork::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string metadata_source_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.RelatedWork.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.MusicalWorkId work_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_work_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.WorkRelationshipType work_relationship_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_work_relationship_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.WorkTitle work_title = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_work_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.PartyWithNames writer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_writer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelatedWork::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.RelatedWork)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.RelatedWork.metadata_source_reference");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.MusicalWorkId work_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::work_id(this), target, stream);
  }

  // optional .mead101.mead.WorkRelationshipType work_relationship_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::work_relationship_type(this), target, stream);
  }

  // repeated .mead101.mead.WorkTitle work_title = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_work_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_work_title(i), target, stream);
  }

  // repeated .mead101.mead.PartyWithNames writer = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_writer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_writer(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.RelatedWork)
  return target;
}

size_t RelatedWork::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.RelatedWork)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // repeated .mead101.mead.WorkTitle work_title = 4;
  total_size += 1UL * this->_internal_work_title_size();
  for (const auto& msg : this->work_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.PartyWithNames writer = 5;
  total_size += 1UL * this->_internal_writer_size();
  for (const auto& msg : this->writer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .mead101.mead.MusicalWorkId work_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *work_id_);
    }

    // optional .mead101.mead.WorkRelationshipType work_relationship_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *work_relationship_type_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelatedWork::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.RelatedWork)
  GOOGLE_DCHECK_NE(&from, this);
  const RelatedWork* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelatedWork>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.RelatedWork)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.RelatedWork)
    MergeFrom(*source);
  }
}

void RelatedWork::MergeFrom(const RelatedWork& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.RelatedWork)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  work_title_.MergeFrom(from.work_title_);
  writer_.MergeFrom(from.writer_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_work_id()->::mead101::mead::MusicalWorkId::MergeFrom(from._internal_work_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_work_relationship_type()->::mead101::mead::WorkRelationshipType::MergeFrom(from._internal_work_relationship_type());
    }
  }
}

void RelatedWork::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.RelatedWork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelatedWork::CopyFrom(const RelatedWork& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.RelatedWork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelatedWork::IsInitialized() const {
  return true;
}

void RelatedWork::InternalSwap(RelatedWork* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  work_title_.InternalSwap(&other->work_title_);
  writer_.InternalSwap(&other->writer_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelatedWork, work_relationship_type_)
      + sizeof(RelatedWork::work_relationship_type_)
      - PROTOBUF_FIELD_OFFSET(RelatedWork, work_id_)>(
          reinterpret_cast<char*>(&work_id_),
          reinterpret_cast<char*>(&other->work_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelatedWork::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Release::InitAsDefaultInstance() {
}
class Release::_Internal {
 public:
  using HasBits = decltype(std::declval<Release>()._has_bits_);
  static void set_has_g_rid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_i_c_p_n(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_proprietary_release_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Release::Release(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  display_artist_(arena),
  release_title_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Release)
}
Release::Release(const Release& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      display_artist_(from.display_artist_),
      release_title_(from.release_title_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  g_rid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_g_rid()) {
    g_rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_g_rid(),
      GetArena());
  }
  i_c_p_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_c_p_n()) {
    i_c_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_c_p_n(),
      GetArena());
  }
  proprietary_release_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_proprietary_release_id()) {
    proprietary_release_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_proprietary_release_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Release)
}

void Release::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Release_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  g_rid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_c_p_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proprietary_release_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Release::~Release() {
  // @@protoc_insertion_point(destructor:mead101.mead.Release)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Release::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  g_rid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_c_p_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proprietary_release_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Release::ArenaDtor(void* object) {
  Release* _this = reinterpret_cast< Release* >(object);
  (void)_this;
}
void Release::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Release::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Release& Release::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Release_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Release::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Release)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  display_artist_.Clear();
  release_title_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      g_rid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      i_c_p_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      proprietary_release_id_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Release::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.DisplayArtist display_artist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_artist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string g_rid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_g_rid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Release.g_rid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_c_p_n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_i_c_p_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Release.i_c_p_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string proprietary_release_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_proprietary_release_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Release.proprietary_release_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.ReleaseTitle release_title = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_release_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Release::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Release)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.DisplayArtist display_artist = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_artist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_display_artist(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string g_rid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_g_rid().data(), static_cast<int>(this->_internal_g_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Release.g_rid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_g_rid(), target);
  }

  // optional string i_c_p_n = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_c_p_n().data(), static_cast<int>(this->_internal_i_c_p_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Release.i_c_p_n");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_i_c_p_n(), target);
  }

  // optional string proprietary_release_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proprietary_release_id().data(), static_cast<int>(this->_internal_proprietary_release_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Release.proprietary_release_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_proprietary_release_id(), target);
  }

  // repeated .mead101.mead.ReleaseTitle release_title = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_release_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_release_title(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Release)
  return target;
}

size_t Release::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Release)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.DisplayArtist display_artist = 1;
  total_size += 1UL * this->_internal_display_artist_size();
  for (const auto& msg : this->display_artist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.ReleaseTitle release_title = 5;
  total_size += 1UL * this->_internal_release_title_size();
  for (const auto& msg : this->release_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string g_rid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_g_rid());
    }

    // optional string i_c_p_n = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_c_p_n());
    }

    // optional string proprietary_release_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proprietary_release_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Release::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Release)
  GOOGLE_DCHECK_NE(&from, this);
  const Release* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Release>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Release)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Release)
    MergeFrom(*source);
  }
}

void Release::MergeFrom(const Release& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Release)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  display_artist_.MergeFrom(from.display_artist_);
  release_title_.MergeFrom(from.release_title_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_g_rid(from._internal_g_rid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_i_c_p_n(from._internal_i_c_p_n());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_proprietary_release_id(from._internal_proprietary_release_id());
    }
  }
}

void Release::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Release)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Release::CopyFrom(const Release& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Release)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Release::IsInitialized() const {
  return true;
}

void Release::InternalSwap(Release* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  display_artist_.InternalSwap(&other->display_artist_);
  release_title_.InternalSwap(&other->release_title_);
  g_rid_.Swap(&other->g_rid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_c_p_n_.Swap(&other->i_c_p_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proprietary_release_id_.Swap(&other->proprietary_release_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Release::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleaseId::InitAsDefaultInstance() {
  ::mead101::mead::_ReleaseId_default_instance_._instance.get_mutable()->catalog_number_ = const_cast< ::mead101::mead::CatalogNumber*>(
      ::mead101::mead::CatalogNumber::internal_default_instance());
}
class ReleaseId::_Internal {
 public:
  using HasBits = decltype(std::declval<ReleaseId>()._has_bits_);
  static const ::mead101::mead::CatalogNumber& catalog_number(const ReleaseId* msg);
  static void set_has_catalog_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_g_rid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_i_c_p_n(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_i_s_r_c(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::mead::CatalogNumber&
ReleaseId::_Internal::catalog_number(const ReleaseId* msg) {
  return *msg->catalog_number_;
}
ReleaseId::ReleaseId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proprietary_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ReleaseId)
}
ReleaseId::ReleaseId(const ReleaseId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      proprietary_id_(from.proprietary_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  g_rid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_g_rid()) {
    g_rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_g_rid(),
      GetArena());
  }
  i_c_p_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_c_p_n()) {
    i_c_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_c_p_n(),
      GetArena());
  }
  i_s_r_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_r_c()) {
    i_s_r_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_r_c(),
      GetArena());
  }
  if (from._internal_has_catalog_number()) {
    catalog_number_ = new ::mead101::mead::CatalogNumber(*from.catalog_number_);
  } else {
    catalog_number_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ReleaseId)
}

void ReleaseId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  g_rid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_c_p_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_r_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  catalog_number_ = nullptr;
}

ReleaseId::~ReleaseId() {
  // @@protoc_insertion_point(destructor:mead101.mead.ReleaseId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReleaseId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  g_rid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_c_p_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_r_c_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete catalog_number_;
}

void ReleaseId::ArenaDtor(void* object) {
  ReleaseId* _this = reinterpret_cast< ReleaseId* >(object);
  (void)_this;
}
void ReleaseId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseId& ReleaseId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ReleaseId::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ReleaseId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proprietary_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      g_rid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      i_c_p_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      i_s_r_c_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(catalog_number_ != nullptr);
      catalog_number_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.CatalogNumber catalog_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_catalog_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string g_rid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_g_rid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ReleaseId.g_rid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_c_p_n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_i_c_p_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ReleaseId.i_c_p_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_s_r_c = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_i_s_r_c();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ReleaseId.i_s_r_c");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.ProprietaryId proprietary_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proprietary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ReleaseId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.CatalogNumber catalog_number = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::catalog_number(this), target, stream);
  }

  // optional string g_rid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_g_rid().data(), static_cast<int>(this->_internal_g_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ReleaseId.g_rid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_g_rid(), target);
  }

  // optional string i_c_p_n = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_c_p_n().data(), static_cast<int>(this->_internal_i_c_p_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ReleaseId.i_c_p_n");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_i_c_p_n(), target);
  }

  // optional string i_s_r_c = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_r_c().data(), static_cast<int>(this->_internal_i_s_r_c().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ReleaseId.i_s_r_c");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_i_s_r_c(), target);
  }

  // repeated .mead101.mead.ProprietaryId proprietary_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proprietary_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_proprietary_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ReleaseId)
  return target;
}

size_t ReleaseId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ReleaseId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.ProprietaryId proprietary_id = 5;
  total_size += 1UL * this->_internal_proprietary_id_size();
  for (const auto& msg : this->proprietary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string g_rid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_g_rid());
    }

    // optional string i_c_p_n = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_c_p_n());
    }

    // optional string i_s_r_c = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_r_c());
    }

    // optional .mead101.mead.CatalogNumber catalog_number = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *catalog_number_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ReleaseId)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ReleaseId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ReleaseId)
    MergeFrom(*source);
  }
}

void ReleaseId::MergeFrom(const ReleaseId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ReleaseId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proprietary_id_.MergeFrom(from.proprietary_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_g_rid(from._internal_g_rid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_i_c_p_n(from._internal_i_c_p_n());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_i_s_r_c(from._internal_i_s_r_c());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_catalog_number()->::mead101::mead::CatalogNumber::MergeFrom(from._internal_catalog_number());
    }
  }
}

void ReleaseId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ReleaseId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseId::CopyFrom(const ReleaseId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ReleaseId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseId::IsInitialized() const {
  return true;
}

void ReleaseId::InternalSwap(ReleaseId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  proprietary_id_.InternalSwap(&other->proprietary_id_);
  g_rid_.Swap(&other->g_rid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_c_p_n_.Swap(&other->i_c_p_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_s_r_c_.Swap(&other->i_s_r_c_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(catalog_number_, other->catalog_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleaseInformation::InitAsDefaultInstance() {
  ::mead101::mead::_ReleaseInformation_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::mead101::avs::CurrentTerritoryCode*>(
      ::mead101::avs::CurrentTerritoryCode::internal_default_instance());
  ::mead101::mead::_ReleaseInformation_default_instance_._instance.get_mutable()->priority_period_end_date_ = const_cast< ::mead101::mead::ddex_IsoDate*>(
      ::mead101::mead::ddex_IsoDate::internal_default_instance());
  ::mead101::mead::_ReleaseInformation_default_instance_._instance.get_mutable()->priority_period_start_date_ = const_cast< ::mead101::mead::ddex_IsoDate*>(
      ::mead101::mead::ddex_IsoDate::internal_default_instance());
  ::mead101::mead::_ReleaseInformation_default_instance_._instance.get_mutable()->release_summary_ = const_cast< ::mead101::mead::ReleaseSummary*>(
      ::mead101::mead::ReleaseSummary::internal_default_instance());
  ::mead101::mead::_ReleaseInformation_default_instance_._instance.get_mutable()->sub_genre_category_ = const_cast< ::mead101::mead::SubGenreCategory*>(
      ::mead101::mead::SubGenreCategory::internal_default_instance());
}
class ReleaseInformation::_Internal {
 public:
  using HasBits = decltype(std::declval<ReleaseInformation>()._has_bits_);
  static const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code(const ReleaseInformation* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::ddex_IsoDate& priority_period_end_date(const ReleaseInformation* msg);
  static void set_has_priority_period_end_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::ddex_IsoDate& priority_period_start_date(const ReleaseInformation* msg);
  static void set_has_priority_period_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::ReleaseSummary& release_summary(const ReleaseInformation* msg);
  static void set_has_release_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mead101::mead::SubGenreCategory& sub_genre_category(const ReleaseInformation* msg);
  static void set_has_sub_genre_category(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::mead101::avs::CurrentTerritoryCode&
ReleaseInformation::_Internal::applicable_territory_code(const ReleaseInformation* msg) {
  return *msg->applicable_territory_code_;
}
const ::mead101::mead::ddex_IsoDate&
ReleaseInformation::_Internal::priority_period_end_date(const ReleaseInformation* msg) {
  return *msg->priority_period_end_date_;
}
const ::mead101::mead::ddex_IsoDate&
ReleaseInformation::_Internal::priority_period_start_date(const ReleaseInformation* msg) {
  return *msg->priority_period_start_date_;
}
const ::mead101::mead::ReleaseSummary&
ReleaseInformation::_Internal::release_summary(const ReleaseInformation* msg) {
  return *msg->release_summary_;
}
const ::mead101::mead::SubGenreCategory&
ReleaseInformation::_Internal::sub_genre_category(const ReleaseInformation* msg) {
  return *msg->sub_genre_category_;
}
void ReleaseInformation::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ReleaseInformation::ReleaseInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  alternative_title_(arena),
  artistic_influence_(arena),
  award_(arena),
  commentary_note_(arena),
  epoch_(arena),
  genre_category_(arena),
  historic_charting_information_(arena),
  image_(arena),
  is_similar_(arena),
  mood_(arena),
  theme_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ReleaseInformation)
}
ReleaseInformation::ReleaseInformation(const ReleaseInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      alternative_title_(from.alternative_title_),
      artistic_influence_(from.artistic_influence_),
      award_(from.award_),
      commentary_note_(from.commentary_note_),
      epoch_(from.epoch_),
      genre_category_(from.genre_category_),
      historic_charting_information_(from.historic_charting_information_),
      image_(from.image_),
      is_similar_(from.is_similar_),
      mood_(from.mood_),
      theme_(from.theme_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::mead101::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_priority_period_end_date()) {
    priority_period_end_date_ = new ::mead101::mead::ddex_IsoDate(*from.priority_period_end_date_);
  } else {
    priority_period_end_date_ = nullptr;
  }
  if (from._internal_has_priority_period_start_date()) {
    priority_period_start_date_ = new ::mead101::mead::ddex_IsoDate(*from.priority_period_start_date_);
  } else {
    priority_period_start_date_ = nullptr;
  }
  if (from._internal_has_release_summary()) {
    release_summary_ = new ::mead101::mead::ReleaseSummary(*from.release_summary_);
  } else {
    release_summary_ = nullptr;
  }
  if (from._internal_has_sub_genre_category()) {
    sub_genre_category_ = new ::mead101::mead::SubGenreCategory(*from.sub_genre_category_);
  } else {
    sub_genre_category_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ReleaseInformation)
}

void ReleaseInformation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleaseInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_genre_category_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(sub_genre_category_));
}

ReleaseInformation::~ReleaseInformation() {
  // @@protoc_insertion_point(destructor:mead101.mead.ReleaseInformation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReleaseInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete priority_period_end_date_;
  if (this != internal_default_instance()) delete priority_period_start_date_;
  if (this != internal_default_instance()) delete release_summary_;
  if (this != internal_default_instance()) delete sub_genre_category_;
}

void ReleaseInformation::ArenaDtor(void* object) {
  ReleaseInformation* _this = reinterpret_cast< ReleaseInformation* >(object);
  (void)_this;
}
void ReleaseInformation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseInformation& ReleaseInformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ReleaseInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ReleaseInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alternative_title_.Clear();
  artistic_influence_.Clear();
  award_.Clear();
  commentary_note_.Clear();
  epoch_.Clear();
  genre_category_.Clear();
  historic_charting_information_.Clear();
  image_.Clear();
  is_similar_.Clear();
  mood_.Clear();
  theme_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(priority_period_end_date_ != nullptr);
      priority_period_end_date_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(priority_period_start_date_ != nullptr);
      priority_period_start_date_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(release_summary_ != nullptr);
      release_summary_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(sub_genre_category_ != nullptr);
      sub_genre_category_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.AlternativeTitle alternative_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alternative_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.ArtisticInfluence artistic_influence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_artistic_influence(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Award award = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_award(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.CommentaryNote commentary_note = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commentary_note(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Epoch epoch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_epoch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.GenreCategory genre_category = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_genre_category(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.HistoricChartingInformation historic_charting_information = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_historic_charting_information(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Image image = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.SimilarRelease is_similar = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_is_similar(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Mood mood = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mood(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ddex_IsoDate priority_period_end_date = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_priority_period_end_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ddex_IsoDate priority_period_start_date = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_priority_period_start_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ReleaseSummary release_summary = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.SubGenreCategory sub_genre_category = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_genre_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Theme theme = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_theme(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseInformation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ReleaseInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.AlternativeTitle alternative_title = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_alternative_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_alternative_title(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::applicable_territory_code(this), target, stream);
  }

  // repeated .mead101.mead.ArtisticInfluence artistic_influence = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_artistic_influence_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_artistic_influence(i), target, stream);
  }

  // repeated .mead101.mead.Award award = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_award_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_award(i), target, stream);
  }

  // repeated .mead101.mead.CommentaryNote commentary_note = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_commentary_note_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_commentary_note(i), target, stream);
  }

  // repeated .mead101.mead.Epoch epoch = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_epoch_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_epoch(i), target, stream);
  }

  // repeated .mead101.mead.GenreCategory genre_category = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_genre_category_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_genre_category(i), target, stream);
  }

  // repeated .mead101.mead.HistoricChartingInformation historic_charting_information = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_historic_charting_information_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_historic_charting_information(i), target, stream);
  }

  // repeated .mead101.mead.Image image = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_image_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_image(i), target, stream);
  }

  // repeated .mead101.mead.SimilarRelease is_similar = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_is_similar_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_is_similar(i), target, stream);
  }

  // repeated .mead101.mead.Mood mood = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mood_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_mood(i), target, stream);
  }

  // optional .mead101.mead.ddex_IsoDate priority_period_end_date = 12;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::priority_period_end_date(this), target, stream);
  }

  // optional .mead101.mead.ddex_IsoDate priority_period_start_date = 13;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::priority_period_start_date(this), target, stream);
  }

  // optional .mead101.mead.ReleaseSummary release_summary = 14;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::release_summary(this), target, stream);
  }

  // optional .mead101.mead.SubGenreCategory sub_genre_category = 15;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::sub_genre_category(this), target, stream);
  }

  // repeated .mead101.mead.Theme theme = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_theme_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_theme(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ReleaseInformation)
  return target;
}

size_t ReleaseInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ReleaseInformation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.AlternativeTitle alternative_title = 1;
  total_size += 1UL * this->_internal_alternative_title_size();
  for (const auto& msg : this->alternative_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.ArtisticInfluence artistic_influence = 3;
  total_size += 1UL * this->_internal_artistic_influence_size();
  for (const auto& msg : this->artistic_influence_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Award award = 4;
  total_size += 1UL * this->_internal_award_size();
  for (const auto& msg : this->award_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.CommentaryNote commentary_note = 5;
  total_size += 1UL * this->_internal_commentary_note_size();
  for (const auto& msg : this->commentary_note_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Epoch epoch = 6;
  total_size += 1UL * this->_internal_epoch_size();
  for (const auto& msg : this->epoch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.GenreCategory genre_category = 7;
  total_size += 1UL * this->_internal_genre_category_size();
  for (const auto& msg : this->genre_category_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.HistoricChartingInformation historic_charting_information = 8;
  total_size += 1UL * this->_internal_historic_charting_information_size();
  for (const auto& msg : this->historic_charting_information_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Image image = 9;
  total_size += 1UL * this->_internal_image_size();
  for (const auto& msg : this->image_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.SimilarRelease is_similar = 10;
  total_size += 1UL * this->_internal_is_similar_size();
  for (const auto& msg : this->is_similar_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Mood mood = 11;
  total_size += 1UL * this->_internal_mood_size();
  for (const auto& msg : this->mood_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Theme theme = 16;
  total_size += 2UL * this->_internal_theme_size();
  for (const auto& msg : this->theme_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .mead101.mead.ddex_IsoDate priority_period_end_date = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *priority_period_end_date_);
    }

    // optional .mead101.mead.ddex_IsoDate priority_period_start_date = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *priority_period_start_date_);
    }

    // optional .mead101.mead.ReleaseSummary release_summary = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *release_summary_);
    }

    // optional .mead101.mead.SubGenreCategory sub_genre_category = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sub_genre_category_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseInformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ReleaseInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseInformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseInformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ReleaseInformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ReleaseInformation)
    MergeFrom(*source);
  }
}

void ReleaseInformation::MergeFrom(const ReleaseInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ReleaseInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alternative_title_.MergeFrom(from.alternative_title_);
  artistic_influence_.MergeFrom(from.artistic_influence_);
  award_.MergeFrom(from.award_);
  commentary_note_.MergeFrom(from.commentary_note_);
  epoch_.MergeFrom(from.epoch_);
  genre_category_.MergeFrom(from.genre_category_);
  historic_charting_information_.MergeFrom(from.historic_charting_information_);
  image_.MergeFrom(from.image_);
  is_similar_.MergeFrom(from.is_similar_);
  mood_.MergeFrom(from.mood_);
  theme_.MergeFrom(from.theme_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_applicable_territory_code()->::mead101::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_priority_period_end_date()->::mead101::mead::ddex_IsoDate::MergeFrom(from._internal_priority_period_end_date());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_priority_period_start_date()->::mead101::mead::ddex_IsoDate::MergeFrom(from._internal_priority_period_start_date());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_release_summary()->::mead101::mead::ReleaseSummary::MergeFrom(from._internal_release_summary());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_sub_genre_category()->::mead101::mead::SubGenreCategory::MergeFrom(from._internal_sub_genre_category());
    }
  }
}

void ReleaseInformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ReleaseInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseInformation::CopyFrom(const ReleaseInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ReleaseInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseInformation::IsInitialized() const {
  return true;
}

void ReleaseInformation::InternalSwap(ReleaseInformation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  alternative_title_.InternalSwap(&other->alternative_title_);
  artistic_influence_.InternalSwap(&other->artistic_influence_);
  award_.InternalSwap(&other->award_);
  commentary_note_.InternalSwap(&other->commentary_note_);
  epoch_.InternalSwap(&other->epoch_);
  genre_category_.InternalSwap(&other->genre_category_);
  historic_charting_information_.InternalSwap(&other->historic_charting_information_);
  image_.InternalSwap(&other->image_);
  is_similar_.InternalSwap(&other->is_similar_);
  mood_.InternalSwap(&other->mood_);
  theme_.InternalSwap(&other->theme_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReleaseInformation, sub_genre_category_)
      + sizeof(ReleaseInformation::sub_genre_category_)
      - PROTOBUF_FIELD_OFFSET(ReleaseInformation, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseInformation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleaseInformationList::InitAsDefaultInstance() {
}
class ReleaseInformationList::_Internal {
 public:
};

ReleaseInformationList::ReleaseInformationList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  release_information_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ReleaseInformationList)
}
ReleaseInformationList::ReleaseInformationList(const ReleaseInformationList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      release_information_(from.release_information_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ReleaseInformationList)
}

void ReleaseInformationList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleaseInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
}

ReleaseInformationList::~ReleaseInformationList() {
  // @@protoc_insertion_point(destructor:mead101.mead.ReleaseInformationList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReleaseInformationList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReleaseInformationList::ArenaDtor(void* object) {
  ReleaseInformationList* _this = reinterpret_cast< ReleaseInformationList* >(object);
  (void)_this;
}
void ReleaseInformationList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseInformationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseInformationList& ReleaseInformationList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ReleaseInformationList::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ReleaseInformationList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  release_information_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseInformationList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.ReleaseInformation release_information = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_release_information(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseInformationList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ReleaseInformationList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.ReleaseInformation release_information = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_release_information_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_release_information(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ReleaseInformationList)
  return target;
}

size_t ReleaseInformationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ReleaseInformationList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.ReleaseInformation release_information = 1;
  total_size += 1UL * this->_internal_release_information_size();
  for (const auto& msg : this->release_information_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseInformationList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ReleaseInformationList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseInformationList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseInformationList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ReleaseInformationList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ReleaseInformationList)
    MergeFrom(*source);
  }
}

void ReleaseInformationList::MergeFrom(const ReleaseInformationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ReleaseInformationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  release_information_.MergeFrom(from.release_information_);
}

void ReleaseInformationList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ReleaseInformationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseInformationList::CopyFrom(const ReleaseInformationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ReleaseInformationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseInformationList::IsInitialized() const {
  return true;
}

void ReleaseInformationList::InternalSwap(ReleaseInformationList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  release_information_.InternalSwap(&other->release_information_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseInformationList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleaseSummary::InitAsDefaultInstance() {
  ::mead101::mead::_ReleaseSummary_default_instance_._instance.get_mutable()->release_id_ = const_cast< ::mead101::mead::ReleaseId*>(
      ::mead101::mead::ReleaseId::internal_default_instance());
}
class ReleaseSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<ReleaseSummary>()._has_bits_);
  static const ::mead101::mead::ReleaseId& release_id(const ReleaseSummary* msg);
  static void set_has_release_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mead101::mead::ReleaseId&
ReleaseSummary::_Internal::release_id(const ReleaseSummary* msg) {
  return *msg->release_id_;
}
ReleaseSummary::ReleaseSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  display_artist_(arena),
  display_title_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ReleaseSummary)
}
ReleaseSummary::ReleaseSummary(const ReleaseSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      display_artist_(from.display_artist_),
      display_title_(from.display_title_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_release_id()) {
    release_id_ = new ::mead101::mead::ReleaseId(*from.release_id_);
  } else {
    release_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ReleaseSummary)
}

void ReleaseSummary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleaseSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  release_id_ = nullptr;
}

ReleaseSummary::~ReleaseSummary() {
  // @@protoc_insertion_point(destructor:mead101.mead.ReleaseSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReleaseSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete release_id_;
}

void ReleaseSummary::ArenaDtor(void* object) {
  ReleaseSummary* _this = reinterpret_cast< ReleaseSummary* >(object);
  (void)_this;
}
void ReleaseSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseSummary& ReleaseSummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ReleaseSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ReleaseSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  display_artist_.Clear();
  display_title_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(release_id_ != nullptr);
    release_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.PartyNameWithTerritory display_artist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_artist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.DisplayTitle display_title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ReleaseId release_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ReleaseSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.PartyNameWithTerritory display_artist = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_artist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_display_artist(i), target, stream);
  }

  // repeated .mead101.mead.DisplayTitle display_title = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_display_title(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.ReleaseId release_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::release_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ReleaseSummary)
  return target;
}

size_t ReleaseSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ReleaseSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.PartyNameWithTerritory display_artist = 1;
  total_size += 1UL * this->_internal_display_artist_size();
  for (const auto& msg : this->display_artist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.DisplayTitle display_title = 2;
  total_size += 1UL * this->_internal_display_title_size();
  for (const auto& msg : this->display_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .mead101.mead.ReleaseId release_id = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *release_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ReleaseSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ReleaseSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ReleaseSummary)
    MergeFrom(*source);
  }
}

void ReleaseSummary::MergeFrom(const ReleaseSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ReleaseSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  display_artist_.MergeFrom(from.display_artist_);
  display_title_.MergeFrom(from.display_title_);
  if (from._internal_has_release_id()) {
    _internal_mutable_release_id()->::mead101::mead::ReleaseId::MergeFrom(from._internal_release_id());
  }
}

void ReleaseSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ReleaseSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseSummary::CopyFrom(const ReleaseSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ReleaseSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseSummary::IsInitialized() const {
  return true;
}

void ReleaseSummary::InternalSwap(ReleaseSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  display_artist_.InternalSwap(&other->display_artist_);
  display_title_.InternalSwap(&other->display_title_);
  swap(release_id_, other->release_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleaseTitle::InitAsDefaultInstance() {
}
class ReleaseTitle::_Internal {
 public:
  using HasBits = decltype(std::declval<ReleaseTitle>()._has_bits_);
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ReleaseTitle::ReleaseTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ReleaseTitle)
}
ReleaseTitle::ReleaseTitle(const ReleaseTitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ReleaseTitle)
}

void ReleaseTitle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleaseTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReleaseTitle::~ReleaseTitle() {
  // @@protoc_insertion_point(destructor:mead101.mead.ReleaseTitle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReleaseTitle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReleaseTitle::ArenaDtor(void* object) {
  ReleaseTitle* _this = reinterpret_cast< ReleaseTitle* >(object);
  (void)_this;
}
void ReleaseTitle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseTitle& ReleaseTitle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ReleaseTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ReleaseTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseTitle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language_and_script_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ReleaseTitle.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ReleaseTitle.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseTitle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ReleaseTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language_and_script_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ReleaseTitle.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language_and_script_code(), target);
  }

  // optional string ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ReleaseTitle.ext_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ReleaseTitle)
  return target;
}

size_t ReleaseTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ReleaseTitle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string language_and_script_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseTitle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ReleaseTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseTitle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseTitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ReleaseTitle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ReleaseTitle)
    MergeFrom(*source);
  }
}

void ReleaseTitle::MergeFrom(const ReleaseTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ReleaseTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
  }
}

void ReleaseTitle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ReleaseTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseTitle::CopyFrom(const ReleaseTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ReleaseTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseTitle::IsInitialized() const {
  return true;
}

void ReleaseTitle::InternalSwap(ReleaseTitle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseTitle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Resource::InitAsDefaultInstance() {
}
class Resource::_Internal {
 public:
  using HasBits = decltype(std::declval<Resource>()._has_bits_);
  static void set_has_catalog_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_i_s_r_c(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_proprietary_resource_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Resource::Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  display_artist_(arena),
  resource_title_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Resource)
}
Resource::Resource(const Resource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      display_artist_(from.display_artist_),
      resource_title_(from.resource_title_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  catalog_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_catalog_number()) {
    catalog_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_catalog_number(),
      GetArena());
  }
  i_s_r_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_r_c()) {
    i_s_r_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_r_c(),
      GetArena());
  }
  proprietary_resource_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_proprietary_resource_id()) {
    proprietary_resource_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_proprietary_resource_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Resource)
}

void Resource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Resource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  catalog_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_r_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proprietary_resource_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Resource::~Resource() {
  // @@protoc_insertion_point(destructor:mead101.mead.Resource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Resource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  catalog_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_r_c_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proprietary_resource_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Resource::ArenaDtor(void* object) {
  Resource* _this = reinterpret_cast< Resource* >(object);
  (void)_this;
}
void Resource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Resource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Resource& Resource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Resource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Resource::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Resource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  display_artist_.Clear();
  resource_title_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      catalog_number_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      i_s_r_c_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      proprietary_resource_id_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Resource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string catalog_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_catalog_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Resource.catalog_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.DisplayArtist display_artist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_artist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string i_s_r_c = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_i_s_r_c();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Resource.i_s_r_c");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string proprietary_resource_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_proprietary_resource_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Resource.proprietary_resource_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.ResourceTitle resource_title = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Resource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Resource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string catalog_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_catalog_number().data(), static_cast<int>(this->_internal_catalog_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Resource.catalog_number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_catalog_number(), target);
  }

  // repeated .mead101.mead.DisplayArtist display_artist = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_artist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_display_artist(i), target, stream);
  }

  // optional string i_s_r_c = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_r_c().data(), static_cast<int>(this->_internal_i_s_r_c().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Resource.i_s_r_c");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_i_s_r_c(), target);
  }

  // optional string proprietary_resource_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proprietary_resource_id().data(), static_cast<int>(this->_internal_proprietary_resource_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Resource.proprietary_resource_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_proprietary_resource_id(), target);
  }

  // repeated .mead101.mead.ResourceTitle resource_title = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_resource_title(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Resource)
  return target;
}

size_t Resource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Resource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.DisplayArtist display_artist = 2;
  total_size += 1UL * this->_internal_display_artist_size();
  for (const auto& msg : this->display_artist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.ResourceTitle resource_title = 5;
  total_size += 1UL * this->_internal_resource_title_size();
  for (const auto& msg : this->resource_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string catalog_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_catalog_number());
    }

    // optional string i_s_r_c = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_r_c());
    }

    // optional string proprietary_resource_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proprietary_resource_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Resource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Resource)
  GOOGLE_DCHECK_NE(&from, this);
  const Resource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Resource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Resource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Resource)
    MergeFrom(*source);
  }
}

void Resource::MergeFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Resource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  display_artist_.MergeFrom(from.display_artist_);
  resource_title_.MergeFrom(from.resource_title_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_catalog_number(from._internal_catalog_number());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_i_s_r_c(from._internal_i_s_r_c());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_proprietary_resource_id(from._internal_proprietary_resource_id());
    }
  }
}

void Resource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource::CopyFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {
  return true;
}

void Resource::InternalSwap(Resource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  display_artist_.InternalSwap(&other->display_artist_);
  resource_title_.InternalSwap(&other->resource_title_);
  catalog_number_.Swap(&other->catalog_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_s_r_c_.Swap(&other->i_s_r_c_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proprietary_resource_id_.Swap(&other->proprietary_resource_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Resource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceContributorRole::InitAsDefaultInstance() {
  ::mead101::mead::_ResourceContributorRole_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::ResourceContributorRole*>(
      ::mead101::avs::ResourceContributorRole::internal_default_instance());
}
class ResourceContributorRole::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceContributorRole>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::ResourceContributorRole& ext_value(const ResourceContributorRole* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::ResourceContributorRole&
ResourceContributorRole::_Internal::ext_value(const ResourceContributorRole* msg) {
  return *msg->ext_value_;
}
void ResourceContributorRole::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ResourceContributorRole::ResourceContributorRole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ResourceContributorRole)
}
ResourceContributorRole::ResourceContributorRole(const ResourceContributorRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::ResourceContributorRole(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ResourceContributorRole)
}

void ResourceContributorRole::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

ResourceContributorRole::~ResourceContributorRole() {
  // @@protoc_insertion_point(destructor:mead101.mead.ResourceContributorRole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceContributorRole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void ResourceContributorRole::ArenaDtor(void* object) {
  ResourceContributorRole* _this = reinterpret_cast< ResourceContributorRole* >(object);
  (void)_this;
}
void ResourceContributorRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceContributorRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceContributorRole& ResourceContributorRole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ResourceContributorRole::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ResourceContributorRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceContributorRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ResourceContributorRole.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ResourceContributorRole.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.ResourceContributorRole ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceContributorRole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ResourceContributorRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ResourceContributorRole.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ResourceContributorRole.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.ResourceContributorRole ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ResourceContributorRole)
  return target;
}

size_t ResourceContributorRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ResourceContributorRole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.ResourceContributorRole ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceContributorRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ResourceContributorRole)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceContributorRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceContributorRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ResourceContributorRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ResourceContributorRole)
    MergeFrom(*source);
  }
}

void ResourceContributorRole::MergeFrom(const ResourceContributorRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ResourceContributorRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::ResourceContributorRole::MergeFrom(from._internal_ext_value());
    }
  }
}

void ResourceContributorRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ResourceContributorRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceContributorRole::CopyFrom(const ResourceContributorRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ResourceContributorRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceContributorRole::IsInitialized() const {
  return true;
}

void ResourceContributorRole::InternalSwap(ResourceContributorRole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceContributorRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceId::InitAsDefaultInstance() {
  ::mead101::mead::_ResourceId_default_instance_._instance.get_mutable()->catalog_number_ = const_cast< ::mead101::mead::CatalogNumber*>(
      ::mead101::mead::CatalogNumber::internal_default_instance());
}
class ResourceId::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceId>()._has_bits_);
  static const ::mead101::mead::CatalogNumber& catalog_number(const ResourceId* msg);
  static void set_has_catalog_number(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_i_s_a_n(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_i_s_b_n(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_i_s_m_n(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_i_s_r_c(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_i_s_s_n(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_s_i_c_i(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_v_i_s_a_n(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::mead101::mead::CatalogNumber&
ResourceId::_Internal::catalog_number(const ResourceId* msg) {
  return *msg->catalog_number_;
}
ResourceId::ResourceId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proprietary_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ResourceId)
}
ResourceId::ResourceId(const ResourceId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      proprietary_id_(from.proprietary_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  i_s_a_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_a_n()) {
    i_s_a_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_a_n(),
      GetArena());
  }
  i_s_b_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_b_n()) {
    i_s_b_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_b_n(),
      GetArena());
  }
  i_s_m_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_m_n()) {
    i_s_m_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_m_n(),
      GetArena());
  }
  i_s_r_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_r_c()) {
    i_s_r_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_r_c(),
      GetArena());
  }
  i_s_s_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_s_n()) {
    i_s_s_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_s_n(),
      GetArena());
  }
  s_i_c_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_s_i_c_i()) {
    s_i_c_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_s_i_c_i(),
      GetArena());
  }
  v_i_s_a_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_v_i_s_a_n()) {
    v_i_s_a_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_v_i_s_a_n(),
      GetArena());
  }
  if (from._internal_has_catalog_number()) {
    catalog_number_ = new ::mead101::mead::CatalogNumber(*from.catalog_number_);
  } else {
    catalog_number_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ResourceId)
}

void ResourceId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  i_s_a_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_b_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_m_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_r_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_s_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_i_c_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v_i_s_a_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  catalog_number_ = nullptr;
}

ResourceId::~ResourceId() {
  // @@protoc_insertion_point(destructor:mead101.mead.ResourceId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  i_s_a_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_b_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_m_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_r_c_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_s_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_i_c_i_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v_i_s_a_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete catalog_number_;
}

void ResourceId::ArenaDtor(void* object) {
  ResourceId* _this = reinterpret_cast< ResourceId* >(object);
  (void)_this;
}
void ResourceId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceId& ResourceId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceId_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ResourceId::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ResourceId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proprietary_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      i_s_a_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      i_s_b_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      i_s_m_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      i_s_r_c_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      i_s_s_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      s_i_c_i_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      v_i_s_a_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(catalog_number_ != nullptr);
      catalog_number_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.CatalogNumber catalog_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_catalog_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_s_a_n = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_i_s_a_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ResourceId.i_s_a_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_s_b_n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_i_s_b_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ResourceId.i_s_b_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_s_m_n = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_i_s_m_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ResourceId.i_s_m_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_s_r_c = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_i_s_r_c();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ResourceId.i_s_r_c");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_s_s_n = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_i_s_s_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ResourceId.i_s_s_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.ProprietaryId proprietary_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proprietary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string s_i_c_i = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_s_i_c_i();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ResourceId.s_i_c_i");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string v_i_s_a_n = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_v_i_s_a_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ResourceId.v_i_s_a_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ResourceId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.CatalogNumber catalog_number = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::catalog_number(this), target, stream);
  }

  // optional string i_s_a_n = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_a_n().data(), static_cast<int>(this->_internal_i_s_a_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ResourceId.i_s_a_n");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_i_s_a_n(), target);
  }

  // optional string i_s_b_n = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_b_n().data(), static_cast<int>(this->_internal_i_s_b_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ResourceId.i_s_b_n");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_i_s_b_n(), target);
  }

  // optional string i_s_m_n = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_m_n().data(), static_cast<int>(this->_internal_i_s_m_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ResourceId.i_s_m_n");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_i_s_m_n(), target);
  }

  // optional string i_s_r_c = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_r_c().data(), static_cast<int>(this->_internal_i_s_r_c().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ResourceId.i_s_r_c");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_i_s_r_c(), target);
  }

  // optional string i_s_s_n = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_s_n().data(), static_cast<int>(this->_internal_i_s_s_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ResourceId.i_s_s_n");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_i_s_s_n(), target);
  }

  // repeated .mead101.mead.ProprietaryId proprietary_id = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proprietary_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_proprietary_id(i), target, stream);
  }

  // optional string s_i_c_i = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_s_i_c_i().data(), static_cast<int>(this->_internal_s_i_c_i().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ResourceId.s_i_c_i");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_s_i_c_i(), target);
  }

  // optional string v_i_s_a_n = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_v_i_s_a_n().data(), static_cast<int>(this->_internal_v_i_s_a_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ResourceId.v_i_s_a_n");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_v_i_s_a_n(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ResourceId)
  return target;
}

size_t ResourceId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ResourceId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.ProprietaryId proprietary_id = 7;
  total_size += 1UL * this->_internal_proprietary_id_size();
  for (const auto& msg : this->proprietary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string i_s_a_n = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_a_n());
    }

    // optional string i_s_b_n = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_b_n());
    }

    // optional string i_s_m_n = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_m_n());
    }

    // optional string i_s_r_c = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_r_c());
    }

    // optional string i_s_s_n = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_s_n());
    }

    // optional string s_i_c_i = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_s_i_c_i());
    }

    // optional string v_i_s_a_n = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_v_i_s_a_n());
    }

    // optional .mead101.mead.CatalogNumber catalog_number = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *catalog_number_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ResourceId)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ResourceId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ResourceId)
    MergeFrom(*source);
  }
}

void ResourceId::MergeFrom(const ResourceId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ResourceId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proprietary_id_.MergeFrom(from.proprietary_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_i_s_a_n(from._internal_i_s_a_n());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_i_s_b_n(from._internal_i_s_b_n());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_i_s_m_n(from._internal_i_s_m_n());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_i_s_r_c(from._internal_i_s_r_c());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_i_s_s_n(from._internal_i_s_s_n());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_s_i_c_i(from._internal_s_i_c_i());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_v_i_s_a_n(from._internal_v_i_s_a_n());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_catalog_number()->::mead101::mead::CatalogNumber::MergeFrom(from._internal_catalog_number());
    }
  }
}

void ResourceId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ResourceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceId::CopyFrom(const ResourceId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ResourceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceId::IsInitialized() const {
  return true;
}

void ResourceId::InternalSwap(ResourceId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  proprietary_id_.InternalSwap(&other->proprietary_id_);
  i_s_a_n_.Swap(&other->i_s_a_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_s_b_n_.Swap(&other->i_s_b_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_s_m_n_.Swap(&other->i_s_m_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_s_r_c_.Swap(&other->i_s_r_c_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_s_s_n_.Swap(&other->i_s_s_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  s_i_c_i_.Swap(&other->s_i_c_i_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  v_i_s_a_n_.Swap(&other->v_i_s_a_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(catalog_number_, other->catalog_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceInformation::InitAsDefaultInstance() {
  ::mead101::mead::_ResourceInformation_default_instance_._instance.get_mutable()->absolute_pitch_ = const_cast< ::mead101::mead::AbsolutePitch*>(
      ::mead101::mead::AbsolutePitch::internal_default_instance());
  ::mead101::mead::_ResourceInformation_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::mead101::avs::CurrentTerritoryCode*>(
      ::mead101::avs::CurrentTerritoryCode::internal_default_instance());
  ::mead101::mead::_ResourceInformation_default_instance_._instance.get_mutable()->beats_per_minute_ = const_cast< ::mead101::mead::BeatsPerMinute*>(
      ::mead101::mead::BeatsPerMinute::internal_default_instance());
  ::mead101::mead::_ResourceInformation_default_instance_._instance.get_mutable()->harmony_ = const_cast< ::mead101::mead::Harmony*>(
      ::mead101::mead::Harmony::internal_default_instance());
  ::mead101::mead::_ResourceInformation_default_instance_._instance.get_mutable()->is_cover_ = const_cast< ::mead101::mead::Flag*>(
      ::mead101::mead::Flag::internal_default_instance());
  ::mead101::mead::_ResourceInformation_default_instance_._instance.get_mutable()->is_original_ = const_cast< ::mead101::mead::Flag*>(
      ::mead101::mead::Flag::internal_default_instance());
  ::mead101::mead::_ResourceInformation_default_instance_._instance.get_mutable()->priority_period_end_date_ = const_cast< ::mead101::mead::ddex_IsoDate*>(
      ::mead101::mead::ddex_IsoDate::internal_default_instance());
  ::mead101::mead::_ResourceInformation_default_instance_._instance.get_mutable()->priority_period_start_date_ = const_cast< ::mead101::mead::ddex_IsoDate*>(
      ::mead101::mead::ddex_IsoDate::internal_default_instance());
  ::mead101::mead::_ResourceInformation_default_instance_._instance.get_mutable()->resource_summary_ = const_cast< ::mead101::mead::ResourceSummary*>(
      ::mead101::mead::ResourceSummary::internal_default_instance());
  ::mead101::mead::_ResourceInformation_default_instance_._instance.get_mutable()->sub_genre_category_ = const_cast< ::mead101::mead::SubGenreCategory*>(
      ::mead101::mead::SubGenreCategory::internal_default_instance());
  ::mead101::mead::_ResourceInformation_default_instance_._instance.get_mutable()->time_signature_ = const_cast< ::mead101::mead::TimeSignature*>(
      ::mead101::mead::TimeSignature::internal_default_instance());
  ::mead101::mead::_ResourceInformation_default_instance_._instance.get_mutable()->vocal_register_ = const_cast< ::mead101::mead::VocalRegister*>(
      ::mead101::mead::VocalRegister::internal_default_instance());
}
class ResourceInformation::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceInformation>()._has_bits_);
  static const ::mead101::mead::AbsolutePitch& absolute_pitch(const ResourceInformation* msg);
  static void set_has_absolute_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code(const ResourceInformation* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::BeatsPerMinute& beats_per_minute(const ResourceInformation* msg);
  static void set_has_beats_per_minute(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::Harmony& harmony(const ResourceInformation* msg);
  static void set_has_harmony(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mead101::mead::Flag& is_cover(const ResourceInformation* msg);
  static void set_has_is_cover(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mead101::mead::Flag& is_original(const ResourceInformation* msg);
  static void set_has_is_original(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::mead101::mead::ddex_IsoDate& priority_period_end_date(const ResourceInformation* msg);
  static void set_has_priority_period_end_date(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::mead101::mead::ddex_IsoDate& priority_period_start_date(const ResourceInformation* msg);
  static void set_has_priority_period_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::mead101::mead::ResourceSummary& resource_summary(const ResourceInformation* msg);
  static void set_has_resource_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::mead101::mead::SubGenreCategory& sub_genre_category(const ResourceInformation* msg);
  static void set_has_sub_genre_category(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::mead101::mead::TimeSignature& time_signature(const ResourceInformation* msg);
  static void set_has_time_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::mead101::mead::VocalRegister& vocal_register(const ResourceInformation* msg);
  static void set_has_vocal_register(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::mead101::mead::AbsolutePitch&
ResourceInformation::_Internal::absolute_pitch(const ResourceInformation* msg) {
  return *msg->absolute_pitch_;
}
const ::mead101::avs::CurrentTerritoryCode&
ResourceInformation::_Internal::applicable_territory_code(const ResourceInformation* msg) {
  return *msg->applicable_territory_code_;
}
const ::mead101::mead::BeatsPerMinute&
ResourceInformation::_Internal::beats_per_minute(const ResourceInformation* msg) {
  return *msg->beats_per_minute_;
}
const ::mead101::mead::Harmony&
ResourceInformation::_Internal::harmony(const ResourceInformation* msg) {
  return *msg->harmony_;
}
const ::mead101::mead::Flag&
ResourceInformation::_Internal::is_cover(const ResourceInformation* msg) {
  return *msg->is_cover_;
}
const ::mead101::mead::Flag&
ResourceInformation::_Internal::is_original(const ResourceInformation* msg) {
  return *msg->is_original_;
}
const ::mead101::mead::ddex_IsoDate&
ResourceInformation::_Internal::priority_period_end_date(const ResourceInformation* msg) {
  return *msg->priority_period_end_date_;
}
const ::mead101::mead::ddex_IsoDate&
ResourceInformation::_Internal::priority_period_start_date(const ResourceInformation* msg) {
  return *msg->priority_period_start_date_;
}
const ::mead101::mead::ResourceSummary&
ResourceInformation::_Internal::resource_summary(const ResourceInformation* msg) {
  return *msg->resource_summary_;
}
const ::mead101::mead::SubGenreCategory&
ResourceInformation::_Internal::sub_genre_category(const ResourceInformation* msg) {
  return *msg->sub_genre_category_;
}
const ::mead101::mead::TimeSignature&
ResourceInformation::_Internal::time_signature(const ResourceInformation* msg) {
  return *msg->time_signature_;
}
const ::mead101::mead::VocalRegister&
ResourceInformation::_Internal::vocal_register(const ResourceInformation* msg) {
  return *msg->vocal_register_;
}
void ResourceInformation::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ResourceInformation::ResourceInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  alternative_title_(arena),
  artistic_influence_(arena),
  award_(arena),
  commentary_note_(arena),
  dance_and_rhythm_style_(arena),
  epoch_(arena),
  genre_category_(arena),
  historic_charting_information_(arena),
  image_(arena),
  instrument_used_(arena),
  is_similar_(arena),
  location_and_date_of_session_(arena),
  lyric_theme_(arena),
  lyrics_(arena),
  mood_(arena),
  programmatic_theme_(arena),
  recording_part_(arena),
  related_resource_(arena),
  sample_(arena),
  usage_(arena),
  used_musical_work_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ResourceInformation)
}
ResourceInformation::ResourceInformation(const ResourceInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      alternative_title_(from.alternative_title_),
      artistic_influence_(from.artistic_influence_),
      award_(from.award_),
      commentary_note_(from.commentary_note_),
      dance_and_rhythm_style_(from.dance_and_rhythm_style_),
      epoch_(from.epoch_),
      genre_category_(from.genre_category_),
      historic_charting_information_(from.historic_charting_information_),
      image_(from.image_),
      instrument_used_(from.instrument_used_),
      is_similar_(from.is_similar_),
      location_and_date_of_session_(from.location_and_date_of_session_),
      lyric_theme_(from.lyric_theme_),
      lyrics_(from.lyrics_),
      mood_(from.mood_),
      programmatic_theme_(from.programmatic_theme_),
      recording_part_(from.recording_part_),
      related_resource_(from.related_resource_),
      sample_(from.sample_),
      usage_(from.usage_),
      used_musical_work_(from.used_musical_work_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_absolute_pitch()) {
    absolute_pitch_ = new ::mead101::mead::AbsolutePitch(*from.absolute_pitch_);
  } else {
    absolute_pitch_ = nullptr;
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::mead101::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_beats_per_minute()) {
    beats_per_minute_ = new ::mead101::mead::BeatsPerMinute(*from.beats_per_minute_);
  } else {
    beats_per_minute_ = nullptr;
  }
  if (from._internal_has_harmony()) {
    harmony_ = new ::mead101::mead::Harmony(*from.harmony_);
  } else {
    harmony_ = nullptr;
  }
  if (from._internal_has_is_cover()) {
    is_cover_ = new ::mead101::mead::Flag(*from.is_cover_);
  } else {
    is_cover_ = nullptr;
  }
  if (from._internal_has_is_original()) {
    is_original_ = new ::mead101::mead::Flag(*from.is_original_);
  } else {
    is_original_ = nullptr;
  }
  if (from._internal_has_priority_period_end_date()) {
    priority_period_end_date_ = new ::mead101::mead::ddex_IsoDate(*from.priority_period_end_date_);
  } else {
    priority_period_end_date_ = nullptr;
  }
  if (from._internal_has_priority_period_start_date()) {
    priority_period_start_date_ = new ::mead101::mead::ddex_IsoDate(*from.priority_period_start_date_);
  } else {
    priority_period_start_date_ = nullptr;
  }
  if (from._internal_has_resource_summary()) {
    resource_summary_ = new ::mead101::mead::ResourceSummary(*from.resource_summary_);
  } else {
    resource_summary_ = nullptr;
  }
  if (from._internal_has_sub_genre_category()) {
    sub_genre_category_ = new ::mead101::mead::SubGenreCategory(*from.sub_genre_category_);
  } else {
    sub_genre_category_ = nullptr;
  }
  if (from._internal_has_time_signature()) {
    time_signature_ = new ::mead101::mead::TimeSignature(*from.time_signature_);
  } else {
    time_signature_ = nullptr;
  }
  if (from._internal_has_vocal_register()) {
    vocal_register_ = new ::mead101::mead::VocalRegister(*from.vocal_register_);
  } else {
    vocal_register_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ResourceInformation)
}

void ResourceInformation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&absolute_pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vocal_register_) -
      reinterpret_cast<char*>(&absolute_pitch_)) + sizeof(vocal_register_));
}

ResourceInformation::~ResourceInformation() {
  // @@protoc_insertion_point(destructor:mead101.mead.ResourceInformation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete absolute_pitch_;
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete beats_per_minute_;
  if (this != internal_default_instance()) delete harmony_;
  if (this != internal_default_instance()) delete is_cover_;
  if (this != internal_default_instance()) delete is_original_;
  if (this != internal_default_instance()) delete priority_period_end_date_;
  if (this != internal_default_instance()) delete priority_period_start_date_;
  if (this != internal_default_instance()) delete resource_summary_;
  if (this != internal_default_instance()) delete sub_genre_category_;
  if (this != internal_default_instance()) delete time_signature_;
  if (this != internal_default_instance()) delete vocal_register_;
}

void ResourceInformation::ArenaDtor(void* object) {
  ResourceInformation* _this = reinterpret_cast< ResourceInformation* >(object);
  (void)_this;
}
void ResourceInformation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceInformation& ResourceInformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ResourceInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ResourceInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alternative_title_.Clear();
  artistic_influence_.Clear();
  award_.Clear();
  commentary_note_.Clear();
  dance_and_rhythm_style_.Clear();
  epoch_.Clear();
  genre_category_.Clear();
  historic_charting_information_.Clear();
  image_.Clear();
  instrument_used_.Clear();
  is_similar_.Clear();
  location_and_date_of_session_.Clear();
  lyric_theme_.Clear();
  lyrics_.Clear();
  mood_.Clear();
  programmatic_theme_.Clear();
  recording_part_.Clear();
  related_resource_.Clear();
  sample_.Clear();
  usage_.Clear();
  used_musical_work_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(absolute_pitch_ != nullptr);
      absolute_pitch_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(beats_per_minute_ != nullptr);
      beats_per_minute_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(harmony_ != nullptr);
      harmony_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(is_cover_ != nullptr);
      is_cover_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(is_original_ != nullptr);
      is_original_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(priority_period_end_date_ != nullptr);
      priority_period_end_date_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(priority_period_start_date_ != nullptr);
      priority_period_start_date_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(resource_summary_ != nullptr);
      resource_summary_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(sub_genre_category_ != nullptr);
      sub_genre_category_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(time_signature_ != nullptr);
      time_signature_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(vocal_register_ != nullptr);
      vocal_register_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.AbsolutePitch absolute_pitch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_absolute_pitch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.AlternativeTitle alternative_title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alternative_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.ArtisticInfluence artistic_influence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_artistic_influence(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Award award = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_award(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.BeatsPerMinute beats_per_minute = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_beats_per_minute(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.CommentaryNote commentary_note = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commentary_note(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.DanceAndRhythmStyle dance_and_rhythm_style = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dance_and_rhythm_style(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Epoch epoch = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_epoch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.GenreCategory genre_category = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_genre_category(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Harmony harmony = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_harmony(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.HistoricChartingInformation historic_charting_information = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_historic_charting_information(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Image image = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.InstrumentUsed instrument_used = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instrument_used(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Flag is_cover = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_is_cover(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Flag is_original = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_is_original(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.SimilarResource is_similar = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_is_similar(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.LocationAndDateOfSession location_and_date_of_session = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_location_and_date_of_session(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Theme lyric_theme = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lyric_theme(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Lyrics lyrics = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lyrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Mood mood = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_mood(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ddex_IsoDate priority_period_end_date = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_priority_period_end_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ddex_IsoDate priority_period_start_date = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_priority_period_start_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Theme programmatic_theme = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_programmatic_theme(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.RecordingPart recording_part = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_recording_part(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.ResourceRelationship related_resource = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_related_resource(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ResourceSummary resource_summary = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Sample sample = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sample(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.SubGenreCategory sub_genre_category = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_genre_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.TimeSignature time_signature = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Usage usage = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_usage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.UsedMusicalWork used_musical_work = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_used_musical_work(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.VocalRegister vocal_register = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vocal_register(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceInformation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ResourceInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.AbsolutePitch absolute_pitch = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::absolute_pitch(this), target, stream);
  }

  // repeated .mead101.mead.AlternativeTitle alternative_title = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_alternative_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_alternative_title(i), target, stream);
  }

  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::applicable_territory_code(this), target, stream);
  }

  // repeated .mead101.mead.ArtisticInfluence artistic_influence = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_artistic_influence_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_artistic_influence(i), target, stream);
  }

  // repeated .mead101.mead.Award award = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_award_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_award(i), target, stream);
  }

  // optional .mead101.mead.BeatsPerMinute beats_per_minute = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::beats_per_minute(this), target, stream);
  }

  // repeated .mead101.mead.CommentaryNote commentary_note = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_commentary_note_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_commentary_note(i), target, stream);
  }

  // repeated .mead101.mead.DanceAndRhythmStyle dance_and_rhythm_style = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dance_and_rhythm_style_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_dance_and_rhythm_style(i), target, stream);
  }

  // repeated .mead101.mead.Epoch epoch = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_epoch_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_epoch(i), target, stream);
  }

  // repeated .mead101.mead.GenreCategory genre_category = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_genre_category_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_genre_category(i), target, stream);
  }

  // optional .mead101.mead.Harmony harmony = 11;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::harmony(this), target, stream);
  }

  // repeated .mead101.mead.HistoricChartingInformation historic_charting_information = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_historic_charting_information_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_historic_charting_information(i), target, stream);
  }

  // repeated .mead101.mead.Image image = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_image_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_image(i), target, stream);
  }

  // repeated .mead101.mead.InstrumentUsed instrument_used = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instrument_used_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_instrument_used(i), target, stream);
  }

  // optional .mead101.mead.Flag is_cover = 15;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::is_cover(this), target, stream);
  }

  // optional .mead101.mead.Flag is_original = 16;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::is_original(this), target, stream);
  }

  // repeated .mead101.mead.SimilarResource is_similar = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_is_similar_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_is_similar(i), target, stream);
  }

  // repeated .mead101.mead.LocationAndDateOfSession location_and_date_of_session = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_location_and_date_of_session_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_location_and_date_of_session(i), target, stream);
  }

  // repeated .mead101.mead.Theme lyric_theme = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lyric_theme_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_lyric_theme(i), target, stream);
  }

  // repeated .mead101.mead.Lyrics lyrics = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lyrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_lyrics(i), target, stream);
  }

  // repeated .mead101.mead.Mood mood = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mood_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_mood(i), target, stream);
  }

  // optional .mead101.mead.ddex_IsoDate priority_period_end_date = 22;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::priority_period_end_date(this), target, stream);
  }

  // optional .mead101.mead.ddex_IsoDate priority_period_start_date = 23;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::priority_period_start_date(this), target, stream);
  }

  // repeated .mead101.mead.Theme programmatic_theme = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_programmatic_theme_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_programmatic_theme(i), target, stream);
  }

  // repeated .mead101.mead.RecordingPart recording_part = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_recording_part_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_recording_part(i), target, stream);
  }

  // repeated .mead101.mead.ResourceRelationship related_resource = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_related_resource_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_related_resource(i), target, stream);
  }

  // optional .mead101.mead.ResourceSummary resource_summary = 27;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::resource_summary(this), target, stream);
  }

  // repeated .mead101.mead.Sample sample = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sample_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, this->_internal_sample(i), target, stream);
  }

  // optional .mead101.mead.SubGenreCategory sub_genre_category = 29;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::sub_genre_category(this), target, stream);
  }

  // optional .mead101.mead.TimeSignature time_signature = 30;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::time_signature(this), target, stream);
  }

  // repeated .mead101.mead.Usage usage = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_usage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, this->_internal_usage(i), target, stream);
  }

  // repeated .mead101.mead.UsedMusicalWork used_musical_work = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_used_musical_work_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, this->_internal_used_musical_work(i), target, stream);
  }

  // optional .mead101.mead.VocalRegister vocal_register = 33;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::vocal_register(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ResourceInformation)
  return target;
}

size_t ResourceInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ResourceInformation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.AlternativeTitle alternative_title = 2;
  total_size += 1UL * this->_internal_alternative_title_size();
  for (const auto& msg : this->alternative_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.ArtisticInfluence artistic_influence = 4;
  total_size += 1UL * this->_internal_artistic_influence_size();
  for (const auto& msg : this->artistic_influence_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Award award = 5;
  total_size += 1UL * this->_internal_award_size();
  for (const auto& msg : this->award_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.CommentaryNote commentary_note = 7;
  total_size += 1UL * this->_internal_commentary_note_size();
  for (const auto& msg : this->commentary_note_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.DanceAndRhythmStyle dance_and_rhythm_style = 8;
  total_size += 1UL * this->_internal_dance_and_rhythm_style_size();
  for (const auto& msg : this->dance_and_rhythm_style_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Epoch epoch = 9;
  total_size += 1UL * this->_internal_epoch_size();
  for (const auto& msg : this->epoch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.GenreCategory genre_category = 10;
  total_size += 1UL * this->_internal_genre_category_size();
  for (const auto& msg : this->genre_category_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.HistoricChartingInformation historic_charting_information = 12;
  total_size += 1UL * this->_internal_historic_charting_information_size();
  for (const auto& msg : this->historic_charting_information_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Image image = 13;
  total_size += 1UL * this->_internal_image_size();
  for (const auto& msg : this->image_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.InstrumentUsed instrument_used = 14;
  total_size += 1UL * this->_internal_instrument_used_size();
  for (const auto& msg : this->instrument_used_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.SimilarResource is_similar = 17;
  total_size += 2UL * this->_internal_is_similar_size();
  for (const auto& msg : this->is_similar_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.LocationAndDateOfSession location_and_date_of_session = 18;
  total_size += 2UL * this->_internal_location_and_date_of_session_size();
  for (const auto& msg : this->location_and_date_of_session_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Theme lyric_theme = 19;
  total_size += 2UL * this->_internal_lyric_theme_size();
  for (const auto& msg : this->lyric_theme_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Lyrics lyrics = 20;
  total_size += 2UL * this->_internal_lyrics_size();
  for (const auto& msg : this->lyrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Mood mood = 21;
  total_size += 2UL * this->_internal_mood_size();
  for (const auto& msg : this->mood_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Theme programmatic_theme = 24;
  total_size += 2UL * this->_internal_programmatic_theme_size();
  for (const auto& msg : this->programmatic_theme_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.RecordingPart recording_part = 25;
  total_size += 2UL * this->_internal_recording_part_size();
  for (const auto& msg : this->recording_part_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.ResourceRelationship related_resource = 26;
  total_size += 2UL * this->_internal_related_resource_size();
  for (const auto& msg : this->related_resource_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Sample sample = 28;
  total_size += 2UL * this->_internal_sample_size();
  for (const auto& msg : this->sample_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Usage usage = 31;
  total_size += 2UL * this->_internal_usage_size();
  for (const auto& msg : this->usage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.UsedMusicalWork used_musical_work = 32;
  total_size += 2UL * this->_internal_used_musical_work_size();
  for (const auto& msg : this->used_musical_work_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .mead101.mead.AbsolutePitch absolute_pitch = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *absolute_pitch_);
    }

    // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .mead101.mead.BeatsPerMinute beats_per_minute = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *beats_per_minute_);
    }

    // optional .mead101.mead.Harmony harmony = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *harmony_);
    }

    // optional .mead101.mead.Flag is_cover = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *is_cover_);
    }

    // optional .mead101.mead.Flag is_original = 16;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *is_original_);
    }

    // optional .mead101.mead.ddex_IsoDate priority_period_end_date = 22;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *priority_period_end_date_);
    }

    // optional .mead101.mead.ddex_IsoDate priority_period_start_date = 23;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *priority_period_start_date_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .mead101.mead.ResourceSummary resource_summary = 27;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_summary_);
    }

    // optional .mead101.mead.SubGenreCategory sub_genre_category = 29;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sub_genre_category_);
    }

    // optional .mead101.mead.TimeSignature time_signature = 30;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_signature_);
    }

    // optional .mead101.mead.VocalRegister vocal_register = 33;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vocal_register_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceInformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ResourceInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceInformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceInformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ResourceInformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ResourceInformation)
    MergeFrom(*source);
  }
}

void ResourceInformation::MergeFrom(const ResourceInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ResourceInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alternative_title_.MergeFrom(from.alternative_title_);
  artistic_influence_.MergeFrom(from.artistic_influence_);
  award_.MergeFrom(from.award_);
  commentary_note_.MergeFrom(from.commentary_note_);
  dance_and_rhythm_style_.MergeFrom(from.dance_and_rhythm_style_);
  epoch_.MergeFrom(from.epoch_);
  genre_category_.MergeFrom(from.genre_category_);
  historic_charting_information_.MergeFrom(from.historic_charting_information_);
  image_.MergeFrom(from.image_);
  instrument_used_.MergeFrom(from.instrument_used_);
  is_similar_.MergeFrom(from.is_similar_);
  location_and_date_of_session_.MergeFrom(from.location_and_date_of_session_);
  lyric_theme_.MergeFrom(from.lyric_theme_);
  lyrics_.MergeFrom(from.lyrics_);
  mood_.MergeFrom(from.mood_);
  programmatic_theme_.MergeFrom(from.programmatic_theme_);
  recording_part_.MergeFrom(from.recording_part_);
  related_resource_.MergeFrom(from.related_resource_);
  sample_.MergeFrom(from.sample_);
  usage_.MergeFrom(from.usage_);
  used_musical_work_.MergeFrom(from.used_musical_work_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_absolute_pitch()->::mead101::mead::AbsolutePitch::MergeFrom(from._internal_absolute_pitch());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_applicable_territory_code()->::mead101::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_beats_per_minute()->::mead101::mead::BeatsPerMinute::MergeFrom(from._internal_beats_per_minute());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_harmony()->::mead101::mead::Harmony::MergeFrom(from._internal_harmony());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_is_cover()->::mead101::mead::Flag::MergeFrom(from._internal_is_cover());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_is_original()->::mead101::mead::Flag::MergeFrom(from._internal_is_original());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_priority_period_end_date()->::mead101::mead::ddex_IsoDate::MergeFrom(from._internal_priority_period_end_date());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_priority_period_start_date()->::mead101::mead::ddex_IsoDate::MergeFrom(from._internal_priority_period_start_date());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_resource_summary()->::mead101::mead::ResourceSummary::MergeFrom(from._internal_resource_summary());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_sub_genre_category()->::mead101::mead::SubGenreCategory::MergeFrom(from._internal_sub_genre_category());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_time_signature()->::mead101::mead::TimeSignature::MergeFrom(from._internal_time_signature());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_vocal_register()->::mead101::mead::VocalRegister::MergeFrom(from._internal_vocal_register());
    }
  }
}

void ResourceInformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ResourceInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceInformation::CopyFrom(const ResourceInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ResourceInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceInformation::IsInitialized() const {
  return true;
}

void ResourceInformation::InternalSwap(ResourceInformation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  alternative_title_.InternalSwap(&other->alternative_title_);
  artistic_influence_.InternalSwap(&other->artistic_influence_);
  award_.InternalSwap(&other->award_);
  commentary_note_.InternalSwap(&other->commentary_note_);
  dance_and_rhythm_style_.InternalSwap(&other->dance_and_rhythm_style_);
  epoch_.InternalSwap(&other->epoch_);
  genre_category_.InternalSwap(&other->genre_category_);
  historic_charting_information_.InternalSwap(&other->historic_charting_information_);
  image_.InternalSwap(&other->image_);
  instrument_used_.InternalSwap(&other->instrument_used_);
  is_similar_.InternalSwap(&other->is_similar_);
  location_and_date_of_session_.InternalSwap(&other->location_and_date_of_session_);
  lyric_theme_.InternalSwap(&other->lyric_theme_);
  lyrics_.InternalSwap(&other->lyrics_);
  mood_.InternalSwap(&other->mood_);
  programmatic_theme_.InternalSwap(&other->programmatic_theme_);
  recording_part_.InternalSwap(&other->recording_part_);
  related_resource_.InternalSwap(&other->related_resource_);
  sample_.InternalSwap(&other->sample_);
  usage_.InternalSwap(&other->usage_);
  used_musical_work_.InternalSwap(&other->used_musical_work_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceInformation, vocal_register_)
      + sizeof(ResourceInformation::vocal_register_)
      - PROTOBUF_FIELD_OFFSET(ResourceInformation, absolute_pitch_)>(
          reinterpret_cast<char*>(&absolute_pitch_),
          reinterpret_cast<char*>(&other->absolute_pitch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceInformation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceInformationList::InitAsDefaultInstance() {
}
class ResourceInformationList::_Internal {
 public:
};

ResourceInformationList::ResourceInformationList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  resource_information_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ResourceInformationList)
}
ResourceInformationList::ResourceInformationList(const ResourceInformationList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      resource_information_(from.resource_information_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ResourceInformationList)
}

void ResourceInformationList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
}

ResourceInformationList::~ResourceInformationList() {
  // @@protoc_insertion_point(destructor:mead101.mead.ResourceInformationList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceInformationList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResourceInformationList::ArenaDtor(void* object) {
  ResourceInformationList* _this = reinterpret_cast< ResourceInformationList* >(object);
  (void)_this;
}
void ResourceInformationList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceInformationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceInformationList& ResourceInformationList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ResourceInformationList::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ResourceInformationList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_information_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceInformationList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.ResourceInformation resource_information = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource_information(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceInformationList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ResourceInformationList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.ResourceInformation resource_information = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_information_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_resource_information(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ResourceInformationList)
  return target;
}

size_t ResourceInformationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ResourceInformationList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.ResourceInformation resource_information = 1;
  total_size += 1UL * this->_internal_resource_information_size();
  for (const auto& msg : this->resource_information_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceInformationList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ResourceInformationList)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceInformationList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceInformationList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ResourceInformationList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ResourceInformationList)
    MergeFrom(*source);
  }
}

void ResourceInformationList::MergeFrom(const ResourceInformationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ResourceInformationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resource_information_.MergeFrom(from.resource_information_);
}

void ResourceInformationList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ResourceInformationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceInformationList::CopyFrom(const ResourceInformationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ResourceInformationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceInformationList::IsInitialized() const {
  return true;
}

void ResourceInformationList::InternalSwap(ResourceInformationList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  resource_information_.InternalSwap(&other->resource_information_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceInformationList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceRelationship::InitAsDefaultInstance() {
  ::mead101::mead::_ResourceRelationship_default_instance_._instance.get_mutable()->display_artist_name_ = const_cast< ::mead101::mead::DisplayArtistNameWithDefault*>(
      ::mead101::mead::DisplayArtistNameWithDefault::internal_default_instance());
  ::mead101::mead::_ResourceRelationship_default_instance_._instance.get_mutable()->related_resource_type_ = const_cast< ::mead101::mead::RelatedResourceType*>(
      ::mead101::mead::RelatedResourceType::internal_default_instance());
  ::mead101::mead::_ResourceRelationship_default_instance_._instance.get_mutable()->resource_id_ = const_cast< ::mead101::mead::ResourceId*>(
      ::mead101::mead::ResourceId::internal_default_instance());
}
class ResourceRelationship::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceRelationship>()._has_bits_);
  static const ::mead101::mead::DisplayArtistNameWithDefault& display_artist_name(const ResourceRelationship* msg);
  static void set_has_display_artist_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::RelatedResourceType& related_resource_type(const ResourceRelationship* msg);
  static void set_has_related_resource_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::ResourceId& resource_id(const ResourceRelationship* msg);
  static void set_has_resource_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::mead::DisplayArtistNameWithDefault&
ResourceRelationship::_Internal::display_artist_name(const ResourceRelationship* msg) {
  return *msg->display_artist_name_;
}
const ::mead101::mead::RelatedResourceType&
ResourceRelationship::_Internal::related_resource_type(const ResourceRelationship* msg) {
  return *msg->related_resource_type_;
}
const ::mead101::mead::ResourceId&
ResourceRelationship::_Internal::resource_id(const ResourceRelationship* msg) {
  return *msg->resource_id_;
}
ResourceRelationship::ResourceRelationship(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_reference_(arena),
  title_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ResourceRelationship)
}
ResourceRelationship::ResourceRelationship(const ResourceRelationship& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metadata_source_reference_(from.metadata_source_reference_),
      title_(from.title_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_display_artist_name()) {
    display_artist_name_ = new ::mead101::mead::DisplayArtistNameWithDefault(*from.display_artist_name_);
  } else {
    display_artist_name_ = nullptr;
  }
  if (from._internal_has_related_resource_type()) {
    related_resource_type_ = new ::mead101::mead::RelatedResourceType(*from.related_resource_type_);
  } else {
    related_resource_type_ = nullptr;
  }
  if (from._internal_has_resource_id()) {
    resource_id_ = new ::mead101::mead::ResourceId(*from.resource_id_);
  } else {
    resource_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ResourceRelationship)
}

void ResourceRelationship::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceRelationship_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&display_artist_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_id_) -
      reinterpret_cast<char*>(&display_artist_name_)) + sizeof(resource_id_));
}

ResourceRelationship::~ResourceRelationship() {
  // @@protoc_insertion_point(destructor:mead101.mead.ResourceRelationship)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceRelationship::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete display_artist_name_;
  if (this != internal_default_instance()) delete related_resource_type_;
  if (this != internal_default_instance()) delete resource_id_;
}

void ResourceRelationship::ArenaDtor(void* object) {
  ResourceRelationship* _this = reinterpret_cast< ResourceRelationship* >(object);
  (void)_this;
}
void ResourceRelationship::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceRelationship::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceRelationship& ResourceRelationship::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceRelationship_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ResourceRelationship::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ResourceRelationship)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_reference_.Clear();
  title_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(display_artist_name_ != nullptr);
      display_artist_name_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(related_resource_type_ != nullptr);
      related_resource_type_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(resource_id_ != nullptr);
      resource_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceRelationship::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.DisplayArtistNameWithDefault display_artist_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_display_artist_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ResourceRelationship.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.RelatedResourceType related_resource_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_related_resource_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ResourceId resource_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.TitleWithPronunciation title = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceRelationship::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ResourceRelationship)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.DisplayArtistNameWithDefault display_artist_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::display_artist_name(this), target, stream);
  }

  // repeated string metadata_source_reference = 2;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ResourceRelationship.metadata_source_reference");
    target = stream->WriteString(2, s, target);
  }

  // optional .mead101.mead.RelatedResourceType related_resource_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::related_resource_type(this), target, stream);
  }

  // optional .mead101.mead.ResourceId resource_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::resource_id(this), target, stream);
  }

  // repeated .mead101.mead.TitleWithPronunciation title = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_title(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ResourceRelationship)
  return target;
}

size_t ResourceRelationship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ResourceRelationship)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // repeated .mead101.mead.TitleWithPronunciation title = 5;
  total_size += 1UL * this->_internal_title_size();
  for (const auto& msg : this->title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .mead101.mead.DisplayArtistNameWithDefault display_artist_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *display_artist_name_);
    }

    // optional .mead101.mead.RelatedResourceType related_resource_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *related_resource_type_);
    }

    // optional .mead101.mead.ResourceId resource_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_id_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceRelationship::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ResourceRelationship)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceRelationship* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceRelationship>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ResourceRelationship)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ResourceRelationship)
    MergeFrom(*source);
  }
}

void ResourceRelationship::MergeFrom(const ResourceRelationship& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ResourceRelationship)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  title_.MergeFrom(from.title_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_display_artist_name()->::mead101::mead::DisplayArtistNameWithDefault::MergeFrom(from._internal_display_artist_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_related_resource_type()->::mead101::mead::RelatedResourceType::MergeFrom(from._internal_related_resource_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_resource_id()->::mead101::mead::ResourceId::MergeFrom(from._internal_resource_id());
    }
  }
}

void ResourceRelationship::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ResourceRelationship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceRelationship::CopyFrom(const ResourceRelationship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ResourceRelationship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceRelationship::IsInitialized() const {
  return true;
}

void ResourceRelationship::InternalSwap(ResourceRelationship* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  title_.InternalSwap(&other->title_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceRelationship, resource_id_)
      + sizeof(ResourceRelationship::resource_id_)
      - PROTOBUF_FIELD_OFFSET(ResourceRelationship, display_artist_name_)>(
          reinterpret_cast<char*>(&display_artist_name_),
          reinterpret_cast<char*>(&other->display_artist_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceRelationship::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceRelationshipType::InitAsDefaultInstance() {
  ::mead101::mead::_ResourceRelationshipType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::ResourceRelationshipType*>(
      ::mead101::avs::ResourceRelationshipType::internal_default_instance());
}
class ResourceRelationshipType::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceRelationshipType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::ResourceRelationshipType& ext_value(const ResourceRelationshipType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::ResourceRelationshipType&
ResourceRelationshipType::_Internal::ext_value(const ResourceRelationshipType* msg) {
  return *msg->ext_value_;
}
void ResourceRelationshipType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ResourceRelationshipType::ResourceRelationshipType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ResourceRelationshipType)
}
ResourceRelationshipType::ResourceRelationshipType(const ResourceRelationshipType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::ResourceRelationshipType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ResourceRelationshipType)
}

void ResourceRelationshipType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

ResourceRelationshipType::~ResourceRelationshipType() {
  // @@protoc_insertion_point(destructor:mead101.mead.ResourceRelationshipType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceRelationshipType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void ResourceRelationshipType::ArenaDtor(void* object) {
  ResourceRelationshipType* _this = reinterpret_cast< ResourceRelationshipType* >(object);
  (void)_this;
}
void ResourceRelationshipType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceRelationshipType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceRelationshipType& ResourceRelationshipType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ResourceRelationshipType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ResourceRelationshipType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceRelationshipType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ResourceRelationshipType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ResourceRelationshipType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.ResourceRelationshipType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceRelationshipType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ResourceRelationshipType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ResourceRelationshipType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ResourceRelationshipType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.ResourceRelationshipType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ResourceRelationshipType)
  return target;
}

size_t ResourceRelationshipType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ResourceRelationshipType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.ResourceRelationshipType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceRelationshipType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ResourceRelationshipType)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceRelationshipType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceRelationshipType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ResourceRelationshipType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ResourceRelationshipType)
    MergeFrom(*source);
  }
}

void ResourceRelationshipType::MergeFrom(const ResourceRelationshipType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ResourceRelationshipType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::ResourceRelationshipType::MergeFrom(from._internal_ext_value());
    }
  }
}

void ResourceRelationshipType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ResourceRelationshipType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceRelationshipType::CopyFrom(const ResourceRelationshipType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ResourceRelationshipType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceRelationshipType::IsInitialized() const {
  return true;
}

void ResourceRelationshipType::InternalSwap(ResourceRelationshipType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceRelationshipType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceSummary::InitAsDefaultInstance() {
  ::mead101::mead::_ResourceSummary_default_instance_._instance.get_mutable()->resource_id_ = const_cast< ::mead101::mead::ResourceId*>(
      ::mead101::mead::ResourceId::internal_default_instance());
}
class ResourceSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceSummary>()._has_bits_);
  static const ::mead101::mead::ResourceId& resource_id(const ResourceSummary* msg);
  static void set_has_resource_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mead101::mead::ResourceId&
ResourceSummary::_Internal::resource_id(const ResourceSummary* msg) {
  return *msg->resource_id_;
}
ResourceSummary::ResourceSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  display_artist_(arena),
  display_title_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ResourceSummary)
}
ResourceSummary::ResourceSummary(const ResourceSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      display_artist_(from.display_artist_),
      display_title_(from.display_title_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_resource_id()) {
    resource_id_ = new ::mead101::mead::ResourceId(*from.resource_id_);
  } else {
    resource_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ResourceSummary)
}

void ResourceSummary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  resource_id_ = nullptr;
}

ResourceSummary::~ResourceSummary() {
  // @@protoc_insertion_point(destructor:mead101.mead.ResourceSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete resource_id_;
}

void ResourceSummary::ArenaDtor(void* object) {
  ResourceSummary* _this = reinterpret_cast< ResourceSummary* >(object);
  (void)_this;
}
void ResourceSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceSummary& ResourceSummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ResourceSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ResourceSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  display_artist_.Clear();
  display_title_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(resource_id_ != nullptr);
    resource_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.PartyNameWithTerritory display_artist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_artist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.DisplayTitle display_title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ResourceId resource_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ResourceSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.PartyNameWithTerritory display_artist = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_artist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_display_artist(i), target, stream);
  }

  // repeated .mead101.mead.DisplayTitle display_title = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_display_title(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.ResourceId resource_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::resource_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ResourceSummary)
  return target;
}

size_t ResourceSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ResourceSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.PartyNameWithTerritory display_artist = 1;
  total_size += 1UL * this->_internal_display_artist_size();
  for (const auto& msg : this->display_artist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.DisplayTitle display_title = 2;
  total_size += 1UL * this->_internal_display_title_size();
  for (const auto& msg : this->display_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .mead101.mead.ResourceId resource_id = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resource_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ResourceSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ResourceSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ResourceSummary)
    MergeFrom(*source);
  }
}

void ResourceSummary::MergeFrom(const ResourceSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ResourceSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  display_artist_.MergeFrom(from.display_artist_);
  display_title_.MergeFrom(from.display_title_);
  if (from._internal_has_resource_id()) {
    _internal_mutable_resource_id()->::mead101::mead::ResourceId::MergeFrom(from._internal_resource_id());
  }
}

void ResourceSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ResourceSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceSummary::CopyFrom(const ResourceSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ResourceSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceSummary::IsInitialized() const {
  return true;
}

void ResourceSummary::InternalSwap(ResourceSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  display_artist_.InternalSwap(&other->display_artist_);
  display_title_.InternalSwap(&other->display_title_);
  swap(resource_id_, other->resource_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceTitle::InitAsDefaultInstance() {
}
class ResourceTitle::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceTitle>()._has_bits_);
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ResourceTitle::ResourceTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ResourceTitle)
}
ResourceTitle::ResourceTitle(const ResourceTitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ResourceTitle)
}

void ResourceTitle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ResourceTitle::~ResourceTitle() {
  // @@protoc_insertion_point(destructor:mead101.mead.ResourceTitle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceTitle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResourceTitle::ArenaDtor(void* object) {
  ResourceTitle* _this = reinterpret_cast< ResourceTitle* >(object);
  (void)_this;
}
void ResourceTitle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceTitle& ResourceTitle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ResourceTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ResourceTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceTitle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language_and_script_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ResourceTitle.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ResourceTitle.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceTitle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ResourceTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language_and_script_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ResourceTitle.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language_and_script_code(), target);
  }

  // optional string ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ResourceTitle.ext_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ResourceTitle)
  return target;
}

size_t ResourceTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ResourceTitle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string language_and_script_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceTitle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ResourceTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceTitle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceTitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ResourceTitle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ResourceTitle)
    MergeFrom(*source);
  }
}

void ResourceTitle::MergeFrom(const ResourceTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ResourceTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
  }
}

void ResourceTitle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ResourceTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceTitle::CopyFrom(const ResourceTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ResourceTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceTitle::IsInitialized() const {
  return true;
}

void ResourceTitle::InternalSwap(ResourceTitle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceTitle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RootChordNote::InitAsDefaultInstance() {
  ::mead101::mead::_RootChordNote_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::RootChordNote*>(
      ::mead101::avs::RootChordNote::internal_default_instance());
}
class RootChordNote::_Internal {
 public:
  using HasBits = decltype(std::declval<RootChordNote>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::RootChordNote& ext_value(const RootChordNote* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::RootChordNote&
RootChordNote::_Internal::ext_value(const RootChordNote* msg) {
  return *msg->ext_value_;
}
void RootChordNote::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
RootChordNote::RootChordNote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.RootChordNote)
}
RootChordNote::RootChordNote(const RootChordNote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::RootChordNote(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.RootChordNote)
}

void RootChordNote::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RootChordNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

RootChordNote::~RootChordNote() {
  // @@protoc_insertion_point(destructor:mead101.mead.RootChordNote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RootChordNote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void RootChordNote::ArenaDtor(void* object) {
  RootChordNote* _this = reinterpret_cast< RootChordNote* >(object);
  (void)_this;
}
void RootChordNote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RootChordNote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RootChordNote& RootChordNote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RootChordNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void RootChordNote::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.RootChordNote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RootChordNote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.RootChordNote.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.RootChordNote.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.RootChordNote ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RootChordNote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.RootChordNote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.RootChordNote.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.RootChordNote.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.RootChordNote ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.RootChordNote)
  return target;
}

size_t RootChordNote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.RootChordNote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.RootChordNote ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RootChordNote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.RootChordNote)
  GOOGLE_DCHECK_NE(&from, this);
  const RootChordNote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RootChordNote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.RootChordNote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.RootChordNote)
    MergeFrom(*source);
  }
}

void RootChordNote::MergeFrom(const RootChordNote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.RootChordNote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::RootChordNote::MergeFrom(from._internal_ext_value());
    }
  }
}

void RootChordNote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.RootChordNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RootChordNote::CopyFrom(const RootChordNote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.RootChordNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RootChordNote::IsInitialized() const {
  return true;
}

void RootChordNote::InternalSwap(RootChordNote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RootChordNote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RootChordQuality::InitAsDefaultInstance() {
  ::mead101::mead::_RootChordQuality_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::RootChordQuality*>(
      ::mead101::avs::RootChordQuality::internal_default_instance());
}
class RootChordQuality::_Internal {
 public:
  using HasBits = decltype(std::declval<RootChordQuality>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::RootChordQuality& ext_value(const RootChordQuality* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::RootChordQuality&
RootChordQuality::_Internal::ext_value(const RootChordQuality* msg) {
  return *msg->ext_value_;
}
void RootChordQuality::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
RootChordQuality::RootChordQuality(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.RootChordQuality)
}
RootChordQuality::RootChordQuality(const RootChordQuality& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::RootChordQuality(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.RootChordQuality)
}

void RootChordQuality::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RootChordQuality_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

RootChordQuality::~RootChordQuality() {
  // @@protoc_insertion_point(destructor:mead101.mead.RootChordQuality)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RootChordQuality::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void RootChordQuality::ArenaDtor(void* object) {
  RootChordQuality* _this = reinterpret_cast< RootChordQuality* >(object);
  (void)_this;
}
void RootChordQuality::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RootChordQuality::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RootChordQuality& RootChordQuality::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RootChordQuality_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void RootChordQuality::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.RootChordQuality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RootChordQuality::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.RootChordQuality.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.RootChordQuality.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.RootChordQuality ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RootChordQuality::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.RootChordQuality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.RootChordQuality.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.RootChordQuality.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.RootChordQuality ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.RootChordQuality)
  return target;
}

size_t RootChordQuality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.RootChordQuality)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.RootChordQuality ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RootChordQuality::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.RootChordQuality)
  GOOGLE_DCHECK_NE(&from, this);
  const RootChordQuality* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RootChordQuality>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.RootChordQuality)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.RootChordQuality)
    MergeFrom(*source);
  }
}

void RootChordQuality::MergeFrom(const RootChordQuality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.RootChordQuality)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::RootChordQuality::MergeFrom(from._internal_ext_value());
    }
  }
}

void RootChordQuality::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.RootChordQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RootChordQuality::CopyFrom(const RootChordQuality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.RootChordQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RootChordQuality::IsInitialized() const {
  return true;
}

void RootChordQuality::InternalSwap(RootChordQuality* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RootChordQuality::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Sample::InitAsDefaultInstance() {
  ::mead101::mead::_Sample_default_instance_._instance.get_mutable()->related_resource_ = const_cast< ::mead101::mead::ResourceSummary*>(
      ::mead101::mead::ResourceSummary::internal_default_instance());
}
class Sample::_Internal {
 public:
  using HasBits = decltype(std::declval<Sample>()._has_bits_);
  static void set_has_contains_samples(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_contained_in_sample(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::ResourceSummary& related_resource(const Sample* msg);
  static void set_has_related_resource(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mead101::mead::ResourceSummary&
Sample::_Internal::related_resource(const Sample* msg) {
  return *msg->related_resource_;
}
Sample::Sample(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  description_(arena),
  host_timing_(arena),
  metadata_source_reference_(arena),
  sample_feature_(arena),
  sample_timing_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Sample)
}
Sample::Sample(const Sample& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      description_(from.description_),
      host_timing_(from.host_timing_),
      metadata_source_reference_(from.metadata_source_reference_),
      sample_feature_(from.sample_feature_),
      sample_timing_(from.sample_timing_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_related_resource()) {
    related_resource_ = new ::mead101::mead::ResourceSummary(*from.related_resource_);
  } else {
    related_resource_ = nullptr;
  }
  ::memcpy(&contains_samples_, &from.contains_samples_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_contained_in_sample_) -
    reinterpret_cast<char*>(&contains_samples_)) + sizeof(is_contained_in_sample_));
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Sample)
}

void Sample::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Sample_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&related_resource_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_contained_in_sample_) -
      reinterpret_cast<char*>(&related_resource_)) + sizeof(is_contained_in_sample_));
}

Sample::~Sample() {
  // @@protoc_insertion_point(destructor:mead101.mead.Sample)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Sample::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete related_resource_;
}

void Sample::ArenaDtor(void* object) {
  Sample* _this = reinterpret_cast< Sample* >(object);
  (void)_this;
}
void Sample::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sample& Sample::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sample_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Sample::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Sample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.Clear();
  host_timing_.Clear();
  metadata_source_reference_.Clear();
  sample_feature_.Clear();
  sample_timing_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(related_resource_ != nullptr);
    related_resource_->Clear();
  }
  ::memset(&contains_samples_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_contained_in_sample_) -
      reinterpret_cast<char*>(&contains_samples_)) + sizeof(is_contained_in_sample_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sample::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool contains_samples = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_contains_samples(&has_bits);
          contains_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.TextWithFormat description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_description(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Timing host_timing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_host_timing(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_contained_in_sample = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_contained_in_sample(&has_bits);
          is_contained_in_sample_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Sample.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ResourceSummary related_resource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_related_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.SampleFeature sample_feature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sample_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Timing sample_timing = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sample_timing(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sample::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Sample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool contains_samples = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_contains_samples(), target);
  }

  // repeated .mead101.mead.TextWithFormat description = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_description_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_description(i), target, stream);
  }

  // repeated .mead101.mead.Timing host_timing = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_host_timing_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_host_timing(i), target, stream);
  }

  // optional bool is_contained_in_sample = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_contained_in_sample(), target);
  }

  // repeated string metadata_source_reference = 5;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Sample.metadata_source_reference");
    target = stream->WriteString(5, s, target);
  }

  // optional .mead101.mead.ResourceSummary related_resource = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::related_resource(this), target, stream);
  }

  // repeated .mead101.mead.SampleFeature sample_feature = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sample_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_sample_feature(i), target, stream);
  }

  // repeated .mead101.mead.Timing sample_timing = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sample_timing_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_sample_timing(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Sample)
  return target;
}

size_t Sample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Sample)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.TextWithFormat description = 2;
  total_size += 1UL * this->_internal_description_size();
  for (const auto& msg : this->description_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Timing host_timing = 3;
  total_size += 1UL * this->_internal_host_timing_size();
  for (const auto& msg : this->host_timing_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metadata_source_reference = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // repeated .mead101.mead.SampleFeature sample_feature = 7;
  total_size += 1UL * this->_internal_sample_feature_size();
  for (const auto& msg : this->sample_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Timing sample_timing = 8;
  total_size += 1UL * this->_internal_sample_timing_size();
  for (const auto& msg : this->sample_timing_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .mead101.mead.ResourceSummary related_resource = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *related_resource_);
    }

    // optional bool contains_samples = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_contained_in_sample = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sample::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Sample)
  GOOGLE_DCHECK_NE(&from, this);
  const Sample* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sample>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Sample)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Sample)
    MergeFrom(*source);
  }
}

void Sample::MergeFrom(const Sample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Sample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  description_.MergeFrom(from.description_);
  host_timing_.MergeFrom(from.host_timing_);
  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  sample_feature_.MergeFrom(from.sample_feature_);
  sample_timing_.MergeFrom(from.sample_timing_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_related_resource()->::mead101::mead::ResourceSummary::MergeFrom(from._internal_related_resource());
    }
    if (cached_has_bits & 0x00000002u) {
      contains_samples_ = from.contains_samples_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_contained_in_sample_ = from.is_contained_in_sample_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sample::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sample::CopyFrom(const Sample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample::IsInitialized() const {
  return true;
}

void Sample::InternalSwap(Sample* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.InternalSwap(&other->description_);
  host_timing_.InternalSwap(&other->host_timing_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  sample_feature_.InternalSwap(&other->sample_feature_);
  sample_timing_.InternalSwap(&other->sample_timing_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sample, is_contained_in_sample_)
      + sizeof(Sample::is_contained_in_sample_)
      - PROTOBUF_FIELD_OFFSET(Sample, related_resource_)>(
          reinterpret_cast<char*>(&related_resource_),
          reinterpret_cast<char*>(&other->related_resource_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sample::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SampleFeature::InitAsDefaultInstance() {
}
class SampleFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<SampleFeature>()._has_bits_);
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SampleFeature::SampleFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.SampleFeature)
}
SampleFeature::SampleFeature(const SampleFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.SampleFeature)
}

void SampleFeature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SampleFeature_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SampleFeature::~SampleFeature() {
  // @@protoc_insertion_point(destructor:mead101.mead.SampleFeature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SampleFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SampleFeature::ArenaDtor(void* object) {
  SampleFeature* _this = reinterpret_cast< SampleFeature* >(object);
  (void)_this;
}
void SampleFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SampleFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SampleFeature& SampleFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SampleFeature_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void SampleFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.SampleFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SampleFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language_and_script_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.SampleFeature.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.SampleFeature.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SampleFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.SampleFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language_and_script_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.SampleFeature.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language_and_script_code(), target);
  }

  // optional string ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.SampleFeature.ext_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.SampleFeature)
  return target;
}

size_t SampleFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.SampleFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string language_and_script_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SampleFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.SampleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const SampleFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SampleFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.SampleFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.SampleFeature)
    MergeFrom(*source);
  }
}

void SampleFeature::MergeFrom(const SampleFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.SampleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
  }
}

void SampleFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.SampleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleFeature::CopyFrom(const SampleFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.SampleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleFeature::IsInitialized() const {
  return true;
}

void SampleFeature::InternalSwap(SampleFeature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SampleFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionType::InitAsDefaultInstance() {
  ::mead101::mead::_SessionType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::SessionType*>(
      ::mead101::avs::SessionType::internal_default_instance());
}
class SessionType::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::SessionType& ext_value(const SessionType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::SessionType&
SessionType::_Internal::ext_value(const SessionType* msg) {
  return *msg->ext_value_;
}
void SessionType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SessionType::SessionType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.SessionType)
}
SessionType::SessionType(const SessionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::SessionType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.SessionType)
}

void SessionType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

SessionType::~SessionType() {
  // @@protoc_insertion_point(destructor:mead101.mead.SessionType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void SessionType::ArenaDtor(void* object) {
  SessionType* _this = reinterpret_cast< SessionType* >(object);
  (void)_this;
}
void SessionType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionType& SessionType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void SessionType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.SessionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.SessionType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.SessionType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.SessionType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.SessionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.SessionType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.SessionType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.SessionType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.SessionType)
  return target;
}

size_t SessionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.SessionType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.SessionType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.SessionType)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.SessionType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.SessionType)
    MergeFrom(*source);
  }
}

void SessionType::MergeFrom(const SessionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.SessionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::SessionType::MergeFrom(from._internal_ext_value());
    }
  }
}

void SessionType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.SessionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionType::CopyFrom(const SessionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.SessionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionType::IsInitialized() const {
  return true;
}

void SessionType::InternalSwap(SessionType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimilarParty::InitAsDefaultInstance() {
  ::mead101::mead::_SimilarParty_default_instance_._instance.get_mutable()->party_ = const_cast< ::mead101::mead::PartyWithNames*>(
      ::mead101::mead::PartyWithNames::internal_default_instance());
}
class SimilarParty::_Internal {
 public:
  using HasBits = decltype(std::declval<SimilarParty>()._has_bits_);
  static const ::mead101::mead::PartyWithNames& party(const SimilarParty* msg);
  static void set_has_party(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mead101::mead::PartyWithNames&
SimilarParty::_Internal::party(const SimilarParty* msg) {
  return *msg->party_;
}
SimilarParty::SimilarParty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  description_(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.SimilarParty)
}
SimilarParty::SimilarParty(const SimilarParty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      description_(from.description_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_party()) {
    party_ = new ::mead101::mead::PartyWithNames(*from.party_);
  } else {
    party_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.SimilarParty)
}

void SimilarParty::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimilarParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  party_ = nullptr;
}

SimilarParty::~SimilarParty() {
  // @@protoc_insertion_point(destructor:mead101.mead.SimilarParty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimilarParty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete party_;
}

void SimilarParty::ArenaDtor(void* object) {
  SimilarParty* _this = reinterpret_cast< SimilarParty* >(object);
  (void)_this;
}
void SimilarParty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimilarParty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimilarParty& SimilarParty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimilarParty_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void SimilarParty::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.SimilarParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.Clear();
  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(party_ != nullptr);
    party_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimilarParty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.Annotation description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_description(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.SimilarParty.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.PartyWithNames party = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_party(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimilarParty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.SimilarParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.Annotation description = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_description_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_description(i), target, stream);
  }

  // repeated string metadata_source_reference = 2;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.SimilarParty.metadata_source_reference");
    target = stream->WriteString(2, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.PartyWithNames party = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::party(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.SimilarParty)
  return target;
}

size_t SimilarParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.SimilarParty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.Annotation description = 1;
  total_size += 1UL * this->_internal_description_size();
  for (const auto& msg : this->description_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metadata_source_reference = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // optional .mead101.mead.PartyWithNames party = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *party_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimilarParty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.SimilarParty)
  GOOGLE_DCHECK_NE(&from, this);
  const SimilarParty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimilarParty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.SimilarParty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.SimilarParty)
    MergeFrom(*source);
  }
}

void SimilarParty::MergeFrom(const SimilarParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.SimilarParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  description_.MergeFrom(from.description_);
  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  if (from._internal_has_party()) {
    _internal_mutable_party()->::mead101::mead::PartyWithNames::MergeFrom(from._internal_party());
  }
}

void SimilarParty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.SimilarParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimilarParty::CopyFrom(const SimilarParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.SimilarParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimilarParty::IsInitialized() const {
  return true;
}

void SimilarParty::InternalSwap(SimilarParty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.InternalSwap(&other->description_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  swap(party_, other->party_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimilarParty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimilarRelease::InitAsDefaultInstance() {
  ::mead101::mead::_SimilarRelease_default_instance_._instance.get_mutable()->release_ = const_cast< ::mead101::mead::Release*>(
      ::mead101::mead::Release::internal_default_instance());
}
class SimilarRelease::_Internal {
 public:
  using HasBits = decltype(std::declval<SimilarRelease>()._has_bits_);
  static const ::mead101::mead::Release& release(const SimilarRelease* msg);
  static void set_has_release(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mead101::mead::Release&
SimilarRelease::_Internal::release(const SimilarRelease* msg) {
  return *msg->release_;
}
SimilarRelease::SimilarRelease(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  description_(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.SimilarRelease)
}
SimilarRelease::SimilarRelease(const SimilarRelease& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      description_(from.description_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_release()) {
    release_ = new ::mead101::mead::Release(*from.release_);
  } else {
    release_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.SimilarRelease)
}

void SimilarRelease::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimilarRelease_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  release_ = nullptr;
}

SimilarRelease::~SimilarRelease() {
  // @@protoc_insertion_point(destructor:mead101.mead.SimilarRelease)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimilarRelease::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete release_;
}

void SimilarRelease::ArenaDtor(void* object) {
  SimilarRelease* _this = reinterpret_cast< SimilarRelease* >(object);
  (void)_this;
}
void SimilarRelease::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimilarRelease::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimilarRelease& SimilarRelease::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimilarRelease_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void SimilarRelease::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.SimilarRelease)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.Clear();
  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(release_ != nullptr);
    release_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimilarRelease::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.Annotation description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_description(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.SimilarRelease.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Release release = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_release(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimilarRelease::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.SimilarRelease)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.Annotation description = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_description_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_description(i), target, stream);
  }

  // repeated string metadata_source_reference = 2;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.SimilarRelease.metadata_source_reference");
    target = stream->WriteString(2, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.Release release = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::release(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.SimilarRelease)
  return target;
}

size_t SimilarRelease::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.SimilarRelease)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.Annotation description = 1;
  total_size += 1UL * this->_internal_description_size();
  for (const auto& msg : this->description_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metadata_source_reference = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // optional .mead101.mead.Release release = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *release_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimilarRelease::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.SimilarRelease)
  GOOGLE_DCHECK_NE(&from, this);
  const SimilarRelease* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimilarRelease>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.SimilarRelease)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.SimilarRelease)
    MergeFrom(*source);
  }
}

void SimilarRelease::MergeFrom(const SimilarRelease& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.SimilarRelease)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  description_.MergeFrom(from.description_);
  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  if (from._internal_has_release()) {
    _internal_mutable_release()->::mead101::mead::Release::MergeFrom(from._internal_release());
  }
}

void SimilarRelease::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.SimilarRelease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimilarRelease::CopyFrom(const SimilarRelease& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.SimilarRelease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimilarRelease::IsInitialized() const {
  return true;
}

void SimilarRelease::InternalSwap(SimilarRelease* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.InternalSwap(&other->description_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  swap(release_, other->release_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimilarRelease::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimilarResource::InitAsDefaultInstance() {
  ::mead101::mead::_SimilarResource_default_instance_._instance.get_mutable()->resource_ = const_cast< ::mead101::mead::Resource*>(
      ::mead101::mead::Resource::internal_default_instance());
}
class SimilarResource::_Internal {
 public:
  using HasBits = decltype(std::declval<SimilarResource>()._has_bits_);
  static const ::mead101::mead::Resource& resource(const SimilarResource* msg);
  static void set_has_resource(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mead101::mead::Resource&
SimilarResource::_Internal::resource(const SimilarResource* msg) {
  return *msg->resource_;
}
SimilarResource::SimilarResource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  description_(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.SimilarResource)
}
SimilarResource::SimilarResource(const SimilarResource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      description_(from.description_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_resource()) {
    resource_ = new ::mead101::mead::Resource(*from.resource_);
  } else {
    resource_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.SimilarResource)
}

void SimilarResource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimilarResource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  resource_ = nullptr;
}

SimilarResource::~SimilarResource() {
  // @@protoc_insertion_point(destructor:mead101.mead.SimilarResource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimilarResource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete resource_;
}

void SimilarResource::ArenaDtor(void* object) {
  SimilarResource* _this = reinterpret_cast< SimilarResource* >(object);
  (void)_this;
}
void SimilarResource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimilarResource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimilarResource& SimilarResource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimilarResource_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void SimilarResource::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.SimilarResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.Clear();
  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(resource_ != nullptr);
    resource_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimilarResource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.Annotation description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_description(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.SimilarResource.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Resource resource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimilarResource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.SimilarResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.Annotation description = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_description_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_description(i), target, stream);
  }

  // repeated string metadata_source_reference = 2;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.SimilarResource.metadata_source_reference");
    target = stream->WriteString(2, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.Resource resource = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::resource(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.SimilarResource)
  return target;
}

size_t SimilarResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.SimilarResource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.Annotation description = 1;
  total_size += 1UL * this->_internal_description_size();
  for (const auto& msg : this->description_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metadata_source_reference = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // optional .mead101.mead.Resource resource = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resource_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimilarResource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.SimilarResource)
  GOOGLE_DCHECK_NE(&from, this);
  const SimilarResource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimilarResource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.SimilarResource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.SimilarResource)
    MergeFrom(*source);
  }
}

void SimilarResource::MergeFrom(const SimilarResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.SimilarResource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  description_.MergeFrom(from.description_);
  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  if (from._internal_has_resource()) {
    _internal_mutable_resource()->::mead101::mead::Resource::MergeFrom(from._internal_resource());
  }
}

void SimilarResource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.SimilarResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimilarResource::CopyFrom(const SimilarResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.SimilarResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimilarResource::IsInitialized() const {
  return true;
}

void SimilarResource::InternalSwap(SimilarResource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.InternalSwap(&other->description_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  swap(resource_, other->resource_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimilarResource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimilarWork::InitAsDefaultInstance() {
  ::mead101::mead::_SimilarWork_default_instance_._instance.get_mutable()->work_ = const_cast< ::mead101::mead::Work*>(
      ::mead101::mead::Work::internal_default_instance());
}
class SimilarWork::_Internal {
 public:
  using HasBits = decltype(std::declval<SimilarWork>()._has_bits_);
  static const ::mead101::mead::Work& work(const SimilarWork* msg);
  static void set_has_work(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mead101::mead::Work&
SimilarWork::_Internal::work(const SimilarWork* msg) {
  return *msg->work_;
}
SimilarWork::SimilarWork(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  description_(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.SimilarWork)
}
SimilarWork::SimilarWork(const SimilarWork& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      description_(from.description_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_work()) {
    work_ = new ::mead101::mead::Work(*from.work_);
  } else {
    work_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.SimilarWork)
}

void SimilarWork::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimilarWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  work_ = nullptr;
}

SimilarWork::~SimilarWork() {
  // @@protoc_insertion_point(destructor:mead101.mead.SimilarWork)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimilarWork::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete work_;
}

void SimilarWork::ArenaDtor(void* object) {
  SimilarWork* _this = reinterpret_cast< SimilarWork* >(object);
  (void)_this;
}
void SimilarWork::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimilarWork::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimilarWork& SimilarWork::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimilarWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void SimilarWork::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.SimilarWork)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.Clear();
  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(work_ != nullptr);
    work_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimilarWork::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.Annotation description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_description(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.SimilarWork.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Work work = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_work(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimilarWork::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.SimilarWork)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.Annotation description = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_description_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_description(i), target, stream);
  }

  // repeated string metadata_source_reference = 2;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.SimilarWork.metadata_source_reference");
    target = stream->WriteString(2, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.Work work = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::work(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.SimilarWork)
  return target;
}

size_t SimilarWork::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.SimilarWork)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.Annotation description = 1;
  total_size += 1UL * this->_internal_description_size();
  for (const auto& msg : this->description_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metadata_source_reference = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // optional .mead101.mead.Work work = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *work_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimilarWork::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.SimilarWork)
  GOOGLE_DCHECK_NE(&from, this);
  const SimilarWork* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimilarWork>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.SimilarWork)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.SimilarWork)
    MergeFrom(*source);
  }
}

void SimilarWork::MergeFrom(const SimilarWork& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.SimilarWork)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  description_.MergeFrom(from.description_);
  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  if (from._internal_has_work()) {
    _internal_mutable_work()->::mead101::mead::Work::MergeFrom(from._internal_work());
  }
}

void SimilarWork::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.SimilarWork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimilarWork::CopyFrom(const SimilarWork& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.SimilarWork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimilarWork::IsInitialized() const {
  return true;
}

void SimilarWork::InternalSwap(SimilarWork* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.InternalSwap(&other->description_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  swap(work_, other->work_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimilarWork::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Source::InitAsDefaultInstance() {
  ::mead101::mead::_Source_default_instance_._instance.get_mutable()->generator_ = const_cast< ::mead101::mead::Generator*>(
      ::mead101::mead::Generator::internal_default_instance());
  ::mead101::mead::_Source_default_instance_._instance.get_mutable()->icon_ = const_cast< ::mead101::mead::Icon*>(
      ::mead101::mead::Icon::internal_default_instance());
  ::mead101::mead::_Source_default_instance_._instance.get_mutable()->id_ = const_cast< ::mead101::mead::Id*>(
      ::mead101::mead::Id::internal_default_instance());
  ::mead101::mead::_Source_default_instance_._instance.get_mutable()->logo_ = const_cast< ::mead101::mead::Logo*>(
      ::mead101::mead::Logo::internal_default_instance());
  ::mead101::mead::_Source_default_instance_._instance.get_mutable()->rights_ = const_cast< ::mead101::mead::Text*>(
      ::mead101::mead::Text::internal_default_instance());
  ::mead101::mead::_Source_default_instance_._instance.get_mutable()->subtitle_ = const_cast< ::mead101::mead::Text*>(
      ::mead101::mead::Text::internal_default_instance());
  ::mead101::mead::_Source_default_instance_._instance.get_mutable()->title_ = const_cast< ::mead101::mead::Text*>(
      ::mead101::mead::Text::internal_default_instance());
  ::mead101::mead::_Source_default_instance_._instance.get_mutable()->updated_ = const_cast< ::mead101::mead::DateTime*>(
      ::mead101::mead::DateTime::internal_default_instance());
}
class Source::_Internal {
 public:
  using HasBits = decltype(std::declval<Source>()._has_bits_);
  static const ::mead101::mead::Generator& generator(const Source* msg);
  static void set_has_generator(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::Icon& icon(const Source* msg);
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::Id& id(const Source* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::Logo& logo(const Source* msg);
  static void set_has_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mead101::mead::Text& rights(const Source* msg);
  static void set_has_rights(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mead101::mead::Text& subtitle(const Source* msg);
  static void set_has_subtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::mead101::mead::Text& title(const Source* msg);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::mead101::mead::DateTime& updated(const Source* msg);
  static void set_has_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::mead101::mead::Generator&
Source::_Internal::generator(const Source* msg) {
  return *msg->generator_;
}
const ::mead101::mead::Icon&
Source::_Internal::icon(const Source* msg) {
  return *msg->icon_;
}
const ::mead101::mead::Id&
Source::_Internal::id(const Source* msg) {
  return *msg->id_;
}
const ::mead101::mead::Logo&
Source::_Internal::logo(const Source* msg) {
  return *msg->logo_;
}
const ::mead101::mead::Text&
Source::_Internal::rights(const Source* msg) {
  return *msg->rights_;
}
const ::mead101::mead::Text&
Source::_Internal::subtitle(const Source* msg) {
  return *msg->subtitle_;
}
const ::mead101::mead::Text&
Source::_Internal::title(const Source* msg) {
  return *msg->title_;
}
const ::mead101::mead::DateTime&
Source::_Internal::updated(const Source* msg) {
  return *msg->updated_;
}
Source::Source(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  any_attribute_value_(arena),
  any_value_(arena),
  author_(arena),
  category_(arena),
  contributor_(arena),
  link_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Source)
}
Source::Source(const Source& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      any_attribute_value_(from.any_attribute_value_),
      any_value_(from.any_value_),
      author_(from.author_),
      category_(from.category_),
      contributor_(from.contributor_),
      link_(from.link_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_generator()) {
    generator_ = new ::mead101::mead::Generator(*from.generator_);
  } else {
    generator_ = nullptr;
  }
  if (from._internal_has_icon()) {
    icon_ = new ::mead101::mead::Icon(*from.icon_);
  } else {
    icon_ = nullptr;
  }
  if (from._internal_has_id()) {
    id_ = new ::mead101::mead::Id(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_logo()) {
    logo_ = new ::mead101::mead::Logo(*from.logo_);
  } else {
    logo_ = nullptr;
  }
  if (from._internal_has_rights()) {
    rights_ = new ::mead101::mead::Text(*from.rights_);
  } else {
    rights_ = nullptr;
  }
  if (from._internal_has_subtitle()) {
    subtitle_ = new ::mead101::mead::Text(*from.subtitle_);
  } else {
    subtitle_ = nullptr;
  }
  if (from._internal_has_title()) {
    title_ = new ::mead101::mead::Text(*from.title_);
  } else {
    title_ = nullptr;
  }
  if (from._internal_has_updated()) {
    updated_ = new ::mead101::mead::DateTime(*from.updated_);
  } else {
    updated_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Source)
}

void Source::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Source_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&generator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_) -
      reinterpret_cast<char*>(&generator_)) + sizeof(updated_));
}

Source::~Source() {
  // @@protoc_insertion_point(destructor:mead101.mead.Source)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Source::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete generator_;
  if (this != internal_default_instance()) delete icon_;
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete logo_;
  if (this != internal_default_instance()) delete rights_;
  if (this != internal_default_instance()) delete subtitle_;
  if (this != internal_default_instance()) delete title_;
  if (this != internal_default_instance()) delete updated_;
}

void Source::ArenaDtor(void* object) {
  Source* _this = reinterpret_cast< Source* >(object);
  (void)_this;
}
void Source::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Source::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Source& Source::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Source_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Source::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Source)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  any_attribute_value_.Clear();
  any_value_.Clear();
  author_.Clear();
  category_.Clear();
  contributor_.Clear();
  link_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(generator_ != nullptr);
      generator_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(icon_ != nullptr);
      icon_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(logo_ != nullptr);
      logo_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(rights_ != nullptr);
      rights_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(subtitle_ != nullptr);
      subtitle_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(title_ != nullptr);
      title_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(updated_ != nullptr);
      updated_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Source::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string any_attribute_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_any_attribute_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Source.any_attribute_value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string any_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_any_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Source.any_value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Person author = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_author(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Category category = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Person contributor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contributor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Generator generator = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_generator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Icon icon = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_icon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Id id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Link link = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_link(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Logo logo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_logo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Text rights = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_rights(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Text subtitle = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_subtitle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Text title = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_title(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.DateTime updated = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Source::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Source)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  for (int i = 0, n = this->_internal_any_attribute_value_size(); i < n; i++) {
    const auto& s = this->_internal_any_attribute_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Source.any_attribute_value");
    target = stream->WriteString(1, s, target);
  }

  // repeated string any_value = 2;
  for (int i = 0, n = this->_internal_any_value_size(); i < n; i++) {
    const auto& s = this->_internal_any_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Source.any_value");
    target = stream->WriteString(2, s, target);
  }

  // repeated .mead101.mead.Person author = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_author_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_author(i), target, stream);
  }

  // repeated .mead101.mead.Category category = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_category_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_category(i), target, stream);
  }

  // repeated .mead101.mead.Person contributor = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contributor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_contributor(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.Generator generator = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::generator(this), target, stream);
  }

  // optional .mead101.mead.Icon icon = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::icon(this), target, stream);
  }

  // optional .mead101.mead.Id id = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::id(this), target, stream);
  }

  // repeated .mead101.mead.Link link = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_link_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_link(i), target, stream);
  }

  // optional .mead101.mead.Logo logo = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::logo(this), target, stream);
  }

  // optional .mead101.mead.Text rights = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::rights(this), target, stream);
  }

  // optional .mead101.mead.Text subtitle = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::subtitle(this), target, stream);
  }

  // optional .mead101.mead.Text title = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::title(this), target, stream);
  }

  // optional .mead101.mead.DateTime updated = 14;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::updated(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Source)
  return target;
}

size_t Source::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Source)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(any_attribute_value_.size());
  for (int i = 0, n = any_attribute_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      any_attribute_value_.Get(i));
  }

  // repeated string any_value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(any_value_.size());
  for (int i = 0, n = any_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      any_value_.Get(i));
  }

  // repeated .mead101.mead.Person author = 3;
  total_size += 1UL * this->_internal_author_size();
  for (const auto& msg : this->author_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Category category = 4;
  total_size += 1UL * this->_internal_category_size();
  for (const auto& msg : this->category_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Person contributor = 5;
  total_size += 1UL * this->_internal_contributor_size();
  for (const auto& msg : this->contributor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Link link = 9;
  total_size += 1UL * this->_internal_link_size();
  for (const auto& msg : this->link_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .mead101.mead.Generator generator = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *generator_);
    }

    // optional .mead101.mead.Icon icon = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *icon_);
    }

    // optional .mead101.mead.Id id = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .mead101.mead.Logo logo = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *logo_);
    }

    // optional .mead101.mead.Text rights = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rights_);
    }

    // optional .mead101.mead.Text subtitle = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subtitle_);
    }

    // optional .mead101.mead.Text title = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *title_);
    }

    // optional .mead101.mead.DateTime updated = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *updated_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Source::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Source)
  GOOGLE_DCHECK_NE(&from, this);
  const Source* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Source>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Source)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Source)
    MergeFrom(*source);
  }
}

void Source::MergeFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Source)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  any_attribute_value_.MergeFrom(from.any_attribute_value_);
  any_value_.MergeFrom(from.any_value_);
  author_.MergeFrom(from.author_);
  category_.MergeFrom(from.category_);
  contributor_.MergeFrom(from.contributor_);
  link_.MergeFrom(from.link_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_generator()->::mead101::mead::Generator::MergeFrom(from._internal_generator());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_icon()->::mead101::mead::Icon::MergeFrom(from._internal_icon());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_id()->::mead101::mead::Id::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_logo()->::mead101::mead::Logo::MergeFrom(from._internal_logo());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_rights()->::mead101::mead::Text::MergeFrom(from._internal_rights());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_subtitle()->::mead101::mead::Text::MergeFrom(from._internal_subtitle());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_title()->::mead101::mead::Text::MergeFrom(from._internal_title());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_updated()->::mead101::mead::DateTime::MergeFrom(from._internal_updated());
    }
  }
}

void Source::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Source)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Source::CopyFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Source)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Source::IsInitialized() const {
  return true;
}

void Source::InternalSwap(Source* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  any_attribute_value_.InternalSwap(&other->any_attribute_value_);
  any_value_.InternalSwap(&other->any_value_);
  author_.InternalSwap(&other->author_);
  category_.InternalSwap(&other->category_);
  contributor_.InternalSwap(&other->contributor_);
  link_.InternalSwap(&other->link_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Source, updated_)
      + sizeof(Source::updated_)
      - PROTOBUF_FIELD_OFFSET(Source, generator_)>(
          reinterpret_cast<char*>(&generator_),
          reinterpret_cast<char*>(&other->generator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Source::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubGenreCategory::InitAsDefaultInstance() {
}
class SubGenreCategory::_Internal {
 public:
};

SubGenreCategory::SubGenreCategory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_reference_(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.SubGenreCategory)
}
SubGenreCategory::SubGenreCategory(const SubGenreCategory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metadata_source_reference_(from.metadata_source_reference_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mead101.mead.SubGenreCategory)
}

void SubGenreCategory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubGenreCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
}

SubGenreCategory::~SubGenreCategory() {
  // @@protoc_insertion_point(destructor:mead101.mead.SubGenreCategory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubGenreCategory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubGenreCategory::ArenaDtor(void* object) {
  SubGenreCategory* _this = reinterpret_cast< SubGenreCategory* >(object);
  (void)_this;
}
void SubGenreCategory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubGenreCategory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubGenreCategory& SubGenreCategory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubGenreCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void SubGenreCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.SubGenreCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_reference_.Clear();
  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubGenreCategory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string metadata_source_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.SubGenreCategory.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.SubGenreCategoryValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubGenreCategory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.SubGenreCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.SubGenreCategory.metadata_source_reference");
    target = stream->WriteString(1, s, target);
  }

  // repeated .mead101.mead.SubGenreCategoryValue value = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.SubGenreCategory)
  return target;
}

size_t SubGenreCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.SubGenreCategory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // repeated .mead101.mead.SubGenreCategoryValue value = 2;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubGenreCategory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.SubGenreCategory)
  GOOGLE_DCHECK_NE(&from, this);
  const SubGenreCategory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubGenreCategory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.SubGenreCategory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.SubGenreCategory)
    MergeFrom(*source);
  }
}

void SubGenreCategory::MergeFrom(const SubGenreCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.SubGenreCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  value_.MergeFrom(from.value_);
}

void SubGenreCategory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.SubGenreCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubGenreCategory::CopyFrom(const SubGenreCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.SubGenreCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubGenreCategory::IsInitialized() const {
  return true;
}

void SubGenreCategory::InternalSwap(SubGenreCategory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubGenreCategory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubGenreCategoryValue::InitAsDefaultInstance() {
  ::mead101::mead::_SubGenreCategoryValue_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::SubGenre*>(
      ::mead101::avs::SubGenre::internal_default_instance());
}
class SubGenreCategoryValue::_Internal {
 public:
  using HasBits = decltype(std::declval<SubGenreCategoryValue>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::SubGenre& ext_value(const SubGenreCategoryValue* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::SubGenre&
SubGenreCategoryValue::_Internal::ext_value(const SubGenreCategoryValue* msg) {
  return *msg->ext_value_;
}
void SubGenreCategoryValue::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SubGenreCategoryValue::SubGenreCategoryValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.SubGenreCategoryValue)
}
SubGenreCategoryValue::SubGenreCategoryValue(const SubGenreCategoryValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::SubGenre(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.SubGenreCategoryValue)
}

void SubGenreCategoryValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubGenreCategoryValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

SubGenreCategoryValue::~SubGenreCategoryValue() {
  // @@protoc_insertion_point(destructor:mead101.mead.SubGenreCategoryValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubGenreCategoryValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void SubGenreCategoryValue::ArenaDtor(void* object) {
  SubGenreCategoryValue* _this = reinterpret_cast< SubGenreCategoryValue* >(object);
  (void)_this;
}
void SubGenreCategoryValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubGenreCategoryValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubGenreCategoryValue& SubGenreCategoryValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubGenreCategoryValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void SubGenreCategoryValue::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.SubGenreCategoryValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubGenreCategoryValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.SubGenreCategoryValue.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.SubGenreCategoryValue.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.SubGenre ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubGenreCategoryValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.SubGenreCategoryValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.SubGenreCategoryValue.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.SubGenreCategoryValue.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.SubGenre ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.SubGenreCategoryValue)
  return target;
}

size_t SubGenreCategoryValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.SubGenreCategoryValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.SubGenre ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubGenreCategoryValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.SubGenreCategoryValue)
  GOOGLE_DCHECK_NE(&from, this);
  const SubGenreCategoryValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubGenreCategoryValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.SubGenreCategoryValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.SubGenreCategoryValue)
    MergeFrom(*source);
  }
}

void SubGenreCategoryValue::MergeFrom(const SubGenreCategoryValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.SubGenreCategoryValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::SubGenre::MergeFrom(from._internal_ext_value());
    }
  }
}

void SubGenreCategoryValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.SubGenreCategoryValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubGenreCategoryValue::CopyFrom(const SubGenreCategoryValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.SubGenreCategoryValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubGenreCategoryValue::IsInitialized() const {
  return true;
}

void SubGenreCategoryValue::InternalSwap(SubGenreCategoryValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubGenreCategoryValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tempo::InitAsDefaultInstance() {
  ::mead101::mead::_Tempo_default_instance_._instance.get_mutable()->value_ = const_cast< ::mead101::mead::TempoValue*>(
      ::mead101::mead::TempoValue::internal_default_instance());
}
class Tempo::_Internal {
 public:
  using HasBits = decltype(std::declval<Tempo>()._has_bits_);
  static const ::mead101::mead::TempoValue& value(const Tempo* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mead101::mead::TempoValue&
Tempo::_Internal::value(const Tempo* msg) {
  return *msg->value_;
}
Tempo::Tempo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Tempo)
}
Tempo::Tempo(const Tempo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::mead101::mead::TempoValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Tempo)
}

void Tempo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tempo_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  value_ = nullptr;
}

Tempo::~Tempo() {
  // @@protoc_insertion_point(destructor:mead101.mead.Tempo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Tempo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void Tempo::ArenaDtor(void* object) {
  Tempo* _this = reinterpret_cast< Tempo* >(object);
  (void)_this;
}
void Tempo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tempo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tempo& Tempo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tempo_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Tempo::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Tempo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(value_ != nullptr);
    value_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tempo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string metadata_source_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Tempo.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.TempoValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tempo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Tempo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Tempo.metadata_source_reference");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.TempoValue value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Tempo)
  return target;
}

size_t Tempo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Tempo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // optional .mead101.mead.TempoValue value = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tempo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Tempo)
  GOOGLE_DCHECK_NE(&from, this);
  const Tempo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tempo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Tempo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Tempo)
    MergeFrom(*source);
  }
}

void Tempo::MergeFrom(const Tempo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Tempo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  if (from._internal_has_value()) {
    _internal_mutable_value()->::mead101::mead::TempoValue::MergeFrom(from._internal_value());
  }
}

void Tempo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Tempo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tempo::CopyFrom(const Tempo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Tempo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tempo::IsInitialized() const {
  return true;
}

void Tempo::InternalSwap(Tempo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tempo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TempoValue::InitAsDefaultInstance() {
  ::mead101::mead::_TempoValue_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::Tempo*>(
      ::mead101::avs::Tempo::internal_default_instance());
}
class TempoValue::_Internal {
 public:
  using HasBits = decltype(std::declval<TempoValue>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::Tempo& ext_value(const TempoValue* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::Tempo&
TempoValue::_Internal::ext_value(const TempoValue* msg) {
  return *msg->ext_value_;
}
void TempoValue::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TempoValue::TempoValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.TempoValue)
}
TempoValue::TempoValue(const TempoValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::Tempo(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.TempoValue)
}

void TempoValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TempoValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

TempoValue::~TempoValue() {
  // @@protoc_insertion_point(destructor:mead101.mead.TempoValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TempoValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void TempoValue::ArenaDtor(void* object) {
  TempoValue* _this = reinterpret_cast< TempoValue* >(object);
  (void)_this;
}
void TempoValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TempoValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TempoValue& TempoValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TempoValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void TempoValue::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.TempoValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TempoValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.TempoValue.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.TempoValue.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.Tempo ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TempoValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.TempoValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.TempoValue.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.TempoValue.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.Tempo ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.TempoValue)
  return target;
}

size_t TempoValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.TempoValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.Tempo ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TempoValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.TempoValue)
  GOOGLE_DCHECK_NE(&from, this);
  const TempoValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TempoValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.TempoValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.TempoValue)
    MergeFrom(*source);
  }
}

void TempoValue::MergeFrom(const TempoValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.TempoValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::Tempo::MergeFrom(from._internal_ext_value());
    }
  }
}

void TempoValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.TempoValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TempoValue::CopyFrom(const TempoValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.TempoValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TempoValue::IsInitialized() const {
  return true;
}

void TempoValue::InternalSwap(TempoValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TempoValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Text::InitAsDefaultInstance() {
  ::mead101::mead::_Text_default_instance_._instance.get_mutable()->type_ = const_cast< ::mead101::avs::TextType_ATOM*>(
      ::mead101::avs::TextType_ATOM::internal_default_instance());
}
class Text::_Internal {
 public:
  using HasBits = decltype(std::declval<Text>()._has_bits_);
  static void set_has_any_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::avs::TextType_ATOM& type(const Text* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mead101::avs::TextType_ATOM&
Text::_Internal::type(const Text* msg) {
  return *msg->type_;
}
void Text::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Text::Text(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  any_attribute_value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Text)
}
Text::Text(const Text& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      any_attribute_value_(from.any_attribute_value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  any_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_any_value()) {
    any_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_any_value(),
      GetArena());
  }
  if (from._internal_has_type()) {
    type_ = new ::mead101::avs::TextType_ATOM(*from.type_);
  } else {
    type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Text)
}

void Text::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Text_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  any_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = nullptr;
}

Text::~Text() {
  // @@protoc_insertion_point(destructor:mead101.mead.Text)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Text::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  any_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
}

void Text::ArenaDtor(void* object) {
  Text* _this = reinterpret_cast< Text* >(object);
  (void)_this;
}
void Text::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Text::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Text& Text::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Text_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Text::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  any_attribute_value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      any_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Text::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string any_attribute_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_any_attribute_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Text.any_attribute_value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string any_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_any_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Text.any_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.TextType_ATOM type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Text::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  for (int i = 0, n = this->_internal_any_attribute_value_size(); i < n; i++) {
    const auto& s = this->_internal_any_attribute_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Text.any_attribute_value");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string any_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_any_value().data(), static_cast<int>(this->_internal_any_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Text.any_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_any_value(), target);
  }

  // optional .mead101.avs.TextType_ATOM type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Text)
  return target;
}

size_t Text::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Text)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(any_attribute_value_.size());
  for (int i = 0, n = any_attribute_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      any_attribute_value_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string any_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_any_value());
    }

    // optional .mead101.avs.TextType_ATOM type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Text::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Text)
  GOOGLE_DCHECK_NE(&from, this);
  const Text* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Text>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Text)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Text)
    MergeFrom(*source);
  }
}

void Text::MergeFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Text)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  any_attribute_value_.MergeFrom(from.any_attribute_value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_any_value(from._internal_any_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_type()->::mead101::avs::TextType_ATOM::MergeFrom(from._internal_type());
    }
  }
}

void Text::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Text::CopyFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {
  return true;
}

void Text::InternalSwap(Text* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  any_attribute_value_.InternalSwap(&other->any_attribute_value_);
  any_value_.Swap(&other->any_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Text::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TextWithFormat::InitAsDefaultInstance() {
  ::mead101::mead::_TextWithFormat_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::mead101::avs::CurrentTerritoryCode*>(
      ::mead101::avs::CurrentTerritoryCode::internal_default_instance());
  ::mead101::mead::_TextWithFormat_default_instance_._instance.get_mutable()->format_ = const_cast< ::mead101::avs::TextCodecType*>(
      ::mead101::avs::TextCodecType::internal_default_instance());
}
class TextWithFormat::_Internal {
 public:
  using HasBits = decltype(std::declval<TextWithFormat>()._has_bits_);
  static const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code(const TextWithFormat* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mead101::avs::TextCodecType& format(const TextWithFormat* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mead101::avs::CurrentTerritoryCode&
TextWithFormat::_Internal::applicable_territory_code(const TextWithFormat* msg) {
  return *msg->applicable_territory_code_;
}
const ::mead101::avs::TextCodecType&
TextWithFormat::_Internal::format(const TextWithFormat* msg) {
  return *msg->format_;
}
void TextWithFormat::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void TextWithFormat::clear_format() {
  if (format_ != nullptr) format_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
TextWithFormat::TextWithFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.TextWithFormat)
}
TextWithFormat::TextWithFormat(const TextWithFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::mead101::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_format()) {
    format_ = new ::mead101::avs::TextCodecType(*from.format_);
  } else {
    format_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:mead101.mead.TextWithFormat)
}

void TextWithFormat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextWithFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_default_));
}

TextWithFormat::~TextWithFormat() {
  // @@protoc_insertion_point(destructor:mead101.mead.TextWithFormat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextWithFormat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete format_;
}

void TextWithFormat::ArenaDtor(void* object) {
  TextWithFormat* _this = reinterpret_cast< TextWithFormat* >(object);
  (void)_this;
}
void TextWithFormat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextWithFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextWithFormat& TextWithFormat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextWithFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void TextWithFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.TextWithFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(format_ != nullptr);
      format_->Clear();
    }
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextWithFormat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.TextCodecType format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.TextWithFormat.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string namespace = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.TextWithFormat.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.TextWithFormat.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.TextWithFormat.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextWithFormat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.TextWithFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional .mead101.avs.TextCodecType format = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::format(this), target, stream);
  }

  // optional bool is_default = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_default(), target);
  }

  // optional string language_and_script_code = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.TextWithFormat.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language_and_script_code(), target);
  }

  // optional string namespace = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.TextWithFormat.namespace");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.TextWithFormat.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_user_defined_value(), target);
  }

  // optional string ext_value = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.TextWithFormat.ext_value");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.TextWithFormat)
  return target;
}

size_t TextWithFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.TextWithFormat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string language_and_script_code = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string namespace = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional string ext_value = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

    // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .mead101.avs.TextCodecType format = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *format_);
    }

    // optional bool is_default = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextWithFormat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.TextWithFormat)
  GOOGLE_DCHECK_NE(&from, this);
  const TextWithFormat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextWithFormat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.TextWithFormat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.TextWithFormat)
    MergeFrom(*source);
  }
}

void TextWithFormat::MergeFrom(const TextWithFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.TextWithFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_applicable_territory_code()->::mead101::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_format()->::mead101::avs::TextCodecType::MergeFrom(from._internal_format());
    }
    if (cached_has_bits & 0x00000040u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TextWithFormat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.TextWithFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextWithFormat::CopyFrom(const TextWithFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.TextWithFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextWithFormat::IsInitialized() const {
  return true;
}

void TextWithFormat::InternalSwap(TextWithFormat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextWithFormat, is_default_)
      + sizeof(TextWithFormat::is_default_)
      - PROTOBUF_FIELD_OFFSET(TextWithFormat, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextWithFormat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TextWithoutTerritory::InitAsDefaultInstance() {
  ::mead101::mead::_TextWithoutTerritory_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::mead101::avs::CurrentTerritoryCode*>(
      ::mead101::avs::CurrentTerritoryCode::internal_default_instance());
  ::mead101::mead::_TextWithoutTerritory_default_instance_._instance.get_mutable()->format_ = const_cast< ::mead101::avs::TextCodecType*>(
      ::mead101::avs::TextCodecType::internal_default_instance());
}
class TextWithoutTerritory::_Internal {
 public:
  using HasBits = decltype(std::declval<TextWithoutTerritory>()._has_bits_);
  static const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code(const TextWithoutTerritory* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mead101::avs::TextCodecType& format(const TextWithoutTerritory* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mead101::avs::CurrentTerritoryCode&
TextWithoutTerritory::_Internal::applicable_territory_code(const TextWithoutTerritory* msg) {
  return *msg->applicable_territory_code_;
}
const ::mead101::avs::TextCodecType&
TextWithoutTerritory::_Internal::format(const TextWithoutTerritory* msg) {
  return *msg->format_;
}
void TextWithoutTerritory::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void TextWithoutTerritory::clear_format() {
  if (format_ != nullptr) format_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
TextWithoutTerritory::TextWithoutTerritory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.TextWithoutTerritory)
}
TextWithoutTerritory::TextWithoutTerritory(const TextWithoutTerritory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::mead101::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_format()) {
    format_ = new ::mead101::avs::TextCodecType(*from.format_);
  } else {
    format_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:mead101.mead.TextWithoutTerritory)
}

void TextWithoutTerritory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextWithoutTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_default_));
}

TextWithoutTerritory::~TextWithoutTerritory() {
  // @@protoc_insertion_point(destructor:mead101.mead.TextWithoutTerritory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextWithoutTerritory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete format_;
}

void TextWithoutTerritory::ArenaDtor(void* object) {
  TextWithoutTerritory* _this = reinterpret_cast< TextWithoutTerritory* >(object);
  (void)_this;
}
void TextWithoutTerritory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextWithoutTerritory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextWithoutTerritory& TextWithoutTerritory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextWithoutTerritory_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void TextWithoutTerritory::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.TextWithoutTerritory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(format_ != nullptr);
      format_->Clear();
    }
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextWithoutTerritory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.TextCodecType format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.TextWithoutTerritory.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string namespace = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.TextWithoutTerritory.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.TextWithoutTerritory.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.TextWithoutTerritory.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextWithoutTerritory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.TextWithoutTerritory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional .mead101.avs.TextCodecType format = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::format(this), target, stream);
  }

  // optional bool is_default = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_default(), target);
  }

  // optional string language_and_script_code = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.TextWithoutTerritory.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language_and_script_code(), target);
  }

  // optional string namespace = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.TextWithoutTerritory.namespace");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.TextWithoutTerritory.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_user_defined_value(), target);
  }

  // optional string ext_value = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.TextWithoutTerritory.ext_value");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.TextWithoutTerritory)
  return target;
}

size_t TextWithoutTerritory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.TextWithoutTerritory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string language_and_script_code = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string namespace = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional string ext_value = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

    // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .mead101.avs.TextCodecType format = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *format_);
    }

    // optional bool is_default = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextWithoutTerritory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.TextWithoutTerritory)
  GOOGLE_DCHECK_NE(&from, this);
  const TextWithoutTerritory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextWithoutTerritory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.TextWithoutTerritory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.TextWithoutTerritory)
    MergeFrom(*source);
  }
}

void TextWithoutTerritory::MergeFrom(const TextWithoutTerritory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.TextWithoutTerritory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_applicable_territory_code()->::mead101::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_format()->::mead101::avs::TextCodecType::MergeFrom(from._internal_format());
    }
    if (cached_has_bits & 0x00000040u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TextWithoutTerritory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.TextWithoutTerritory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextWithoutTerritory::CopyFrom(const TextWithoutTerritory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.TextWithoutTerritory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextWithoutTerritory::IsInitialized() const {
  return true;
}

void TextWithoutTerritory::InternalSwap(TextWithoutTerritory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextWithoutTerritory, is_default_)
      + sizeof(TextWithoutTerritory::is_default_)
      - PROTOBUF_FIELD_OFFSET(TextWithoutTerritory, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextWithoutTerritory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Theme::InitAsDefaultInstance() {
  ::mead101::mead::_Theme_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::mead101::avs::CurrentTerritoryCode*>(
      ::mead101::avs::CurrentTerritoryCode::internal_default_instance());
  ::mead101::mead::_Theme_default_instance_._instance.get_mutable()->value_ = const_cast< ::mead101::mead::ThemeValue*>(
      ::mead101::mead::ThemeValue::internal_default_instance());
}
class Theme::_Internal {
 public:
  using HasBits = decltype(std::declval<Theme>()._has_bits_);
  static const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code(const Theme* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::ThemeValue& value(const Theme* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mead101::avs::CurrentTerritoryCode&
Theme::_Internal::applicable_territory_code(const Theme* msg) {
  return *msg->applicable_territory_code_;
}
const ::mead101::mead::ThemeValue&
Theme::_Internal::value(const Theme* msg) {
  return *msg->value_;
}
void Theme::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Theme::Theme(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  description_(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Theme)
}
Theme::Theme(const Theme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      description_(from.description_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::mead101::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::mead101::mead::ThemeValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Theme)
}

void Theme::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Theme_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(value_));
}

Theme::~Theme() {
  // @@protoc_insertion_point(destructor:mead101.mead.Theme)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Theme::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete value_;
}

void Theme::ArenaDtor(void* object) {
  Theme* _this = reinterpret_cast< Theme* >(object);
  (void)_this;
}
void Theme::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Theme::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Theme& Theme::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Theme_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Theme::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Theme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.Clear();
  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Theme::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.TextWithoutTerritory description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_description(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Theme.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ThemeValue value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Theme::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Theme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // repeated .mead101.mead.TextWithoutTerritory description = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_description_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_description(i), target, stream);
  }

  // repeated string metadata_source_reference = 3;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Theme.metadata_source_reference");
    target = stream->WriteString(3, s, target);
  }

  // optional .mead101.mead.ThemeValue value = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Theme)
  return target;
}

size_t Theme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Theme)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.TextWithoutTerritory description = 2;
  total_size += 1UL * this->_internal_description_size();
  for (const auto& msg : this->description_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metadata_source_reference = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .mead101.mead.ThemeValue value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Theme::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Theme)
  GOOGLE_DCHECK_NE(&from, this);
  const Theme* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Theme>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Theme)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Theme)
    MergeFrom(*source);
  }
}

void Theme::MergeFrom(const Theme& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Theme)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  description_.MergeFrom(from.description_);
  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_applicable_territory_code()->::mead101::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::mead101::mead::ThemeValue::MergeFrom(from._internal_value());
    }
  }
}

void Theme::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Theme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Theme::CopyFrom(const Theme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Theme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Theme::IsInitialized() const {
  return true;
}

void Theme::InternalSwap(Theme* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.InternalSwap(&other->description_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Theme, value_)
      + sizeof(Theme::value_)
      - PROTOBUF_FIELD_OFFSET(Theme, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Theme::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ThemeValue::InitAsDefaultInstance() {
  ::mead101::mead::_ThemeValue_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::Theme*>(
      ::mead101::avs::Theme::internal_default_instance());
}
class ThemeValue::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeValue>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::Theme& ext_value(const ThemeValue* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::Theme&
ThemeValue::_Internal::ext_value(const ThemeValue* msg) {
  return *msg->ext_value_;
}
void ThemeValue::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ThemeValue::ThemeValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ThemeValue)
}
ThemeValue::ThemeValue(const ThemeValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::Theme(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ThemeValue)
}

void ThemeValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThemeValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

ThemeValue::~ThemeValue() {
  // @@protoc_insertion_point(destructor:mead101.mead.ThemeValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThemeValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void ThemeValue::ArenaDtor(void* object) {
  ThemeValue* _this = reinterpret_cast< ThemeValue* >(object);
  (void)_this;
}
void ThemeValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThemeValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThemeValue& ThemeValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThemeValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ThemeValue::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ThemeValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ThemeValue.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ThemeValue.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.Theme ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThemeValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ThemeValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ThemeValue.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ThemeValue.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.Theme ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ThemeValue)
  return target;
}

size_t ThemeValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ThemeValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.Theme ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThemeValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ThemeValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ThemeValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThemeValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ThemeValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ThemeValue)
    MergeFrom(*source);
  }
}

void ThemeValue::MergeFrom(const ThemeValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ThemeValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::Theme::MergeFrom(from._internal_ext_value());
    }
  }
}

void ThemeValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ThemeValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeValue::CopyFrom(const ThemeValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ThemeValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeValue::IsInitialized() const {
  return true;
}

void ThemeValue::InternalSwap(ThemeValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeSignature::InitAsDefaultInstance() {
  ::mead101::mead::_TimeSignature_default_instance_._instance.get_mutable()->meter_ = const_cast< ::mead101::mead::Meter*>(
      ::mead101::mead::Meter::internal_default_instance());
  ::mead101::mead::_TimeSignature_default_instance_._instance.get_mutable()->tempo_ = const_cast< ::mead101::mead::TempoValue*>(
      ::mead101::mead::TempoValue::internal_default_instance());
}
class TimeSignature::_Internal {
 public:
  using HasBits = decltype(std::declval<TimeSignature>()._has_bits_);
  static const ::mead101::mead::Meter& meter(const TimeSignature* msg);
  static void set_has_meter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_no_meter_available(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::TempoValue& tempo(const TimeSignature* msg);
  static void set_has_tempo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_too_many_tempi(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mead101::mead::Meter&
TimeSignature::_Internal::meter(const TimeSignature* msg) {
  return *msg->meter_;
}
const ::mead101::mead::TempoValue&
TimeSignature::_Internal::tempo(const TimeSignature* msg) {
  return *msg->tempo_;
}
TimeSignature::TimeSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_reference_(arena),
  modulation_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.TimeSignature)
}
TimeSignature::TimeSignature(const TimeSignature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metadata_source_reference_(from.metadata_source_reference_),
      modulation_(from.modulation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meter()) {
    meter_ = new ::mead101::mead::Meter(*from.meter_);
  } else {
    meter_ = nullptr;
  }
  if (from._internal_has_tempo()) {
    tempo_ = new ::mead101::mead::TempoValue(*from.tempo_);
  } else {
    tempo_ = nullptr;
  }
  ::memcpy(&no_meter_available_, &from.no_meter_available_,
    static_cast<size_t>(reinterpret_cast<char*>(&too_many_tempi_) -
    reinterpret_cast<char*>(&no_meter_available_)) + sizeof(too_many_tempi_));
  // @@protoc_insertion_point(copy_constructor:mead101.mead.TimeSignature)
}

void TimeSignature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeSignature_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&meter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&too_many_tempi_) -
      reinterpret_cast<char*>(&meter_)) + sizeof(too_many_tempi_));
}

TimeSignature::~TimeSignature() {
  // @@protoc_insertion_point(destructor:mead101.mead.TimeSignature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeSignature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete meter_;
  if (this != internal_default_instance()) delete tempo_;
}

void TimeSignature::ArenaDtor(void* object) {
  TimeSignature* _this = reinterpret_cast< TimeSignature* >(object);
  (void)_this;
}
void TimeSignature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeSignature& TimeSignature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeSignature_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void TimeSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.TimeSignature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_reference_.Clear();
  modulation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(meter_ != nullptr);
      meter_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tempo_ != nullptr);
      tempo_->Clear();
    }
  }
  ::memset(&no_meter_available_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&too_many_tempi_) -
      reinterpret_cast<char*>(&no_meter_available_)) + sizeof(too_many_tempi_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeSignature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string metadata_source_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.TimeSignature.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Meter meter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_meter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.TimeSignatureModulation modulation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_modulation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool no_meter_available = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_no_meter_available(&has_bits);
          no_meter_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.TempoValue tempo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tempo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool too_many_tempi = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_too_many_tempi(&has_bits);
          too_many_tempi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeSignature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.TimeSignature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.TimeSignature.metadata_source_reference");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.Meter meter = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::meter(this), target, stream);
  }

  // repeated .mead101.mead.TimeSignatureModulation modulation = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_modulation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_modulation(i), target, stream);
  }

  // optional bool no_meter_available = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_no_meter_available(), target);
  }

  // optional .mead101.mead.TempoValue tempo = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::tempo(this), target, stream);
  }

  // optional bool too_many_tempi = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_too_many_tempi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.TimeSignature)
  return target;
}

size_t TimeSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.TimeSignature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // repeated .mead101.mead.TimeSignatureModulation modulation = 3;
  total_size += 1UL * this->_internal_modulation_size();
  for (const auto& msg : this->modulation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .mead101.mead.Meter meter = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *meter_);
    }

    // optional .mead101.mead.TempoValue tempo = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tempo_);
    }

    // optional bool no_meter_available = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool too_many_tempi = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeSignature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.TimeSignature)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeSignature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeSignature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.TimeSignature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.TimeSignature)
    MergeFrom(*source);
  }
}

void TimeSignature::MergeFrom(const TimeSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.TimeSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  modulation_.MergeFrom(from.modulation_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_meter()->::mead101::mead::Meter::MergeFrom(from._internal_meter());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tempo()->::mead101::mead::TempoValue::MergeFrom(from._internal_tempo());
    }
    if (cached_has_bits & 0x00000004u) {
      no_meter_available_ = from.no_meter_available_;
    }
    if (cached_has_bits & 0x00000008u) {
      too_many_tempi_ = from.too_many_tempi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimeSignature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.TimeSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSignature::CopyFrom(const TimeSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.TimeSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSignature::IsInitialized() const {
  return true;
}

void TimeSignature::InternalSwap(TimeSignature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  modulation_.InternalSwap(&other->modulation_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeSignature, too_many_tempi_)
      + sizeof(TimeSignature::too_many_tempi_)
      - PROTOBUF_FIELD_OFFSET(TimeSignature, meter_)>(
          reinterpret_cast<char*>(&meter_),
          reinterpret_cast<char*>(&other->meter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeSignature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeSignatureModulation::InitAsDefaultInstance() {
  ::mead101::mead::_TimeSignatureModulation_default_instance_._instance.get_mutable()->meter_ = const_cast< ::mead101::mead::Meter*>(
      ::mead101::mead::Meter::internal_default_instance());
  ::mead101::mead::_TimeSignatureModulation_default_instance_._instance.get_mutable()->tempo_ = const_cast< ::mead101::mead::Tempo*>(
      ::mead101::mead::Tempo::internal_default_instance());
}
class TimeSignatureModulation::_Internal {
 public:
  using HasBits = decltype(std::declval<TimeSignatureModulation>()._has_bits_);
  static void set_has_end_bar(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_end_point(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::Meter& meter(const TimeSignatureModulation* msg);
  static void set_has_meter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_no_meter_available(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_start_bar(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_start_point(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::mead101::mead::Tempo& tempo(const TimeSignatureModulation* msg);
  static void set_has_tempo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mead101::mead::Meter&
TimeSignatureModulation::_Internal::meter(const TimeSignatureModulation* msg) {
  return *msg->meter_;
}
const ::mead101::mead::Tempo&
TimeSignatureModulation::_Internal::tempo(const TimeSignatureModulation* msg) {
  return *msg->tempo_;
}
TimeSignatureModulation::TimeSignatureModulation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.TimeSignatureModulation)
}
TimeSignatureModulation::TimeSignatureModulation(const TimeSignatureModulation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meter()) {
    meter_ = new ::mead101::mead::Meter(*from.meter_);
  } else {
    meter_ = nullptr;
  }
  if (from._internal_has_tempo()) {
    tempo_ = new ::mead101::mead::Tempo(*from.tempo_);
  } else {
    tempo_ = nullptr;
  }
  ::memcpy(&end_point_, &from.end_point_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_bar_) -
    reinterpret_cast<char*>(&end_point_)) + sizeof(start_bar_));
  // @@protoc_insertion_point(copy_constructor:mead101.mead.TimeSignatureModulation)
}

void TimeSignatureModulation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeSignatureModulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&meter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_bar_) -
      reinterpret_cast<char*>(&meter_)) + sizeof(start_bar_));
}

TimeSignatureModulation::~TimeSignatureModulation() {
  // @@protoc_insertion_point(destructor:mead101.mead.TimeSignatureModulation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeSignatureModulation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete meter_;
  if (this != internal_default_instance()) delete tempo_;
}

void TimeSignatureModulation::ArenaDtor(void* object) {
  TimeSignatureModulation* _this = reinterpret_cast< TimeSignatureModulation* >(object);
  (void)_this;
}
void TimeSignatureModulation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeSignatureModulation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeSignatureModulation& TimeSignatureModulation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeSignatureModulation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void TimeSignatureModulation::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.TimeSignatureModulation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(meter_ != nullptr);
      meter_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tempo_ != nullptr);
      tempo_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&end_point_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_bar_) -
        reinterpret_cast<char*>(&end_point_)) + sizeof(start_bar_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeSignatureModulation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 end_bar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_end_bar(&has_bits);
          end_bar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double end_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_end_point(&has_bits);
          end_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Meter meter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_meter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool no_meter_available = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_no_meter_available(&has_bits);
          no_meter_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 start_bar = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_start_bar(&has_bits);
          start_bar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double start_point = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_start_point(&has_bits);
          start_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Tempo tempo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tempo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeSignatureModulation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.TimeSignatureModulation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 end_bar = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_end_bar(), target);
  }

  // optional double end_point = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_end_point(), target);
  }

  // optional .mead101.mead.Meter meter = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::meter(this), target, stream);
  }

  // optional bool no_meter_available = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_no_meter_available(), target);
  }

  // optional int32 start_bar = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_start_bar(), target);
  }

  // optional double start_point = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_start_point(), target);
  }

  // optional .mead101.mead.Tempo tempo = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::tempo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.TimeSignatureModulation)
  return target;
}

size_t TimeSignatureModulation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.TimeSignatureModulation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .mead101.mead.Meter meter = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *meter_);
    }

    // optional .mead101.mead.Tempo tempo = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tempo_);
    }

    // optional double end_point = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 end_bar = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_end_bar());
    }

    // optional bool no_meter_available = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional double start_point = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 start_bar = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_start_bar());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeSignatureModulation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.TimeSignatureModulation)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeSignatureModulation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeSignatureModulation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.TimeSignatureModulation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.TimeSignatureModulation)
    MergeFrom(*source);
  }
}

void TimeSignatureModulation::MergeFrom(const TimeSignatureModulation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.TimeSignatureModulation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_meter()->::mead101::mead::Meter::MergeFrom(from._internal_meter());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tempo()->::mead101::mead::Tempo::MergeFrom(from._internal_tempo());
    }
    if (cached_has_bits & 0x00000004u) {
      end_point_ = from.end_point_;
    }
    if (cached_has_bits & 0x00000008u) {
      end_bar_ = from.end_bar_;
    }
    if (cached_has_bits & 0x00000010u) {
      no_meter_available_ = from.no_meter_available_;
    }
    if (cached_has_bits & 0x00000020u) {
      start_point_ = from.start_point_;
    }
    if (cached_has_bits & 0x00000040u) {
      start_bar_ = from.start_bar_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimeSignatureModulation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.TimeSignatureModulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSignatureModulation::CopyFrom(const TimeSignatureModulation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.TimeSignatureModulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSignatureModulation::IsInitialized() const {
  return true;
}

void TimeSignatureModulation::InternalSwap(TimeSignatureModulation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeSignatureModulation, start_bar_)
      + sizeof(TimeSignatureModulation::start_bar_)
      - PROTOBUF_FIELD_OFFSET(TimeSignatureModulation, meter_)>(
          reinterpret_cast<char*>(&meter_),
          reinterpret_cast<char*>(&other->meter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeSignatureModulation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Timing::InitAsDefaultInstance() {
}
class Timing::_Internal {
 public:
  using HasBits = decltype(std::declval<Timing>()._has_bits_);
  static void set_has_duration_used(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Timing::Timing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Timing)
}
Timing::Timing(const Timing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  duration_used_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_duration_used()) {
    duration_used_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_duration_used(),
      GetArena());
  }
  start_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_start_point()) {
    start_point_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_start_point(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Timing)
}

void Timing::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Timing_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  duration_used_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Timing::~Timing() {
  // @@protoc_insertion_point(destructor:mead101.mead.Timing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Timing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  duration_used_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_point_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Timing::ArenaDtor(void* object) {
  Timing* _this = reinterpret_cast< Timing* >(object);
  (void)_this;
}
void Timing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Timing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Timing& Timing::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Timing_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Timing::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Timing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      duration_used_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      start_point_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Timing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string duration_used = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_duration_used();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Timing.duration_used");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string start_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_start_point();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Timing.start_point");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Timing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Timing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string duration_used = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_duration_used().data(), static_cast<int>(this->_internal_duration_used().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Timing.duration_used");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_duration_used(), target);
  }

  // optional string start_point = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_start_point().data(), static_cast<int>(this->_internal_start_point().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Timing.start_point");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_start_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Timing)
  return target;
}

size_t Timing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Timing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string duration_used = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_duration_used());
    }

    // optional string start_point = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_point());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Timing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Timing)
  GOOGLE_DCHECK_NE(&from, this);
  const Timing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Timing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Timing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Timing)
    MergeFrom(*source);
  }
}

void Timing::MergeFrom(const Timing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Timing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_duration_used(from._internal_duration_used());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_start_point(from._internal_start_point());
    }
  }
}

void Timing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Timing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timing::CopyFrom(const Timing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Timing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timing::IsInitialized() const {
  return true;
}

void Timing::InternalSwap(Timing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  duration_used_.Swap(&other->duration_used_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  start_point_.Swap(&other->start_point_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Timing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TitleTextWithPronunciation::InitAsDefaultInstance() {
}
class TitleTextWithPronunciation::_Internal {
 public:
  using HasBits = decltype(std::declval<TitleTextWithPronunciation>()._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TitleTextWithPronunciation::TitleTextWithPronunciation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pronunciation_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.TitleTextWithPronunciation)
}
TitleTextWithPronunciation::TitleTextWithPronunciation(const TitleTextWithPronunciation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pronunciation_(from.pronunciation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.TitleTextWithPronunciation)
}

void TitleTextWithPronunciation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TitleTextWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TitleTextWithPronunciation::~TitleTextWithPronunciation() {
  // @@protoc_insertion_point(destructor:mead101.mead.TitleTextWithPronunciation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TitleTextWithPronunciation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TitleTextWithPronunciation::ArenaDtor(void* object) {
  TitleTextWithPronunciation* _this = reinterpret_cast< TitleTextWithPronunciation* >(object);
  (void)_this;
}
void TitleTextWithPronunciation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TitleTextWithPronunciation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TitleTextWithPronunciation& TitleTextWithPronunciation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TitleTextWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void TitleTextWithPronunciation::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.TitleTextWithPronunciation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pronunciation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    title_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TitleTextWithPronunciation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.Pronunciation pronunciation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pronunciation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.TitleTextWithPronunciation.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TitleTextWithPronunciation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.TitleTextWithPronunciation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.Pronunciation pronunciation = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pronunciation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pronunciation(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.TitleTextWithPronunciation.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.TitleTextWithPronunciation)
  return target;
}

size_t TitleTextWithPronunciation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.TitleTextWithPronunciation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.Pronunciation pronunciation = 1;
  total_size += 1UL * this->_internal_pronunciation_size();
  for (const auto& msg : this->pronunciation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string title = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TitleTextWithPronunciation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.TitleTextWithPronunciation)
  GOOGLE_DCHECK_NE(&from, this);
  const TitleTextWithPronunciation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TitleTextWithPronunciation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.TitleTextWithPronunciation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.TitleTextWithPronunciation)
    MergeFrom(*source);
  }
}

void TitleTextWithPronunciation::MergeFrom(const TitleTextWithPronunciation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.TitleTextWithPronunciation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pronunciation_.MergeFrom(from.pronunciation_);
  if (from._internal_has_title()) {
    _internal_set_title(from._internal_title());
  }
}

void TitleTextWithPronunciation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.TitleTextWithPronunciation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleTextWithPronunciation::CopyFrom(const TitleTextWithPronunciation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.TitleTextWithPronunciation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleTextWithPronunciation::IsInitialized() const {
  return true;
}

void TitleTextWithPronunciation::InternalSwap(TitleTextWithPronunciation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pronunciation_.InternalSwap(&other->pronunciation_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TitleTextWithPronunciation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TitleWithPronunciation::InitAsDefaultInstance() {
  ::mead101::mead::_TitleWithPronunciation_default_instance_._instance.get_mutable()->sub_title_ = const_cast< ::mead101::mead::TitleTextWithPronunciation*>(
      ::mead101::mead::TitleTextWithPronunciation::internal_default_instance());
  ::mead101::mead::_TitleWithPronunciation_default_instance_._instance.get_mutable()->title_text_ = const_cast< ::mead101::mead::TitleTextWithPronunciation*>(
      ::mead101::mead::TitleTextWithPronunciation::internal_default_instance());
  ::mead101::mead::_TitleWithPronunciation_default_instance_._instance.get_mutable()->title_type_ = const_cast< ::mead101::avs::TitleType*>(
      ::mead101::avs::TitleType::internal_default_instance());
}
class TitleWithPronunciation::_Internal {
 public:
  using HasBits = decltype(std::declval<TitleWithPronunciation>()._has_bits_);
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::TitleTextWithPronunciation& sub_title(const TitleWithPronunciation* msg);
  static void set_has_sub_title(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mead101::mead::TitleTextWithPronunciation& title_text(const TitleWithPronunciation* msg);
  static void set_has_title_text(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mead101::avs::TitleType& title_type(const TitleWithPronunciation* msg);
  static void set_has_title_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::mead::TitleTextWithPronunciation&
TitleWithPronunciation::_Internal::sub_title(const TitleWithPronunciation* msg) {
  return *msg->sub_title_;
}
const ::mead101::mead::TitleTextWithPronunciation&
TitleWithPronunciation::_Internal::title_text(const TitleWithPronunciation* msg) {
  return *msg->title_text_;
}
const ::mead101::avs::TitleType&
TitleWithPronunciation::_Internal::title_type(const TitleWithPronunciation* msg) {
  return *msg->title_type_;
}
void TitleWithPronunciation::clear_title_type() {
  if (title_type_ != nullptr) title_type_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
TitleWithPronunciation::TitleWithPronunciation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.TitleWithPronunciation)
}
TitleWithPronunciation::TitleWithPronunciation(const TitleWithPronunciation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_sub_title()) {
    sub_title_ = new ::mead101::mead::TitleTextWithPronunciation(*from.sub_title_);
  } else {
    sub_title_ = nullptr;
  }
  if (from._internal_has_title_text()) {
    title_text_ = new ::mead101::mead::TitleTextWithPronunciation(*from.title_text_);
  } else {
    title_text_ = nullptr;
  }
  if (from._internal_has_title_type()) {
    title_type_ = new ::mead101::avs::TitleType(*from.title_type_);
  } else {
    title_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.TitleWithPronunciation)
}

void TitleWithPronunciation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TitleWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sub_title_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&title_type_) -
      reinterpret_cast<char*>(&sub_title_)) + sizeof(title_type_));
}

TitleWithPronunciation::~TitleWithPronunciation() {
  // @@protoc_insertion_point(destructor:mead101.mead.TitleWithPronunciation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TitleWithPronunciation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sub_title_;
  if (this != internal_default_instance()) delete title_text_;
  if (this != internal_default_instance()) delete title_type_;
}

void TitleWithPronunciation::ArenaDtor(void* object) {
  TitleWithPronunciation* _this = reinterpret_cast< TitleWithPronunciation* >(object);
  (void)_this;
}
void TitleWithPronunciation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TitleWithPronunciation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TitleWithPronunciation& TitleWithPronunciation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TitleWithPronunciation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void TitleWithPronunciation::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.TitleWithPronunciation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(sub_title_ != nullptr);
      sub_title_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(title_text_ != nullptr);
      title_text_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(title_type_ != nullptr);
      title_type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TitleWithPronunciation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language_and_script_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.TitleWithPronunciation.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string namespace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.TitleWithPronunciation.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.TitleTextWithPronunciation sub_title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_title(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.TitleTextWithPronunciation title_text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_title_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.TitleType title_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_title_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.TitleWithPronunciation.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TitleWithPronunciation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.TitleWithPronunciation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language_and_script_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.TitleWithPronunciation.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language_and_script_code(), target);
  }

  // optional string namespace = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.TitleWithPronunciation.namespace");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_(), target);
  }

  // optional .mead101.mead.TitleTextWithPronunciation sub_title = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sub_title(this), target, stream);
  }

  // optional .mead101.mead.TitleTextWithPronunciation title_text = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::title_text(this), target, stream);
  }

  // optional .mead101.avs.TitleType title_type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::title_type(this), target, stream);
  }

  // optional string user_defined_value = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.TitleWithPronunciation.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_user_defined_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.TitleWithPronunciation)
  return target;
}

size_t TitleWithPronunciation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.TitleWithPronunciation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string language_and_script_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string namespace = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.mead.TitleTextWithPronunciation sub_title = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sub_title_);
    }

    // optional .mead101.mead.TitleTextWithPronunciation title_text = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *title_text_);
    }

    // optional .mead101.avs.TitleType title_type = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *title_type_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TitleWithPronunciation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.TitleWithPronunciation)
  GOOGLE_DCHECK_NE(&from, this);
  const TitleWithPronunciation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TitleWithPronunciation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.TitleWithPronunciation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.TitleWithPronunciation)
    MergeFrom(*source);
  }
}

void TitleWithPronunciation::MergeFrom(const TitleWithPronunciation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.TitleWithPronunciation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_sub_title()->::mead101::mead::TitleTextWithPronunciation::MergeFrom(from._internal_sub_title());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_title_text()->::mead101::mead::TitleTextWithPronunciation::MergeFrom(from._internal_title_text());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_title_type()->::mead101::avs::TitleType::MergeFrom(from._internal_title_type());
    }
  }
}

void TitleWithPronunciation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.TitleWithPronunciation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleWithPronunciation::CopyFrom(const TitleWithPronunciation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.TitleWithPronunciation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleWithPronunciation::IsInitialized() const {
  return true;
}

void TitleWithPronunciation::InternalSwap(TitleWithPronunciation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TitleWithPronunciation, title_type_)
      + sizeof(TitleWithPronunciation::title_type_)
      - PROTOBUF_FIELD_OFFSET(TitleWithPronunciation, sub_title_)>(
          reinterpret_cast<char*>(&sub_title_),
          reinterpret_cast<char*>(&other->sub_title_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TitleWithPronunciation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void URI::InitAsDefaultInstance() {
}
class URI::_Internal {
 public:
  using HasBits = decltype(std::declval<URI>()._has_bits_);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

URI::URI(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  any_attribute_value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.URI)
}
URI::URI(const URI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      any_attribute_value_(from.any_attribute_value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.URI)
}

void URI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_URI_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

URI::~URI() {
  // @@protoc_insertion_point(destructor:mead101.mead.URI)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void URI::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void URI::ArenaDtor(void* object) {
  URI* _this = reinterpret_cast< URI* >(object);
  (void)_this;
}
void URI::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void URI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const URI& URI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_URI_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void URI::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.URI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  any_attribute_value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ext_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* URI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string any_attribute_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_any_attribute_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.URI.any_attribute_value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.URI.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* URI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.URI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  for (int i = 0, n = this->_internal_any_attribute_value_size(); i < n; i++) {
    const auto& s = this->_internal_any_attribute_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.URI.any_attribute_value");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string ext_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.URI.ext_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.URI)
  return target;
}

size_t URI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.URI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string any_attribute_value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(any_attribute_value_.size());
  for (int i = 0, n = any_attribute_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      any_attribute_value_.Get(i));
  }

  // optional string ext_value = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ext_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void URI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.URI)
  GOOGLE_DCHECK_NE(&from, this);
  const URI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<URI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.URI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.URI)
    MergeFrom(*source);
  }
}

void URI::MergeFrom(const URI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.URI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  any_attribute_value_.MergeFrom(from.any_attribute_value_);
  if (from._internal_has_ext_value()) {
    _internal_set_ext_value(from._internal_ext_value());
  }
}

void URI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.URI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void URI::CopyFrom(const URI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.URI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool URI::IsInitialized() const {
  return true;
}

void URI::InternalSwap(URI* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  any_attribute_value_.InternalSwap(&other->any_attribute_value_);
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata URI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Usage::InitAsDefaultInstance() {
}
class Usage::_Internal {
 public:
  using HasBits = decltype(std::declval<Usage>()._has_bits_);
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Usage::Usage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  description_(arena),
  metadata_source_reference_(arena),
  relevant_resource_(arena),
  usage_date_(arena),
  usage_period_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Usage)
}
Usage::Usage(const Usage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      description_(from.description_),
      metadata_source_reference_(from.metadata_source_reference_),
      relevant_resource_(from.relevant_resource_),
      usage_date_(from.usage_date_),
      usage_period_(from.usage_period_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sequence_number_ = from.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Usage)
}

void Usage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Usage_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  sequence_number_ = 0;
}

Usage::~Usage() {
  // @@protoc_insertion_point(destructor:mead101.mead.Usage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Usage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Usage::ArenaDtor(void* object) {
  Usage* _this = reinterpret_cast< Usage* >(object);
  (void)_this;
}
void Usage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Usage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Usage& Usage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Usage_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Usage::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Usage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.Clear();
  metadata_source_reference_.Clear();
  relevant_resource_.Clear();
  usage_date_.Clear();
  usage_period_.Clear();
  sequence_number_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Usage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.TextWithFormat description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_description(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Usage.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.RelatedResource relevant_resource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_relevant_resource(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 sequence_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.EventDate usage_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_usage_date(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.UsagePeriod usage_period = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_usage_period(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Usage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Usage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.TextWithFormat description = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_description_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_description(i), target, stream);
  }

  // repeated string metadata_source_reference = 2;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Usage.metadata_source_reference");
    target = stream->WriteString(2, s, target);
  }

  // repeated .mead101.mead.RelatedResource relevant_resource = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_relevant_resource_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_relevant_resource(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 sequence_number = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_sequence_number(), target);
  }

  // repeated .mead101.mead.EventDate usage_date = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_usage_date_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_usage_date(i), target, stream);
  }

  // repeated .mead101.mead.UsagePeriod usage_period = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_usage_period_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_usage_period(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Usage)
  return target;
}

size_t Usage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Usage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.TextWithFormat description = 1;
  total_size += 1UL * this->_internal_description_size();
  for (const auto& msg : this->description_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metadata_source_reference = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // repeated .mead101.mead.RelatedResource relevant_resource = 3;
  total_size += 1UL * this->_internal_relevant_resource_size();
  for (const auto& msg : this->relevant_resource_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.EventDate usage_date = 5;
  total_size += 1UL * this->_internal_usage_date_size();
  for (const auto& msg : this->usage_date_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.UsagePeriod usage_period = 6;
  total_size += 1UL * this->_internal_usage_period_size();
  for (const auto& msg : this->usage_period_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 sequence_number = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Usage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Usage)
  GOOGLE_DCHECK_NE(&from, this);
  const Usage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Usage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Usage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Usage)
    MergeFrom(*source);
  }
}

void Usage::MergeFrom(const Usage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Usage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  description_.MergeFrom(from.description_);
  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  relevant_resource_.MergeFrom(from.relevant_resource_);
  usage_date_.MergeFrom(from.usage_date_);
  usage_period_.MergeFrom(from.usage_period_);
  if (from._internal_has_sequence_number()) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
}

void Usage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Usage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Usage::CopyFrom(const Usage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Usage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Usage::IsInitialized() const {
  return true;
}

void Usage::InternalSwap(Usage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.InternalSwap(&other->description_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  relevant_resource_.InternalSwap(&other->relevant_resource_);
  usage_date_.InternalSwap(&other->usage_date_);
  usage_period_.InternalSwap(&other->usage_period_);
  swap(sequence_number_, other->sequence_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Usage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsagePeriod::InitAsDefaultInstance() {
  ::mead101::mead::_UsagePeriod_default_instance_._instance.get_mutable()->end_date_ = const_cast< ::mead101::mead::EventDateWithoutFlags*>(
      ::mead101::mead::EventDateWithoutFlags::internal_default_instance());
  ::mead101::mead::_UsagePeriod_default_instance_._instance.get_mutable()->start_date_ = const_cast< ::mead101::mead::EventDateWithoutFlags*>(
      ::mead101::mead::EventDateWithoutFlags::internal_default_instance());
}
class UsagePeriod::_Internal {
 public:
  using HasBits = decltype(std::declval<UsagePeriod>()._has_bits_);
  static const ::mead101::mead::EventDateWithoutFlags& end_date(const UsagePeriod* msg);
  static void set_has_end_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::EventDateWithoutFlags& start_date(const UsagePeriod* msg);
  static void set_has_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mead101::mead::EventDateWithoutFlags&
UsagePeriod::_Internal::end_date(const UsagePeriod* msg) {
  return *msg->end_date_;
}
const ::mead101::mead::EventDateWithoutFlags&
UsagePeriod::_Internal::start_date(const UsagePeriod* msg) {
  return *msg->start_date_;
}
UsagePeriod::UsagePeriod(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.UsagePeriod)
}
UsagePeriod::UsagePeriod(const UsagePeriod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_end_date()) {
    end_date_ = new ::mead101::mead::EventDateWithoutFlags(*from.end_date_);
  } else {
    end_date_ = nullptr;
  }
  if (from._internal_has_start_date()) {
    start_date_ = new ::mead101::mead::EventDateWithoutFlags(*from.start_date_);
  } else {
    start_date_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.UsagePeriod)
}

void UsagePeriod::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsagePeriod_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&end_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_date_) -
      reinterpret_cast<char*>(&end_date_)) + sizeof(start_date_));
}

UsagePeriod::~UsagePeriod() {
  // @@protoc_insertion_point(destructor:mead101.mead.UsagePeriod)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UsagePeriod::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete end_date_;
  if (this != internal_default_instance()) delete start_date_;
}

void UsagePeriod::ArenaDtor(void* object) {
  UsagePeriod* _this = reinterpret_cast< UsagePeriod* >(object);
  (void)_this;
}
void UsagePeriod::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UsagePeriod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsagePeriod& UsagePeriod::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsagePeriod_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void UsagePeriod::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.UsagePeriod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(end_date_ != nullptr);
      end_date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(start_date_ != nullptr);
      start_date_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UsagePeriod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.EventDateWithoutFlags end_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.EventDateWithoutFlags start_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsagePeriod::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.UsagePeriod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.EventDateWithoutFlags end_date = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::end_date(this), target, stream);
  }

  // optional .mead101.mead.EventDateWithoutFlags start_date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_date(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.UsagePeriod)
  return target;
}

size_t UsagePeriod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.UsagePeriod)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .mead101.mead.EventDateWithoutFlags end_date = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_date_);
    }

    // optional .mead101.mead.EventDateWithoutFlags start_date = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_date_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsagePeriod::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.UsagePeriod)
  GOOGLE_DCHECK_NE(&from, this);
  const UsagePeriod* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsagePeriod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.UsagePeriod)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.UsagePeriod)
    MergeFrom(*source);
  }
}

void UsagePeriod::MergeFrom(const UsagePeriod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.UsagePeriod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_end_date()->::mead101::mead::EventDateWithoutFlags::MergeFrom(from._internal_end_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_start_date()->::mead101::mead::EventDateWithoutFlags::MergeFrom(from._internal_start_date());
    }
  }
}

void UsagePeriod::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.UsagePeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsagePeriod::CopyFrom(const UsagePeriod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.UsagePeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsagePeriod::IsInitialized() const {
  return true;
}

void UsagePeriod::InternalSwap(UsagePeriod* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UsagePeriod, start_date_)
      + sizeof(UsagePeriod::start_date_)
      - PROTOBUF_FIELD_OFFSET(UsagePeriod, end_date_)>(
          reinterpret_cast<char*>(&end_date_),
          reinterpret_cast<char*>(&other->end_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UsagePeriod::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsedMusicalWork::InitAsDefaultInstance() {
}
class UsedMusicalWork::_Internal {
 public:
};

UsedMusicalWork::UsedMusicalWork(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_reference_(arena),
  resource_musical_work_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.UsedMusicalWork)
}
UsedMusicalWork::UsedMusicalWork(const UsedMusicalWork& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metadata_source_reference_(from.metadata_source_reference_),
      resource_musical_work_reference_(from.resource_musical_work_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mead101.mead.UsedMusicalWork)
}

void UsedMusicalWork::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsedMusicalWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
}

UsedMusicalWork::~UsedMusicalWork() {
  // @@protoc_insertion_point(destructor:mead101.mead.UsedMusicalWork)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UsedMusicalWork::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UsedMusicalWork::ArenaDtor(void* object) {
  UsedMusicalWork* _this = reinterpret_cast< UsedMusicalWork* >(object);
  (void)_this;
}
void UsedMusicalWork::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UsedMusicalWork::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsedMusicalWork& UsedMusicalWork::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsedMusicalWork_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void UsedMusicalWork::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.UsedMusicalWork)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_reference_.Clear();
  resource_musical_work_reference_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UsedMusicalWork::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string metadata_source_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.UsedMusicalWork.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string resource_musical_work_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_resource_musical_work_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.UsedMusicalWork.resource_musical_work_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsedMusicalWork::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.UsedMusicalWork)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.UsedMusicalWork.metadata_source_reference");
    target = stream->WriteString(1, s, target);
  }

  // repeated string resource_musical_work_reference = 2;
  for (int i = 0, n = this->_internal_resource_musical_work_reference_size(); i < n; i++) {
    const auto& s = this->_internal_resource_musical_work_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.UsedMusicalWork.resource_musical_work_reference");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.UsedMusicalWork)
  return target;
}

size_t UsedMusicalWork::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.UsedMusicalWork)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // repeated string resource_musical_work_reference = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(resource_musical_work_reference_.size());
  for (int i = 0, n = resource_musical_work_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      resource_musical_work_reference_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsedMusicalWork::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.UsedMusicalWork)
  GOOGLE_DCHECK_NE(&from, this);
  const UsedMusicalWork* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsedMusicalWork>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.UsedMusicalWork)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.UsedMusicalWork)
    MergeFrom(*source);
  }
}

void UsedMusicalWork::MergeFrom(const UsedMusicalWork& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.UsedMusicalWork)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  resource_musical_work_reference_.MergeFrom(from.resource_musical_work_reference_);
}

void UsedMusicalWork::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.UsedMusicalWork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsedMusicalWork::CopyFrom(const UsedMusicalWork& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.UsedMusicalWork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsedMusicalWork::IsInitialized() const {
  return true;
}

void UsedMusicalWork::InternalSwap(UsedMusicalWork* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  resource_musical_work_reference_.InternalSwap(&other->resource_musical_work_reference_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsedMusicalWork::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Venue::InitAsDefaultInstance() {
  ::mead101::mead::_Venue_default_instance_._instance.get_mutable()->territory_code_ = const_cast< ::mead101::mead::AllTerritoryCode*>(
      ::mead101::mead::AllTerritoryCode::internal_default_instance());
}
class Venue::_Internal {
 public:
  using HasBits = decltype(std::declval<Venue>()._has_bits_);
  static void set_has_location_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::AllTerritoryCode& territory_code(const Venue* msg);
  static void set_has_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_venue_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_venue_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_venue_room(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mead101::mead::AllTerritoryCode&
Venue::_Internal::territory_code(const Venue* msg) {
  return *msg->territory_code_;
}
Venue::Venue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Venue)
}
Venue::Venue(const Venue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  location_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_location_code()) {
    location_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_location_code(),
      GetArena());
  }
  venue_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_venue_address()) {
    venue_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_venue_address(),
      GetArena());
  }
  venue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_venue_name()) {
    venue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_venue_name(),
      GetArena());
  }
  venue_room_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_venue_room()) {
    venue_room_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_venue_room(),
      GetArena());
  }
  if (from._internal_has_territory_code()) {
    territory_code_ = new ::mead101::mead::AllTerritoryCode(*from.territory_code_);
  } else {
    territory_code_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Venue)
}

void Venue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Venue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  location_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  venue_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  venue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  venue_room_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  territory_code_ = nullptr;
}

Venue::~Venue() {
  // @@protoc_insertion_point(destructor:mead101.mead.Venue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Venue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  location_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  venue_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  venue_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  venue_room_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete territory_code_;
}

void Venue::ArenaDtor(void* object) {
  Venue* _this = reinterpret_cast< Venue* >(object);
  (void)_this;
}
void Venue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Venue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Venue& Venue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Venue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Venue::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Venue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      location_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      venue_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      venue_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      venue_room_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(territory_code_ != nullptr);
      territory_code_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Venue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string location_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_location_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Venue.location_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.AllTerritoryCode territory_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string venue_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_venue_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Venue.venue_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string venue_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_venue_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Venue.venue_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string venue_room = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_venue_room();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Venue.venue_room");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Venue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Venue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string location_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_location_code().data(), static_cast<int>(this->_internal_location_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Venue.location_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_location_code(), target);
  }

  // optional .mead101.mead.AllTerritoryCode territory_code = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::territory_code(this), target, stream);
  }

  // optional string venue_address = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_venue_address().data(), static_cast<int>(this->_internal_venue_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Venue.venue_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_venue_address(), target);
  }

  // optional string venue_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_venue_name().data(), static_cast<int>(this->_internal_venue_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Venue.venue_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_venue_name(), target);
  }

  // optional string venue_room = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_venue_room().data(), static_cast<int>(this->_internal_venue_room().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Venue.venue_room");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_venue_room(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Venue)
  return target;
}

size_t Venue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Venue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string location_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_location_code());
    }

    // optional string venue_address = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_venue_address());
    }

    // optional string venue_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_venue_name());
    }

    // optional string venue_room = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_venue_room());
    }

    // optional .mead101.mead.AllTerritoryCode territory_code = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *territory_code_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Venue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Venue)
  GOOGLE_DCHECK_NE(&from, this);
  const Venue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Venue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Venue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Venue)
    MergeFrom(*source);
  }
}

void Venue::MergeFrom(const Venue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Venue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_location_code(from._internal_location_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_venue_address(from._internal_venue_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_venue_name(from._internal_venue_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_venue_room(from._internal_venue_room());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_territory_code()->::mead101::mead::AllTerritoryCode::MergeFrom(from._internal_territory_code());
    }
  }
}

void Venue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Venue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Venue::CopyFrom(const Venue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Venue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Venue::IsInitialized() const {
  return true;
}

void Venue::InternalSwap(Venue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  location_code_.Swap(&other->location_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  venue_address_.Swap(&other->venue_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  venue_name_.Swap(&other->venue_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  venue_room_.Swap(&other->venue_room_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(territory_code_, other->territory_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Venue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VocalRegister::InitAsDefaultInstance() {
  ::mead101::mead::_VocalRegister_default_instance_._instance.get_mutable()->value_ = const_cast< ::mead101::mead::VocalRegisterValue*>(
      ::mead101::mead::VocalRegisterValue::internal_default_instance());
}
class VocalRegister::_Internal {
 public:
  using HasBits = decltype(std::declval<VocalRegister>()._has_bits_);
  static const ::mead101::mead::VocalRegisterValue& value(const VocalRegister* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mead101::mead::VocalRegisterValue&
VocalRegister::_Internal::value(const VocalRegister* msg) {
  return *msg->value_;
}
VocalRegister::VocalRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_source_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.VocalRegister)
}
VocalRegister::VocalRegister(const VocalRegister& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metadata_source_reference_(from.metadata_source_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::mead101::mead::VocalRegisterValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.VocalRegister)
}

void VocalRegister::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VocalRegister_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  value_ = nullptr;
}

VocalRegister::~VocalRegister() {
  // @@protoc_insertion_point(destructor:mead101.mead.VocalRegister)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VocalRegister::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void VocalRegister::ArenaDtor(void* object) {
  VocalRegister* _this = reinterpret_cast< VocalRegister* >(object);
  (void)_this;
}
void VocalRegister::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VocalRegister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VocalRegister& VocalRegister::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VocalRegister_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void VocalRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.VocalRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_source_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(value_ != nullptr);
    value_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VocalRegister::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string metadata_source_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.VocalRegister.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.VocalRegisterValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VocalRegister::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.VocalRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.VocalRegister.metadata_source_reference");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.VocalRegisterValue value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.VocalRegister)
  return target;
}

size_t VocalRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.VocalRegister)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata_source_reference = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // optional .mead101.mead.VocalRegisterValue value = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VocalRegister::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.VocalRegister)
  GOOGLE_DCHECK_NE(&from, this);
  const VocalRegister* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VocalRegister>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.VocalRegister)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.VocalRegister)
    MergeFrom(*source);
  }
}

void VocalRegister::MergeFrom(const VocalRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.VocalRegister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  if (from._internal_has_value()) {
    _internal_mutable_value()->::mead101::mead::VocalRegisterValue::MergeFrom(from._internal_value());
  }
}

void VocalRegister::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.VocalRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VocalRegister::CopyFrom(const VocalRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.VocalRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VocalRegister::IsInitialized() const {
  return true;
}

void VocalRegister::InternalSwap(VocalRegister* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VocalRegister::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VocalRegisterValue::InitAsDefaultInstance() {
  ::mead101::mead::_VocalRegisterValue_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::VocalRegister*>(
      ::mead101::avs::VocalRegister::internal_default_instance());
}
class VocalRegisterValue::_Internal {
 public:
  using HasBits = decltype(std::declval<VocalRegisterValue>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::VocalRegister& ext_value(const VocalRegisterValue* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::VocalRegister&
VocalRegisterValue::_Internal::ext_value(const VocalRegisterValue* msg) {
  return *msg->ext_value_;
}
void VocalRegisterValue::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
VocalRegisterValue::VocalRegisterValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.VocalRegisterValue)
}
VocalRegisterValue::VocalRegisterValue(const VocalRegisterValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::VocalRegister(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.VocalRegisterValue)
}

void VocalRegisterValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VocalRegisterValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

VocalRegisterValue::~VocalRegisterValue() {
  // @@protoc_insertion_point(destructor:mead101.mead.VocalRegisterValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VocalRegisterValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void VocalRegisterValue::ArenaDtor(void* object) {
  VocalRegisterValue* _this = reinterpret_cast< VocalRegisterValue* >(object);
  (void)_this;
}
void VocalRegisterValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VocalRegisterValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VocalRegisterValue& VocalRegisterValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VocalRegisterValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void VocalRegisterValue::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.VocalRegisterValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VocalRegisterValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.VocalRegisterValue.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.VocalRegisterValue.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.VocalRegister ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VocalRegisterValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.VocalRegisterValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.VocalRegisterValue.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.VocalRegisterValue.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.VocalRegister ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.VocalRegisterValue)
  return target;
}

size_t VocalRegisterValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.VocalRegisterValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.VocalRegister ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VocalRegisterValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.VocalRegisterValue)
  GOOGLE_DCHECK_NE(&from, this);
  const VocalRegisterValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VocalRegisterValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.VocalRegisterValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.VocalRegisterValue)
    MergeFrom(*source);
  }
}

void VocalRegisterValue::MergeFrom(const VocalRegisterValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.VocalRegisterValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::VocalRegister::MergeFrom(from._internal_ext_value());
    }
  }
}

void VocalRegisterValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.VocalRegisterValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VocalRegisterValue::CopyFrom(const VocalRegisterValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.VocalRegisterValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VocalRegisterValue::IsInitialized() const {
  return true;
}

void VocalRegisterValue::InternalSwap(VocalRegisterValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VocalRegisterValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Work::InitAsDefaultInstance() {
}
class Work::_Internal {
 public:
  using HasBits = decltype(std::declval<Work>()._has_bits_);
  static void set_has_i_s_w_c(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_proprietary_work_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Work::Work(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  work_title_(arena),
  writer_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.Work)
}
Work::Work(const Work& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      work_title_(from.work_title_),
      writer_(from.writer_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  i_s_w_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_w_c()) {
    i_s_w_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_w_c(),
      GetArena());
  }
  proprietary_work_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_proprietary_work_id()) {
    proprietary_work_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_proprietary_work_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.Work)
}

void Work::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Work_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  i_s_w_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proprietary_work_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Work::~Work() {
  // @@protoc_insertion_point(destructor:mead101.mead.Work)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Work::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  i_s_w_c_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proprietary_work_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Work::ArenaDtor(void* object) {
  Work* _this = reinterpret_cast< Work* >(object);
  (void)_this;
}
void Work::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Work::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Work& Work::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Work_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void Work::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.Work)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  work_title_.Clear();
  writer_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      i_s_w_c_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      proprietary_work_id_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Work::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string i_s_w_c = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_i_s_w_c();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Work.i_s_w_c");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string proprietary_work_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_proprietary_work_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.Work.proprietary_work_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.WorkTitle work_title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_work_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.PartyWithNames writer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_writer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Work::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.Work)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string i_s_w_c = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_w_c().data(), static_cast<int>(this->_internal_i_s_w_c().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Work.i_s_w_c");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_i_s_w_c(), target);
  }

  // optional string proprietary_work_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proprietary_work_id().data(), static_cast<int>(this->_internal_proprietary_work_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.Work.proprietary_work_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_proprietary_work_id(), target);
  }

  // repeated .mead101.mead.WorkTitle work_title = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_work_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_work_title(i), target, stream);
  }

  // repeated .mead101.mead.PartyWithNames writer = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_writer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_writer(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.Work)
  return target;
}

size_t Work::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.Work)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.WorkTitle work_title = 3;
  total_size += 1UL * this->_internal_work_title_size();
  for (const auto& msg : this->work_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.PartyWithNames writer = 4;
  total_size += 1UL * this->_internal_writer_size();
  for (const auto& msg : this->writer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string i_s_w_c = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_w_c());
    }

    // optional string proprietary_work_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proprietary_work_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Work::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.Work)
  GOOGLE_DCHECK_NE(&from, this);
  const Work* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Work>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.Work)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.Work)
    MergeFrom(*source);
  }
}

void Work::MergeFrom(const Work& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.Work)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  work_title_.MergeFrom(from.work_title_);
  writer_.MergeFrom(from.writer_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_i_s_w_c(from._internal_i_s_w_c());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_proprietary_work_id(from._internal_proprietary_work_id());
    }
  }
}

void Work::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.Work)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Work::CopyFrom(const Work& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.Work)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Work::IsInitialized() const {
  return true;
}

void Work::InternalSwap(Work* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  work_title_.InternalSwap(&other->work_title_);
  writer_.InternalSwap(&other->writer_);
  i_s_w_c_.Swap(&other->i_s_w_c_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proprietary_work_id_.Swap(&other->proprietary_work_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Work::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkHierarchy::InitAsDefaultInstance() {
  ::mead101::mead::_WorkHierarchy_default_instance_._instance.get_mutable()->form_ = const_cast< ::mead101::mead::Form*>(
      ::mead101::mead::Form::internal_default_instance());
  ::mead101::mead::_WorkHierarchy_default_instance_._instance.get_mutable()->work_id_ = const_cast< ::mead101::mead::MusicalWorkId*>(
      ::mead101::mead::MusicalWorkId::internal_default_instance());
}
class WorkHierarchy::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkHierarchy>()._has_bits_);
  static const ::mead101::mead::Form& form(const WorkHierarchy* msg);
  static void set_has_form(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_complete(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_described_element(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mead101::mead::MusicalWorkId& work_id(const WorkHierarchy* msg);
  static void set_has_work_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mead101::mead::Form&
WorkHierarchy::_Internal::form(const WorkHierarchy* msg) {
  return *msg->form_;
}
const ::mead101::mead::MusicalWorkId&
WorkHierarchy::_Internal::work_id(const WorkHierarchy* msg) {
  return *msg->work_id_;
}
WorkHierarchy::WorkHierarchy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  child_(arena),
  metadata_source_reference_(arena),
  work_title_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.WorkHierarchy)
}
WorkHierarchy::WorkHierarchy(const WorkHierarchy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      child_(from.child_),
      metadata_source_reference_(from.metadata_source_reference_),
      work_title_(from.work_title_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_form()) {
    form_ = new ::mead101::mead::Form(*from.form_);
  } else {
    form_ = nullptr;
  }
  if (from._internal_has_work_id()) {
    work_id_ = new ::mead101::mead::MusicalWorkId(*from.work_id_);
  } else {
    work_id_ = nullptr;
  }
  ::memcpy(&is_complete_, &from.is_complete_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&is_complete_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:mead101.mead.WorkHierarchy)
}

void WorkHierarchy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkHierarchy_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  ::memset(&form_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&form_)) + sizeof(sequence_number_));
}

WorkHierarchy::~WorkHierarchy() {
  // @@protoc_insertion_point(destructor:mead101.mead.WorkHierarchy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkHierarchy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete form_;
  if (this != internal_default_instance()) delete work_id_;
}

void WorkHierarchy::ArenaDtor(void* object) {
  WorkHierarchy* _this = reinterpret_cast< WorkHierarchy* >(object);
  (void)_this;
}
void WorkHierarchy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkHierarchy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkHierarchy& WorkHierarchy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkHierarchy_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void WorkHierarchy::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.WorkHierarchy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  child_.Clear();
  metadata_source_reference_.Clear();
  work_title_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(form_ != nullptr);
      form_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(work_id_ != nullptr);
      work_id_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&is_complete_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_number_) -
        reinterpret_cast<char*>(&is_complete_)) + sizeof(sequence_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkHierarchy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.ChildWorkHierarchy child = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_child(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Form form = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_form(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_complete = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_complete(&has_bits);
          is_complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_described_element = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_described_element(&has_bits);
          is_described_element_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string metadata_source_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadata_source_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.WorkHierarchy.metadata_source_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 sequence_number = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.MusicalWorkId work_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_work_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.WorkTitle work_title = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_work_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkHierarchy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.WorkHierarchy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.ChildWorkHierarchy child = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_child_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_child(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.Form form = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::form(this), target, stream);
  }

  // optional bool is_complete = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_complete(), target);
  }

  // optional bool is_described_element = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_described_element(), target);
  }

  // repeated string metadata_source_reference = 5;
  for (int i = 0, n = this->_internal_metadata_source_reference_size(); i < n; i++) {
    const auto& s = this->_internal_metadata_source_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.WorkHierarchy.metadata_source_reference");
    target = stream->WriteString(5, s, target);
  }

  // optional int32 sequence_number = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_sequence_number(), target);
  }

  // optional .mead101.mead.MusicalWorkId work_id = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::work_id(this), target, stream);
  }

  // repeated .mead101.mead.WorkTitle work_title = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_work_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_work_title(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.WorkHierarchy)
  return target;
}

size_t WorkHierarchy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.WorkHierarchy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.ChildWorkHierarchy child = 1;
  total_size += 1UL * this->_internal_child_size();
  for (const auto& msg : this->child_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metadata_source_reference = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metadata_source_reference_.size());
  for (int i = 0, n = metadata_source_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metadata_source_reference_.Get(i));
  }

  // repeated .mead101.mead.WorkTitle work_title = 8;
  total_size += 1UL * this->_internal_work_title_size();
  for (const auto& msg : this->work_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .mead101.mead.Form form = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *form_);
    }

    // optional .mead101.mead.MusicalWorkId work_id = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *work_id_);
    }

    // optional bool is_complete = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_described_element = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 sequence_number = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sequence_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkHierarchy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.WorkHierarchy)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkHierarchy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkHierarchy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.WorkHierarchy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.WorkHierarchy)
    MergeFrom(*source);
  }
}

void WorkHierarchy::MergeFrom(const WorkHierarchy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.WorkHierarchy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  child_.MergeFrom(from.child_);
  metadata_source_reference_.MergeFrom(from.metadata_source_reference_);
  work_title_.MergeFrom(from.work_title_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_form()->::mead101::mead::Form::MergeFrom(from._internal_form());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_work_id()->::mead101::mead::MusicalWorkId::MergeFrom(from._internal_work_id());
    }
    if (cached_has_bits & 0x00000004u) {
      is_complete_ = from.is_complete_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_described_element_ = from.is_described_element_;
    }
    if (cached_has_bits & 0x00000010u) {
      sequence_number_ = from.sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WorkHierarchy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.WorkHierarchy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkHierarchy::CopyFrom(const WorkHierarchy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.WorkHierarchy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkHierarchy::IsInitialized() const {
  return true;
}

void WorkHierarchy::InternalSwap(WorkHierarchy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  child_.InternalSwap(&other->child_);
  metadata_source_reference_.InternalSwap(&other->metadata_source_reference_);
  work_title_.InternalSwap(&other->work_title_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkHierarchy, sequence_number_)
      + sizeof(WorkHierarchy::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(WorkHierarchy, form_)>(
          reinterpret_cast<char*>(&form_),
          reinterpret_cast<char*>(&other->form_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkHierarchy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkInformation::InitAsDefaultInstance() {
  ::mead101::mead::_WorkInformation_default_instance_._instance.get_mutable()->classical_period_ = const_cast< ::mead101::mead::ClassicalPeriod*>(
      ::mead101::mead::ClassicalPeriod::internal_default_instance());
  ::mead101::mead::_WorkInformation_default_instance_._instance.get_mutable()->form_ = const_cast< ::mead101::mead::Form*>(
      ::mead101::mead::Form::internal_default_instance());
  ::mead101::mead::_WorkInformation_default_instance_._instance.get_mutable()->harmony_ = const_cast< ::mead101::mead::Harmony*>(
      ::mead101::mead::Harmony::internal_default_instance());
  ::mead101::mead::_WorkInformation_default_instance_._instance.get_mutable()->sub_genre_category_ = const_cast< ::mead101::mead::SubGenreCategory*>(
      ::mead101::mead::SubGenreCategory::internal_default_instance());
  ::mead101::mead::_WorkInformation_default_instance_._instance.get_mutable()->time_signature_ = const_cast< ::mead101::mead::TimeSignature*>(
      ::mead101::mead::TimeSignature::internal_default_instance());
  ::mead101::mead::_WorkInformation_default_instance_._instance.get_mutable()->vocal_register_ = const_cast< ::mead101::mead::VocalRegister*>(
      ::mead101::mead::VocalRegister::internal_default_instance());
  ::mead101::mead::_WorkInformation_default_instance_._instance.get_mutable()->work_summary_ = const_cast< ::mead101::mead::WorkSummary*>(
      ::mead101::mead::WorkSummary::internal_default_instance());
}
class WorkInformation::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkInformation>()._has_bits_);
  static const ::mead101::mead::ClassicalPeriod& classical_period(const WorkInformation* msg);
  static void set_has_classical_period(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::mead::Form& form(const WorkInformation* msg);
  static void set_has_form(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mead101::mead::Harmony& harmony(const WorkInformation* msg);
  static void set_has_harmony(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_musical_work_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mead101::mead::SubGenreCategory& sub_genre_category(const WorkInformation* msg);
  static void set_has_sub_genre_category(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mead101::mead::TimeSignature& time_signature(const WorkInformation* msg);
  static void set_has_time_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::mead101::mead::VocalRegister& vocal_register(const WorkInformation* msg);
  static void set_has_vocal_register(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::mead101::mead::WorkSummary& work_summary(const WorkInformation* msg);
  static void set_has_work_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::mead101::mead::ClassicalPeriod&
WorkInformation::_Internal::classical_period(const WorkInformation* msg) {
  return *msg->classical_period_;
}
const ::mead101::mead::Form&
WorkInformation::_Internal::form(const WorkInformation* msg) {
  return *msg->form_;
}
const ::mead101::mead::Harmony&
WorkInformation::_Internal::harmony(const WorkInformation* msg) {
  return *msg->harmony_;
}
const ::mead101::mead::SubGenreCategory&
WorkInformation::_Internal::sub_genre_category(const WorkInformation* msg) {
  return *msg->sub_genre_category_;
}
const ::mead101::mead::TimeSignature&
WorkInformation::_Internal::time_signature(const WorkInformation* msg) {
  return *msg->time_signature_;
}
const ::mead101::mead::VocalRegister&
WorkInformation::_Internal::vocal_register(const WorkInformation* msg) {
  return *msg->vocal_register_;
}
const ::mead101::mead::WorkSummary&
WorkInformation::_Internal::work_summary(const WorkInformation* msg) {
  return *msg->work_summary_;
}
WorkInformation::WorkInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  alternative_title_(arena),
  artistic_influence_(arena),
  award_(arena),
  commentary_note_(arena),
  dance_and_rhythm_style_(arena),
  derived_recording_(arena),
  epoch_(arena),
  is_similar_(arena),
  lyrics_(arena),
  lyrics_mood_(arena),
  related_work_(arena),
  target_instrument_(arena),
  theme_(arena),
  work_hierarchy_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.WorkInformation)
}
WorkInformation::WorkInformation(const WorkInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      alternative_title_(from.alternative_title_),
      artistic_influence_(from.artistic_influence_),
      award_(from.award_),
      commentary_note_(from.commentary_note_),
      dance_and_rhythm_style_(from.dance_and_rhythm_style_),
      derived_recording_(from.derived_recording_),
      epoch_(from.epoch_),
      is_similar_(from.is_similar_),
      lyrics_(from.lyrics_),
      lyrics_mood_(from.lyrics_mood_),
      related_work_(from.related_work_),
      target_instrument_(from.target_instrument_),
      theme_(from.theme_),
      work_hierarchy_(from.work_hierarchy_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  musical_work_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_musical_work_reference()) {
    musical_work_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_musical_work_reference(),
      GetArena());
  }
  if (from._internal_has_classical_period()) {
    classical_period_ = new ::mead101::mead::ClassicalPeriod(*from.classical_period_);
  } else {
    classical_period_ = nullptr;
  }
  if (from._internal_has_form()) {
    form_ = new ::mead101::mead::Form(*from.form_);
  } else {
    form_ = nullptr;
  }
  if (from._internal_has_harmony()) {
    harmony_ = new ::mead101::mead::Harmony(*from.harmony_);
  } else {
    harmony_ = nullptr;
  }
  if (from._internal_has_sub_genre_category()) {
    sub_genre_category_ = new ::mead101::mead::SubGenreCategory(*from.sub_genre_category_);
  } else {
    sub_genre_category_ = nullptr;
  }
  if (from._internal_has_time_signature()) {
    time_signature_ = new ::mead101::mead::TimeSignature(*from.time_signature_);
  } else {
    time_signature_ = nullptr;
  }
  if (from._internal_has_vocal_register()) {
    vocal_register_ = new ::mead101::mead::VocalRegister(*from.vocal_register_);
  } else {
    vocal_register_ = nullptr;
  }
  if (from._internal_has_work_summary()) {
    work_summary_ = new ::mead101::mead::WorkSummary(*from.work_summary_);
  } else {
    work_summary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.WorkInformation)
}

void WorkInformation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  musical_work_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&classical_period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&work_summary_) -
      reinterpret_cast<char*>(&classical_period_)) + sizeof(work_summary_));
}

WorkInformation::~WorkInformation() {
  // @@protoc_insertion_point(destructor:mead101.mead.WorkInformation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  musical_work_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete classical_period_;
  if (this != internal_default_instance()) delete form_;
  if (this != internal_default_instance()) delete harmony_;
  if (this != internal_default_instance()) delete sub_genre_category_;
  if (this != internal_default_instance()) delete time_signature_;
  if (this != internal_default_instance()) delete vocal_register_;
  if (this != internal_default_instance()) delete work_summary_;
}

void WorkInformation::ArenaDtor(void* object) {
  WorkInformation* _this = reinterpret_cast< WorkInformation* >(object);
  (void)_this;
}
void WorkInformation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkInformation& WorkInformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkInformation_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void WorkInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.WorkInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alternative_title_.Clear();
  artistic_influence_.Clear();
  award_.Clear();
  commentary_note_.Clear();
  dance_and_rhythm_style_.Clear();
  derived_recording_.Clear();
  epoch_.Clear();
  is_similar_.Clear();
  lyrics_.Clear();
  lyrics_mood_.Clear();
  related_work_.Clear();
  target_instrument_.Clear();
  theme_.Clear();
  work_hierarchy_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      musical_work_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(classical_period_ != nullptr);
      classical_period_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(form_ != nullptr);
      form_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(harmony_ != nullptr);
      harmony_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(sub_genre_category_ != nullptr);
      sub_genre_category_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(time_signature_ != nullptr);
      time_signature_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(vocal_register_ != nullptr);
      vocal_register_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(work_summary_ != nullptr);
      work_summary_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.AlternativeTitle alternative_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alternative_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.ArtisticInfluence artistic_influence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_artistic_influence(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Award award = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_award(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.ClassicalPeriod classical_period = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_classical_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.CommentaryNote commentary_note = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commentary_note(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.DanceAndRhythmStyle dance_and_rhythm_style = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dance_and_rhythm_style(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.DerivedRecording derived_recording = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_derived_recording(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Epoch epoch = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_epoch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Form form = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_form(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.Harmony harmony = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_harmony(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.SimilarWork is_similar = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_is_similar(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Lyrics lyrics = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lyrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Mood lyrics_mood = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lyrics_mood(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string musical_work_reference = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_musical_work_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.WorkInformation.musical_work_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.RelatedWork related_work = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_related_work(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.SubGenreCategory sub_genre_category = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_genre_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Instrument target_instrument = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_target_instrument(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.Theme theme = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_theme(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.TimeSignature time_signature = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.VocalRegister vocal_register = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_vocal_register(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.WorkHierarchy work_hierarchy = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_work_hierarchy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mead101.mead.WorkSummary work_summary = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_work_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkInformation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.WorkInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.AlternativeTitle alternative_title = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_alternative_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_alternative_title(i), target, stream);
  }

  // repeated .mead101.mead.ArtisticInfluence artistic_influence = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_artistic_influence_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_artistic_influence(i), target, stream);
  }

  // repeated .mead101.mead.Award award = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_award_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_award(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.ClassicalPeriod classical_period = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::classical_period(this), target, stream);
  }

  // repeated .mead101.mead.CommentaryNote commentary_note = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_commentary_note_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_commentary_note(i), target, stream);
  }

  // repeated .mead101.mead.DanceAndRhythmStyle dance_and_rhythm_style = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dance_and_rhythm_style_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_dance_and_rhythm_style(i), target, stream);
  }

  // repeated .mead101.mead.DerivedRecording derived_recording = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_derived_recording_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_derived_recording(i), target, stream);
  }

  // repeated .mead101.mead.Epoch epoch = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_epoch_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_epoch(i), target, stream);
  }

  // optional .mead101.mead.Form form = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::form(this), target, stream);
  }

  // optional .mead101.mead.Harmony harmony = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::harmony(this), target, stream);
  }

  // repeated .mead101.mead.SimilarWork is_similar = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_is_similar_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_is_similar(i), target, stream);
  }

  // repeated .mead101.mead.Lyrics lyrics = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lyrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_lyrics(i), target, stream);
  }

  // repeated .mead101.mead.Mood lyrics_mood = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lyrics_mood_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_lyrics_mood(i), target, stream);
  }

  // optional string musical_work_reference = 14;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_musical_work_reference().data(), static_cast<int>(this->_internal_musical_work_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.WorkInformation.musical_work_reference");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_musical_work_reference(), target);
  }

  // repeated .mead101.mead.RelatedWork related_work = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_related_work_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_related_work(i), target, stream);
  }

  // optional .mead101.mead.SubGenreCategory sub_genre_category = 16;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::sub_genre_category(this), target, stream);
  }

  // repeated .mead101.mead.Instrument target_instrument = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_target_instrument_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_target_instrument(i), target, stream);
  }

  // repeated .mead101.mead.Theme theme = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_theme_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_theme(i), target, stream);
  }

  // optional .mead101.mead.TimeSignature time_signature = 19;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::time_signature(this), target, stream);
  }

  // optional .mead101.mead.VocalRegister vocal_register = 20;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::vocal_register(this), target, stream);
  }

  // repeated .mead101.mead.WorkHierarchy work_hierarchy = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_work_hierarchy_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_work_hierarchy(i), target, stream);
  }

  // optional .mead101.mead.WorkSummary work_summary = 22;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::work_summary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.WorkInformation)
  return target;
}

size_t WorkInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.WorkInformation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.AlternativeTitle alternative_title = 1;
  total_size += 1UL * this->_internal_alternative_title_size();
  for (const auto& msg : this->alternative_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.ArtisticInfluence artistic_influence = 2;
  total_size += 1UL * this->_internal_artistic_influence_size();
  for (const auto& msg : this->artistic_influence_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Award award = 3;
  total_size += 1UL * this->_internal_award_size();
  for (const auto& msg : this->award_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.CommentaryNote commentary_note = 5;
  total_size += 1UL * this->_internal_commentary_note_size();
  for (const auto& msg : this->commentary_note_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.DanceAndRhythmStyle dance_and_rhythm_style = 6;
  total_size += 1UL * this->_internal_dance_and_rhythm_style_size();
  for (const auto& msg : this->dance_and_rhythm_style_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.DerivedRecording derived_recording = 7;
  total_size += 1UL * this->_internal_derived_recording_size();
  for (const auto& msg : this->derived_recording_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Epoch epoch = 8;
  total_size += 1UL * this->_internal_epoch_size();
  for (const auto& msg : this->epoch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.SimilarWork is_similar = 11;
  total_size += 1UL * this->_internal_is_similar_size();
  for (const auto& msg : this->is_similar_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Lyrics lyrics = 12;
  total_size += 1UL * this->_internal_lyrics_size();
  for (const auto& msg : this->lyrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Mood lyrics_mood = 13;
  total_size += 1UL * this->_internal_lyrics_mood_size();
  for (const auto& msg : this->lyrics_mood_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.RelatedWork related_work = 15;
  total_size += 1UL * this->_internal_related_work_size();
  for (const auto& msg : this->related_work_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Instrument target_instrument = 17;
  total_size += 2UL * this->_internal_target_instrument_size();
  for (const auto& msg : this->target_instrument_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.Theme theme = 18;
  total_size += 2UL * this->_internal_theme_size();
  for (const auto& msg : this->theme_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.WorkHierarchy work_hierarchy = 21;
  total_size += 2UL * this->_internal_work_hierarchy_size();
  for (const auto& msg : this->work_hierarchy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string musical_work_reference = 14;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_musical_work_reference());
    }

    // optional .mead101.mead.ClassicalPeriod classical_period = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classical_period_);
    }

    // optional .mead101.mead.Form form = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *form_);
    }

    // optional .mead101.mead.Harmony harmony = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *harmony_);
    }

    // optional .mead101.mead.SubGenreCategory sub_genre_category = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sub_genre_category_);
    }

    // optional .mead101.mead.TimeSignature time_signature = 19;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_signature_);
    }

    // optional .mead101.mead.VocalRegister vocal_register = 20;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vocal_register_);
    }

    // optional .mead101.mead.WorkSummary work_summary = 22;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *work_summary_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkInformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.WorkInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkInformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkInformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.WorkInformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.WorkInformation)
    MergeFrom(*source);
  }
}

void WorkInformation::MergeFrom(const WorkInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.WorkInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alternative_title_.MergeFrom(from.alternative_title_);
  artistic_influence_.MergeFrom(from.artistic_influence_);
  award_.MergeFrom(from.award_);
  commentary_note_.MergeFrom(from.commentary_note_);
  dance_and_rhythm_style_.MergeFrom(from.dance_and_rhythm_style_);
  derived_recording_.MergeFrom(from.derived_recording_);
  epoch_.MergeFrom(from.epoch_);
  is_similar_.MergeFrom(from.is_similar_);
  lyrics_.MergeFrom(from.lyrics_);
  lyrics_mood_.MergeFrom(from.lyrics_mood_);
  related_work_.MergeFrom(from.related_work_);
  target_instrument_.MergeFrom(from.target_instrument_);
  theme_.MergeFrom(from.theme_);
  work_hierarchy_.MergeFrom(from.work_hierarchy_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_musical_work_reference(from._internal_musical_work_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_classical_period()->::mead101::mead::ClassicalPeriod::MergeFrom(from._internal_classical_period());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_form()->::mead101::mead::Form::MergeFrom(from._internal_form());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_harmony()->::mead101::mead::Harmony::MergeFrom(from._internal_harmony());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_sub_genre_category()->::mead101::mead::SubGenreCategory::MergeFrom(from._internal_sub_genre_category());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_time_signature()->::mead101::mead::TimeSignature::MergeFrom(from._internal_time_signature());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_vocal_register()->::mead101::mead::VocalRegister::MergeFrom(from._internal_vocal_register());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_work_summary()->::mead101::mead::WorkSummary::MergeFrom(from._internal_work_summary());
    }
  }
}

void WorkInformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.WorkInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkInformation::CopyFrom(const WorkInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.WorkInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkInformation::IsInitialized() const {
  return true;
}

void WorkInformation::InternalSwap(WorkInformation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  alternative_title_.InternalSwap(&other->alternative_title_);
  artistic_influence_.InternalSwap(&other->artistic_influence_);
  award_.InternalSwap(&other->award_);
  commentary_note_.InternalSwap(&other->commentary_note_);
  dance_and_rhythm_style_.InternalSwap(&other->dance_and_rhythm_style_);
  derived_recording_.InternalSwap(&other->derived_recording_);
  epoch_.InternalSwap(&other->epoch_);
  is_similar_.InternalSwap(&other->is_similar_);
  lyrics_.InternalSwap(&other->lyrics_);
  lyrics_mood_.InternalSwap(&other->lyrics_mood_);
  related_work_.InternalSwap(&other->related_work_);
  target_instrument_.InternalSwap(&other->target_instrument_);
  theme_.InternalSwap(&other->theme_);
  work_hierarchy_.InternalSwap(&other->work_hierarchy_);
  musical_work_reference_.Swap(&other->musical_work_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkInformation, work_summary_)
      + sizeof(WorkInformation::work_summary_)
      - PROTOBUF_FIELD_OFFSET(WorkInformation, classical_period_)>(
          reinterpret_cast<char*>(&classical_period_),
          reinterpret_cast<char*>(&other->classical_period_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkInformation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkInformationList::InitAsDefaultInstance() {
}
class WorkInformationList::_Internal {
 public:
};

WorkInformationList::WorkInformationList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  work_information_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.WorkInformationList)
}
WorkInformationList::WorkInformationList(const WorkInformationList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      work_information_(from.work_information_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mead101.mead.WorkInformationList)
}

void WorkInformationList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
}

WorkInformationList::~WorkInformationList() {
  // @@protoc_insertion_point(destructor:mead101.mead.WorkInformationList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkInformationList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WorkInformationList::ArenaDtor(void* object) {
  WorkInformationList* _this = reinterpret_cast< WorkInformationList* >(object);
  (void)_this;
}
void WorkInformationList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkInformationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkInformationList& WorkInformationList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkInformationList_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void WorkInformationList::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.WorkInformationList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  work_information_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkInformationList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mead101.mead.WorkInformation work_information = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_work_information(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkInformationList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.WorkInformationList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mead101.mead.WorkInformation work_information = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_work_information_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_work_information(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.WorkInformationList)
  return target;
}

size_t WorkInformationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.WorkInformationList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.WorkInformation work_information = 1;
  total_size += 1UL * this->_internal_work_information_size();
  for (const auto& msg : this->work_information_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkInformationList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.WorkInformationList)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkInformationList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkInformationList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.WorkInformationList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.WorkInformationList)
    MergeFrom(*source);
  }
}

void WorkInformationList::MergeFrom(const WorkInformationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.WorkInformationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  work_information_.MergeFrom(from.work_information_);
}

void WorkInformationList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.WorkInformationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkInformationList::CopyFrom(const WorkInformationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.WorkInformationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkInformationList::IsInitialized() const {
  return true;
}

void WorkInformationList::InternalSwap(WorkInformationList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  work_information_.InternalSwap(&other->work_information_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkInformationList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkRelationshipType::InitAsDefaultInstance() {
  ::mead101::mead::_WorkRelationshipType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::mead101::avs::WorkRelationshipType*>(
      ::mead101::avs::WorkRelationshipType::internal_default_instance());
}
class WorkRelationshipType::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkRelationshipType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mead101::avs::WorkRelationshipType& ext_value(const WorkRelationshipType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mead101::avs::WorkRelationshipType&
WorkRelationshipType::_Internal::ext_value(const WorkRelationshipType* msg) {
  return *msg->ext_value_;
}
void WorkRelationshipType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
WorkRelationshipType::WorkRelationshipType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.WorkRelationshipType)
}
WorkRelationshipType::WorkRelationshipType(const WorkRelationshipType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::mead101::avs::WorkRelationshipType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.WorkRelationshipType)
}

void WorkRelationshipType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

WorkRelationshipType::~WorkRelationshipType() {
  // @@protoc_insertion_point(destructor:mead101.mead.WorkRelationshipType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkRelationshipType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void WorkRelationshipType::ArenaDtor(void* object) {
  WorkRelationshipType* _this = reinterpret_cast< WorkRelationshipType* >(object);
  (void)_this;
}
void WorkRelationshipType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkRelationshipType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkRelationshipType& WorkRelationshipType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void WorkRelationshipType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.WorkRelationshipType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkRelationshipType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.WorkRelationshipType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.WorkRelationshipType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mead101.avs.WorkRelationshipType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkRelationshipType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.WorkRelationshipType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.WorkRelationshipType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.WorkRelationshipType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .mead101.avs.WorkRelationshipType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.WorkRelationshipType)
  return target;
}

size_t WorkRelationshipType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.WorkRelationshipType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .mead101.avs.WorkRelationshipType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkRelationshipType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.WorkRelationshipType)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkRelationshipType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkRelationshipType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.WorkRelationshipType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.WorkRelationshipType)
    MergeFrom(*source);
  }
}

void WorkRelationshipType::MergeFrom(const WorkRelationshipType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.WorkRelationshipType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::mead101::avs::WorkRelationshipType::MergeFrom(from._internal_ext_value());
    }
  }
}

void WorkRelationshipType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.WorkRelationshipType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkRelationshipType::CopyFrom(const WorkRelationshipType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.WorkRelationshipType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkRelationshipType::IsInitialized() const {
  return true;
}

void WorkRelationshipType::InternalSwap(WorkRelationshipType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkRelationshipType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkSummary::InitAsDefaultInstance() {
  ::mead101::mead::_WorkSummary_default_instance_._instance.get_mutable()->musical_work_id_ = const_cast< ::mead101::mead::MusicalWorkId*>(
      ::mead101::mead::MusicalWorkId::internal_default_instance());
}
class WorkSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkSummary>()._has_bits_);
  static const ::mead101::mead::MusicalWorkId& musical_work_id(const WorkSummary* msg);
  static void set_has_musical_work_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mead101::mead::MusicalWorkId&
WorkSummary::_Internal::musical_work_id(const WorkSummary* msg) {
  return *msg->musical_work_id_;
}
WorkSummary::WorkSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  work_title_(arena),
  writer_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.WorkSummary)
}
WorkSummary::WorkSummary(const WorkSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      work_title_(from.work_title_),
      writer_(from.writer_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_musical_work_id()) {
    musical_work_id_ = new ::mead101::mead::MusicalWorkId(*from.musical_work_id_);
  } else {
    musical_work_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.WorkSummary)
}

void WorkSummary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  musical_work_id_ = nullptr;
}

WorkSummary::~WorkSummary() {
  // @@protoc_insertion_point(destructor:mead101.mead.WorkSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete musical_work_id_;
}

void WorkSummary::ArenaDtor(void* object) {
  WorkSummary* _this = reinterpret_cast< WorkSummary* >(object);
  (void)_this;
}
void WorkSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkSummary& WorkSummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkSummary_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void WorkSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.WorkSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  work_title_.Clear();
  writer_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(musical_work_id_ != nullptr);
    musical_work_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mead101.mead.MusicalWorkId musical_work_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_musical_work_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.TitleWithPronunciation work_title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_work_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mead101.mead.PartyNameWithTerritory writer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_writer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.WorkSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mead101.mead.MusicalWorkId musical_work_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::musical_work_id(this), target, stream);
  }

  // repeated .mead101.mead.TitleWithPronunciation work_title = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_work_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_work_title(i), target, stream);
  }

  // repeated .mead101.mead.PartyNameWithTerritory writer = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_writer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_writer(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.WorkSummary)
  return target;
}

size_t WorkSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.WorkSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mead101.mead.TitleWithPronunciation work_title = 2;
  total_size += 1UL * this->_internal_work_title_size();
  for (const auto& msg : this->work_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mead101.mead.PartyNameWithTerritory writer = 3;
  total_size += 1UL * this->_internal_writer_size();
  for (const auto& msg : this->writer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .mead101.mead.MusicalWorkId musical_work_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *musical_work_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.WorkSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.WorkSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.WorkSummary)
    MergeFrom(*source);
  }
}

void WorkSummary::MergeFrom(const WorkSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.WorkSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  work_title_.MergeFrom(from.work_title_);
  writer_.MergeFrom(from.writer_);
  if (from._internal_has_musical_work_id()) {
    _internal_mutable_musical_work_id()->::mead101::mead::MusicalWorkId::MergeFrom(from._internal_musical_work_id());
  }
}

void WorkSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.WorkSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkSummary::CopyFrom(const WorkSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.WorkSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkSummary::IsInitialized() const {
  return true;
}

void WorkSummary::InternalSwap(WorkSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  work_title_.InternalSwap(&other->work_title_);
  writer_.InternalSwap(&other->writer_);
  swap(musical_work_id_, other->musical_work_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkTitle::InitAsDefaultInstance() {
}
class WorkTitle::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkTitle>()._has_bits_);
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WorkTitle::WorkTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.WorkTitle)
}
WorkTitle::WorkTitle(const WorkTitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.WorkTitle)
}

void WorkTitle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WorkTitle::~WorkTitle() {
  // @@protoc_insertion_point(destructor:mead101.mead.WorkTitle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkTitle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorkTitle::ArenaDtor(void* object) {
  WorkTitle* _this = reinterpret_cast< WorkTitle* >(object);
  (void)_this;
}
void WorkTitle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkTitle& WorkTitle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkTitle_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void WorkTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.WorkTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkTitle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language_and_script_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.WorkTitle.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.WorkTitle.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkTitle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.WorkTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language_and_script_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.WorkTitle.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language_and_script_code(), target);
  }

  // optional string ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.WorkTitle.ext_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.WorkTitle)
  return target;
}

size_t WorkTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.WorkTitle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string language_and_script_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkTitle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.WorkTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkTitle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkTitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.WorkTitle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.WorkTitle)
    MergeFrom(*source);
  }
}

void WorkTitle::MergeFrom(const WorkTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.WorkTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
  }
}

void WorkTitle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.WorkTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkTitle::CopyFrom(const WorkTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.WorkTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkTitle::IsInitialized() const {
  return true;
}

void WorkTitle::InternalSwap(WorkTitle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkTitle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ddex_IsoDate::InitAsDefaultInstance() {
}
class ddex_IsoDate::_Internal {
 public:
  using HasBits = decltype(std::declval<ddex_IsoDate>()._has_bits_);
  static void set_has_auto_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ddex_IsoDate::ddex_IsoDate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.mead.ddex_IsoDate)
}
ddex_IsoDate::ddex_IsoDate(const ddex_IsoDate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auto_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_auto_value()) {
    auto_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_auto_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.mead.ddex_IsoDate)
}

void ddex_IsoDate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  auto_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ddex_IsoDate::~ddex_IsoDate() {
  // @@protoc_insertion_point(destructor:mead101.mead.ddex_IsoDate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ddex_IsoDate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  auto_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ddex_IsoDate::ArenaDtor(void* object) {
  ddex_IsoDate* _this = reinterpret_cast< ddex_IsoDate* >(object);
  (void)_this;
}
void ddex_IsoDate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ddex_IsoDate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ddex_IsoDate& ddex_IsoDate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.base);
  return *internal_default_instance();
}


void ddex_IsoDate::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.mead.ddex_IsoDate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    auto_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ddex_IsoDate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string auto_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_auto_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.mead.ddex_IsoDate.auto_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ddex_IsoDate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.mead.ddex_IsoDate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string auto_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_auto_value().data(), static_cast<int>(this->_internal_auto_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.mead.ddex_IsoDate.auto_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_auto_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.mead.ddex_IsoDate)
  return target;
}

size_t ddex_IsoDate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.mead.ddex_IsoDate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string auto_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auto_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ddex_IsoDate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.mead.ddex_IsoDate)
  GOOGLE_DCHECK_NE(&from, this);
  const ddex_IsoDate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ddex_IsoDate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.mead.ddex_IsoDate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.mead.ddex_IsoDate)
    MergeFrom(*source);
  }
}

void ddex_IsoDate::MergeFrom(const ddex_IsoDate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.mead.ddex_IsoDate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_auto_value()) {
    _internal_set_auto_value(from._internal_auto_value());
  }
}

void ddex_IsoDate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.mead.ddex_IsoDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ddex_IsoDate::CopyFrom(const ddex_IsoDate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.mead.ddex_IsoDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ddex_IsoDate::IsInitialized() const {
  return true;
}

void ddex_IsoDate::InternalSwap(ddex_IsoDate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  auto_value_.Swap(&other->auto_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ddex_IsoDate::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mead
}  // namespace mead101
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mead101::mead::AbsolutePitch* Arena::CreateMaybeMessage< ::mead101::mead::AbsolutePitch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::AbsolutePitch >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::AllTerritoryCode* Arena::CreateMaybeMessage< ::mead101::mead::AllTerritoryCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::AllTerritoryCode >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::AlternativeTitle* Arena::CreateMaybeMessage< ::mead101::mead::AlternativeTitle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::AlternativeTitle >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Annotation* Arena::CreateMaybeMessage< ::mead101::mead::Annotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Annotation >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ArtistType* Arena::CreateMaybeMessage< ::mead101::mead::ArtistType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ArtistType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ArtistTypeValue* Arena::CreateMaybeMessage< ::mead101::mead::ArtistTypeValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ArtistTypeValue >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ArtisticInfluence* Arena::CreateMaybeMessage< ::mead101::mead::ArtisticInfluence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ArtisticInfluence >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Award* Arena::CreateMaybeMessage< ::mead101::mead::Award >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Award >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::AwardForParty* Arena::CreateMaybeMessage< ::mead101::mead::AwardForParty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::AwardForParty >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::BeatsPerMinute* Arena::CreateMaybeMessage< ::mead101::mead::BeatsPerMinute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::BeatsPerMinute >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Biography* Arena::CreateMaybeMessage< ::mead101::mead::Biography >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Biography >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::BiographyText* Arena::CreateMaybeMessage< ::mead101::mead::BiographyText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::BiographyText >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::CatalogNumber* Arena::CreateMaybeMessage< ::mead101::mead::CatalogNumber >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::CatalogNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Category* Arena::CreateMaybeMessage< ::mead101::mead::Category >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Category >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ChartEntry* Arena::CreateMaybeMessage< ::mead101::mead::ChartEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ChartEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ChartName* Arena::CreateMaybeMessage< ::mead101::mead::ChartName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ChartName >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ChildWorkHierarchy* Arena::CreateMaybeMessage< ::mead101::mead::ChildWorkHierarchy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ChildWorkHierarchy >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ClassicalPeriod* Arena::CreateMaybeMessage< ::mead101::mead::ClassicalPeriod >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ClassicalPeriod >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::CommentaryNote* Arena::CreateMaybeMessage< ::mead101::mead::CommentaryNote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::CommentaryNote >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::CommentaryNoteType* Arena::CreateMaybeMessage< ::mead101::mead::CommentaryNoteType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::CommentaryNoteType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Content* Arena::CreateMaybeMessage< ::mead101::mead::Content >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Content >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::CurrentTerritoryCode* Arena::CreateMaybeMessage< ::mead101::mead::CurrentTerritoryCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::CurrentTerritoryCode >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::DanceAndRhythmStyle* Arena::CreateMaybeMessage< ::mead101::mead::DanceAndRhythmStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::DanceAndRhythmStyle >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::DanceAndRhythmStyleValue* Arena::CreateMaybeMessage< ::mead101::mead::DanceAndRhythmStyleValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::DanceAndRhythmStyleValue >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Date* Arena::CreateMaybeMessage< ::mead101::mead::Date >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Date >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::DateTime* Arena::CreateMaybeMessage< ::mead101::mead::DateTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::DateTime >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::DerivedRecording* Arena::CreateMaybeMessage< ::mead101::mead::DerivedRecording >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::DerivedRecording >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::DetailedHashSum* Arena::CreateMaybeMessage< ::mead101::mead::DetailedHashSum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::DetailedHashSum >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::DetailedPartyId* Arena::CreateMaybeMessage< ::mead101::mead::DetailedPartyId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::DetailedPartyId >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::DisplayArtist* Arena::CreateMaybeMessage< ::mead101::mead::DisplayArtist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::DisplayArtist >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::DisplayArtistNameWithDefault* Arena::CreateMaybeMessage< ::mead101::mead::DisplayArtistNameWithDefault >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::DisplayArtistNameWithDefault >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::DisplayArtistNameWithPronunciation* Arena::CreateMaybeMessage< ::mead101::mead::DisplayArtistNameWithPronunciation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::DisplayArtistNameWithPronunciation >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::DisplaySubTitle* Arena::CreateMaybeMessage< ::mead101::mead::DisplaySubTitle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::DisplaySubTitle >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::DisplayTitle* Arena::CreateMaybeMessage< ::mead101::mead::DisplayTitle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::DisplayTitle >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Duration* Arena::CreateMaybeMessage< ::mead101::mead::Duration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Duration >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Entry* Arena::CreateMaybeMessage< ::mead101::mead::Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Epoch* Arena::CreateMaybeMessage< ::mead101::mead::Epoch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Epoch >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::EventDate* Arena::CreateMaybeMessage< ::mead101::mead::EventDate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::EventDate >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::EventDateTime* Arena::CreateMaybeMessage< ::mead101::mead::EventDateTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::EventDateTime >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::EventDateWithoutFlags* Arena::CreateMaybeMessage< ::mead101::mead::EventDateWithoutFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::EventDateWithoutFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Feed* Arena::CreateMaybeMessage< ::mead101::mead::Feed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Feed >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::File* Arena::CreateMaybeMessage< ::mead101::mead::File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::File >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Flag* Arena::CreateMaybeMessage< ::mead101::mead::Flag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Flag >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::FocusTrack* Arena::CreateMaybeMessage< ::mead101::mead::FocusTrack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::FocusTrack >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Form* Arena::CreateMaybeMessage< ::mead101::mead::Form >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Form >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::FormValue* Arena::CreateMaybeMessage< ::mead101::mead::FormValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::FormValue >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Generator* Arena::CreateMaybeMessage< ::mead101::mead::Generator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Generator >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::GenreCategory* Arena::CreateMaybeMessage< ::mead101::mead::GenreCategory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::GenreCategory >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::GenreCategoryValue* Arena::CreateMaybeMessage< ::mead101::mead::GenreCategoryValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::GenreCategoryValue >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Harmony* Arena::CreateMaybeMessage< ::mead101::mead::Harmony >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Harmony >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::HarmonyModulation* Arena::CreateMaybeMessage< ::mead101::mead::HarmonyModulation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::HarmonyModulation >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::HashSumAlgorithmType* Arena::CreateMaybeMessage< ::mead101::mead::HashSumAlgorithmType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::HashSumAlgorithmType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::HistoricChartingInformation* Arena::CreateMaybeMessage< ::mead101::mead::HistoricChartingInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::HistoricChartingInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::HistoricChartingInformationForParty* Arena::CreateMaybeMessage< ::mead101::mead::HistoricChartingInformationForParty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::HistoricChartingInformationForParty >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Icon* Arena::CreateMaybeMessage< ::mead101::mead::Icon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Icon >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Id* Arena::CreateMaybeMessage< ::mead101::mead::Id >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Id >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Image* Arena::CreateMaybeMessage< ::mead101::mead::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ImageType* Arena::CreateMaybeMessage< ::mead101::mead::ImageType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ImageType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Instrument* Arena::CreateMaybeMessage< ::mead101::mead::Instrument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Instrument >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::InstrumentUsed* Arena::CreateMaybeMessage< ::mead101::mead::InstrumentUsed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::InstrumentUsed >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::InstrumentValue* Arena::CreateMaybeMessage< ::mead101::mead::InstrumentValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::InstrumentValue >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Link* Arena::CreateMaybeMessage< ::mead101::mead::Link >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Link >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::LocationAndDateOfSession* Arena::CreateMaybeMessage< ::mead101::mead::LocationAndDateOfSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::LocationAndDateOfSession >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Logo* Arena::CreateMaybeMessage< ::mead101::mead::Logo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Logo >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Lyrics* Arena::CreateMaybeMessage< ::mead101::mead::Lyrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Lyrics >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::LyricsText* Arena::CreateMaybeMessage< ::mead101::mead::LyricsText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::LyricsText >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::MeadMessage* Arena::CreateMaybeMessage< ::mead101::mead::MeadMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::MeadMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::MessageAuditTrail* Arena::CreateMaybeMessage< ::mead101::mead::MessageAuditTrail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::MessageAuditTrail >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::MessageAuditTrailEvent* Arena::CreateMaybeMessage< ::mead101::mead::MessageAuditTrailEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::MessageAuditTrailEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::MessageHeader* Arena::CreateMaybeMessage< ::mead101::mead::MessageHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::MessageHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::MessagingPartyWithoutCode* Arena::CreateMaybeMessage< ::mead101::mead::MessagingPartyWithoutCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::MessagingPartyWithoutCode >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::MetadataSource* Arena::CreateMaybeMessage< ::mead101::mead::MetadataSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::MetadataSource >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::MetadataSourceList* Arena::CreateMaybeMessage< ::mead101::mead::MetadataSourceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::MetadataSourceList >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::MetadataSourceType* Arena::CreateMaybeMessage< ::mead101::mead::MetadataSourceType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::MetadataSourceType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Meter* Arena::CreateMaybeMessage< ::mead101::mead::Meter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Meter >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Mode* Arena::CreateMaybeMessage< ::mead101::mead::Mode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Mode >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Modulation* Arena::CreateMaybeMessage< ::mead101::mead::Modulation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Modulation >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Mood* Arena::CreateMaybeMessage< ::mead101::mead::Mood >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Mood >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::MoodValue* Arena::CreateMaybeMessage< ::mead101::mead::MoodValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::MoodValue >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::MusicalWorkId* Arena::CreateMaybeMessage< ::mead101::mead::MusicalWorkId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::MusicalWorkId >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Name* Arena::CreateMaybeMessage< ::mead101::mead::Name >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Name >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::NameWithPronunciation* Arena::CreateMaybeMessage< ::mead101::mead::NameWithPronunciation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::NameWithPronunciation >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::NameWithPronunciationAndScriptCode* Arena::CreateMaybeMessage< ::mead101::mead::NameWithPronunciationAndScriptCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::NameWithPronunciationAndScriptCode >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Party* Arena::CreateMaybeMessage< ::mead101::mead::Party >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Party >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::PartyDescriptor* Arena::CreateMaybeMessage< ::mead101::mead::PartyDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::PartyDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::PartyInformation* Arena::CreateMaybeMessage< ::mead101::mead::PartyInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::PartyInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::PartyInformationList* Arena::CreateMaybeMessage< ::mead101::mead::PartyInformationList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::PartyInformationList >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::PartyName* Arena::CreateMaybeMessage< ::mead101::mead::PartyName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::PartyName >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::PartyNameWithPronunciation* Arena::CreateMaybeMessage< ::mead101::mead::PartyNameWithPronunciation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::PartyNameWithPronunciation >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::PartyNameWithTerritory* Arena::CreateMaybeMessage< ::mead101::mead::PartyNameWithTerritory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::PartyNameWithTerritory >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::PartyNameWithoutCode* Arena::CreateMaybeMessage< ::mead101::mead::PartyNameWithoutCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::PartyNameWithoutCode >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::PartyWithNames* Arena::CreateMaybeMessage< ::mead101::mead::PartyWithNames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::PartyWithNames >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::PartyWithRole* Arena::CreateMaybeMessage< ::mead101::mead::PartyWithRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::PartyWithRole >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Period* Arena::CreateMaybeMessage< ::mead101::mead::Period >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Period >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::PeriodValue* Arena::CreateMaybeMessage< ::mead101::mead::PeriodValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::PeriodValue >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::PeriodWithTime* Arena::CreateMaybeMessage< ::mead101::mead::PeriodWithTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::PeriodWithTime >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Person* Arena::CreateMaybeMessage< ::mead101::mead::Person >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Person >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Pronunciation* Arena::CreateMaybeMessage< ::mead101::mead::Pronunciation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Pronunciation >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ProprietaryId* Arena::CreateMaybeMessage< ::mead101::mead::ProprietaryId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ProprietaryId >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Pseudonym* Arena::CreateMaybeMessage< ::mead101::mead::Pseudonym >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Pseudonym >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::RecordingPart* Arena::CreateMaybeMessage< ::mead101::mead::RecordingPart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::RecordingPart >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::RecordingPartType* Arena::CreateMaybeMessage< ::mead101::mead::RecordingPartType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::RecordingPartType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::RelatedCreation* Arena::CreateMaybeMessage< ::mead101::mead::RelatedCreation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::RelatedCreation >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::RelatedResource* Arena::CreateMaybeMessage< ::mead101::mead::RelatedResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::RelatedResource >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::RelatedResourceType* Arena::CreateMaybeMessage< ::mead101::mead::RelatedResourceType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::RelatedResourceType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::RelatedWork* Arena::CreateMaybeMessage< ::mead101::mead::RelatedWork >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::RelatedWork >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Release* Arena::CreateMaybeMessage< ::mead101::mead::Release >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Release >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ReleaseId* Arena::CreateMaybeMessage< ::mead101::mead::ReleaseId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ReleaseId >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ReleaseInformation* Arena::CreateMaybeMessage< ::mead101::mead::ReleaseInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ReleaseInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ReleaseInformationList* Arena::CreateMaybeMessage< ::mead101::mead::ReleaseInformationList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ReleaseInformationList >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ReleaseSummary* Arena::CreateMaybeMessage< ::mead101::mead::ReleaseSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ReleaseSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ReleaseTitle* Arena::CreateMaybeMessage< ::mead101::mead::ReleaseTitle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ReleaseTitle >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Resource* Arena::CreateMaybeMessage< ::mead101::mead::Resource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Resource >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ResourceContributorRole* Arena::CreateMaybeMessage< ::mead101::mead::ResourceContributorRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ResourceContributorRole >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ResourceId* Arena::CreateMaybeMessage< ::mead101::mead::ResourceId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ResourceId >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ResourceInformation* Arena::CreateMaybeMessage< ::mead101::mead::ResourceInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ResourceInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ResourceInformationList* Arena::CreateMaybeMessage< ::mead101::mead::ResourceInformationList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ResourceInformationList >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ResourceRelationship* Arena::CreateMaybeMessage< ::mead101::mead::ResourceRelationship >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ResourceRelationship >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ResourceRelationshipType* Arena::CreateMaybeMessage< ::mead101::mead::ResourceRelationshipType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ResourceRelationshipType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ResourceSummary* Arena::CreateMaybeMessage< ::mead101::mead::ResourceSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ResourceSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ResourceTitle* Arena::CreateMaybeMessage< ::mead101::mead::ResourceTitle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ResourceTitle >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::RootChordNote* Arena::CreateMaybeMessage< ::mead101::mead::RootChordNote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::RootChordNote >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::RootChordQuality* Arena::CreateMaybeMessage< ::mead101::mead::RootChordQuality >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::RootChordQuality >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Sample* Arena::CreateMaybeMessage< ::mead101::mead::Sample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Sample >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::SampleFeature* Arena::CreateMaybeMessage< ::mead101::mead::SampleFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::SampleFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::SessionType* Arena::CreateMaybeMessage< ::mead101::mead::SessionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::SessionType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::SimilarParty* Arena::CreateMaybeMessage< ::mead101::mead::SimilarParty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::SimilarParty >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::SimilarRelease* Arena::CreateMaybeMessage< ::mead101::mead::SimilarRelease >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::SimilarRelease >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::SimilarResource* Arena::CreateMaybeMessage< ::mead101::mead::SimilarResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::SimilarResource >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::SimilarWork* Arena::CreateMaybeMessage< ::mead101::mead::SimilarWork >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::SimilarWork >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Source* Arena::CreateMaybeMessage< ::mead101::mead::Source >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Source >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::SubGenreCategory* Arena::CreateMaybeMessage< ::mead101::mead::SubGenreCategory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::SubGenreCategory >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::SubGenreCategoryValue* Arena::CreateMaybeMessage< ::mead101::mead::SubGenreCategoryValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::SubGenreCategoryValue >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Tempo* Arena::CreateMaybeMessage< ::mead101::mead::Tempo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Tempo >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::TempoValue* Arena::CreateMaybeMessage< ::mead101::mead::TempoValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::TempoValue >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Text* Arena::CreateMaybeMessage< ::mead101::mead::Text >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Text >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::TextWithFormat* Arena::CreateMaybeMessage< ::mead101::mead::TextWithFormat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::TextWithFormat >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::TextWithoutTerritory* Arena::CreateMaybeMessage< ::mead101::mead::TextWithoutTerritory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::TextWithoutTerritory >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Theme* Arena::CreateMaybeMessage< ::mead101::mead::Theme >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Theme >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ThemeValue* Arena::CreateMaybeMessage< ::mead101::mead::ThemeValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ThemeValue >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::TimeSignature* Arena::CreateMaybeMessage< ::mead101::mead::TimeSignature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::TimeSignature >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::TimeSignatureModulation* Arena::CreateMaybeMessage< ::mead101::mead::TimeSignatureModulation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::TimeSignatureModulation >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Timing* Arena::CreateMaybeMessage< ::mead101::mead::Timing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Timing >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::TitleTextWithPronunciation* Arena::CreateMaybeMessage< ::mead101::mead::TitleTextWithPronunciation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::TitleTextWithPronunciation >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::TitleWithPronunciation* Arena::CreateMaybeMessage< ::mead101::mead::TitleWithPronunciation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::TitleWithPronunciation >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::URI* Arena::CreateMaybeMessage< ::mead101::mead::URI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::URI >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Usage* Arena::CreateMaybeMessage< ::mead101::mead::Usage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Usage >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::UsagePeriod* Arena::CreateMaybeMessage< ::mead101::mead::UsagePeriod >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::UsagePeriod >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::UsedMusicalWork* Arena::CreateMaybeMessage< ::mead101::mead::UsedMusicalWork >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::UsedMusicalWork >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Venue* Arena::CreateMaybeMessage< ::mead101::mead::Venue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Venue >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::VocalRegister* Arena::CreateMaybeMessage< ::mead101::mead::VocalRegister >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::VocalRegister >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::VocalRegisterValue* Arena::CreateMaybeMessage< ::mead101::mead::VocalRegisterValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::VocalRegisterValue >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::Work* Arena::CreateMaybeMessage< ::mead101::mead::Work >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::Work >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::WorkHierarchy* Arena::CreateMaybeMessage< ::mead101::mead::WorkHierarchy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::WorkHierarchy >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::WorkInformation* Arena::CreateMaybeMessage< ::mead101::mead::WorkInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::WorkInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::WorkInformationList* Arena::CreateMaybeMessage< ::mead101::mead::WorkInformationList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::WorkInformationList >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::WorkRelationshipType* Arena::CreateMaybeMessage< ::mead101::mead::WorkRelationshipType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::WorkRelationshipType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::WorkSummary* Arena::CreateMaybeMessage< ::mead101::mead::WorkSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::WorkSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::WorkTitle* Arena::CreateMaybeMessage< ::mead101::mead::WorkTitle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::WorkTitle >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::mead::ddex_IsoDate* Arena::CreateMaybeMessage< ::mead101::mead::ddex_IsoDate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::mead::ddex_IsoDate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

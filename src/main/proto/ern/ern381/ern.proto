/* Generated schema for ern, version 381 */

syntax = "proto2";
package ern381;

/* A Composite containing details of an AdministratingRecordCompany. */
message ern_AdministratingRecordCompany {
/* The Namespace of the Role if it belongs to a proprietary scheme. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators. */
	repeated ern_PartyId party_id = 2;
/* A Composite containing details of the PartyName(s). */
	repeated ern_PartyName party_name = 3;
/* The role played by the Party responsible for administering Rights in a Resource or a Release. */
	optional avs_AdministratingRecordCompanyRole role = 4;
/* A UserDefined value of the Role. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 5;
}

/* A Composite containing details of a TerritoryCode. */
message ern_AllTerritoryCode {
/* A standard used for the TerritoryCode. This is represented in an XML schema as an XML Attribute. If this Attribute is not provided, it is assumed that the code is a TerritoryCode in accordance with ISO 3166-1 Alpha 2 standard (or Worldwide). */
	optional avs_TerritoryCodeTypeIncludingDeprecatedCodes identifier_type = 1;
	optional avs_AllTerritoryCode ext_value = 2;
}

/* A Composite containing details of an Artist. An Artist may be described through Name, Identifier and Roles. */
message ern_Artist {
/* A Composite containing details of a role played by the Artist in relation to other Artists. */
	repeated ern_ArtistRole artist_role = 1;
/* The nationality of the Artist. */
	repeated ern_ddexC_CurrentTerritoryCode nationality = 2;
/* A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators. */
	repeated ern_PartyId party_id = 3;
/* A Composite containing details of the PartyName(s). */
	repeated ern_PartyName party_name = 4;
/* The number indicating the order of the Artist in a group of Artists. This is represented in an XML schema as an XML Attribute.  */
	optional int32 sequence_number = 5;
}

/* A Composite containing details of the kinds of usage for which rights have been delegated by an Artist. */
message ern_ArtistDelegatedUsageRights {
/* A Type of membership of the Artist. */
	optional avs_MembershipType membership_type = 1;
/* A Composite containing details about a Period of Time for which the delegation of usage rights applies. Periods are typically described by at least a StartDate or EndDate. */
	optional ern_Period period_of_rights_delegation = 2;
/* A Territory for which the delegation of usage rights applies. */
	repeated ern_CurrentTerritoryCode territory_of_rights_delegation = 3;
/* A Composite containing details of the use for which rights are delegated. */
	repeated ern_UseType use_type = 4;
/* A Composite containing details of a physical interface by which a Consumer uses a Service or Release. */
	repeated ern_UserInterfaceType user_interface_type = 5;
}

/* A Composite containing details of an ArtistRole. Note: This can be used in a DdexMessage in relation to any Performance or Fixation either of which may form the whole or part of the Resource itself. Example: if an 'AssociatedPerformer' is shown as a Contributor to a MusicalWork it refers to a Performer of a Resource (e.g. a SoundRecording) expressing the MusicalWork. */
message ern_ArtistRole {
/* The Namespace of the ArtistRole. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the ArtistRole. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_ArtistRole ext_value = 3;
}

/* A Composite containing an AspectRatio and an AspectRatioType. */
message ern_AspectRatio {
/* The Type of the AspectRatio. This is represented in an XML schema as an XML Attribute. If this Attribute is not provided, it is assumed that the AspectRatio is a PixelAspectRatio. */
	optional avs_UnitOfFrameRate aspect_ratio_type = 1;
	optional double ext_value = 2;
}

/* A Composite containing details of an AudioCodecType. */
message ern_AudioCodecType {
/* The Namespace of the AudioCodecType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the AudioCodecType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
/* The Identifier of the Version of the AudioCodecType. This is represented in an XML schema as an XML Attribute. */
	optional string version = 3;
	optional avs_AudioCodecType ext_value = 4;
}

/* A Composite containing details of a rating for an audio-visual Creation. */
message ern_AvRating {
/* A Composite containing details of an Organization that issues the AvRating. */
	optional ern_RatingAgency rating_agency = 1;
/* A Composite containing details of a Description of the RatingText. */
	repeated ern_Description rating_scheme_description = 2;
/* The text of the AvRating. */
	optional string rating_text = 3;
}

/* A Composite containing a BitRate and a UnitOfMeasure. */
message ern_BitRate {
/* The UnitOfMeasure of the BitRate. This is represented in an XML schema as an XML Attribute.  */
	optional avs_UnitOfBitRate unit_of_measure = 1;
	optional double ext_value = 2;
}

/* A Composite containing details of a CLine. */
message ern_CLine {
/* The Name of the company releasing the Creation. This may be an owner or a licensee of the Creation. */
	optional string c_line_company = 1;
/* The text of the CLine. */
	optional string c_line_text = 2;
/* The Language and script of the CLineText as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 3;
/* The Year of the CLine. */
	optional uint32 year = 4;
}

/* A Composite containing details of a CarrierType. */
message ern_CarrierType {
/* The Namespace of the CarrierType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the CarrierType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_CarrierType ext_value = 3;
}

/* A Composite containing details of a Release which is an item of a catalog. */
message ern_CatalogItem {
/* A Composite containing details of the CLine for the Release. */
	repeated ern_CLine c_line = 1;
/* A Composite containing details of a Contributor to the catalog, i.e. to at least one of the included Releases. */
	repeated ern_Name contributor_name = 2;
/* A Composite containing the Name to be used by a DSP when presenting Artist details of the Release to a Consumer. */
	optional ern_Name display_artist_name = 3;
/* A Composite containing details of a DisplayTitle of the Release. */
	optional ern_ReferenceTitle display_title = 4;
/* A Composite containing details of a Genre to which the Release belongs. */
	repeated ern_Genre genre = 5;
/* A Composite containing the Name of the Label for the Release. The use of multiple LabelNames is discouraged unless used to communicate label names in different languages and/or scripts. */
	repeated ern_LabelName label_name = 6;
/* A Composite containing details of the PLine for the Release. */
	repeated ern_PLine p_line = 7;
/* A Composite containing details of the Date and Place of the Event in which the Release was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD). */
	optional ern_EventDate release_date = 8;
/* A Composite containing details of ReleaseIds. If available, a GRid has to be used. If the Release contains only one SoundRecording, the ISRC of the SoundRecording may be used instead. If the Release is an abstraction of a complete PhysicalProduct (such as a CD Album), the ICPN of the PhysicalProduct may be used instead. */
	repeated ern_ReleaseId release_id = 9;
/* A Territory for the Release. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.  */
	repeated ern_AllTerritoryCode territory_code = 10;
/* A Composite containing details of a Title of the Release. */
	optional ern_Title title = 11;
}

message ern_CatalogListMessage {
/* The Identifier of the Version of the business profile used for the Message. This is represented in an XML schema as an XML Attribute. */
	optional string business_profile_version_id = 1;
/* A Composite containing details of a Release which is an item of the catalog. */
	repeated ern_CatalogItem catalog_item = 2;
/* The Language and script for the Elements of the CatalogListMessage as defined in IETF RfC 5646. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 3;
/* The MessageHeader for the CatalogListMessage. */
	optional ern_MessageHeader message_header = 4;
/* The Identifier of the Version of the XML schema used for the Message. This is represented in an XML schema as an XML Attribute. */
	optional string message_schema_version_id = 5;
/* The DateTime at which the catalog will become available (the only allowed format is ISO 8601:2004: YYYY-MM-DDThh:mm:ssTZD). */
	optional uint64 publication_date = 6;
/* The Identifier of the Version of the release profile used for the Message. This is represented in an XML schema as an XML Attribute. */
	optional string release_profile_version_id = 7;
}

/* A Composite containing details of a CatalogNumber. */
message ern_CatalogNumber {
/* The Namespace of the CatalogNumber. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
	optional string ext_value = 2;
}

/* A Composite containing a list of CatalogReleaseReferences. */
message ern_CatalogReleaseReferenceList {
/* A Reference for a Release (specific to this Message) that is part of the catalog. This is a LocalReleaseAnchorReference starting with the letter R. */
	repeated string catalog_release_reference = 1;
}

/* A Composite containing details of a CatalogTransfer. */
message ern_CatalogTransfer {
/* A Composite containing details of one or more Releases contained in the catalog that is or was transferred. */
	optional ern_CatalogReleaseReferenceList catalog_release_reference_list = 1;
/* A Flag indicating whether the CatalogTransfer has been made (=true) or still needs to be made (=false). */
	optional bool catalog_transfer_completed = 2;
/* A Composite containing details of the Date and Place of the Event in which the catalog is or was transferred. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate effective_transfer_date = 3;
/* A Territory to which the CatalogTransfer does not apply. Either this Element or Territory must be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.  */
	repeated ern_AllTerritoryCode excluded_territory_code = 4;
/* A Territory to which the CatalogTransfer applies. Either this Element or ExcludedTerritory must be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.  */
	repeated ern_AllTerritoryCode territory_code = 5;
/* A Composite containing details of the old RightsController. */
	optional ern_PartyDescriptor transferring_from = 6;
/* A Composite containing details of the new RightsController. */
	optional ern_PartyDescriptor transferring_to = 7;
}

/* A Composite containing details of a Character. A Character may be described through Name, Identifier and Roles. */
message ern_Character {
/* A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators. */
	repeated ern_PartyId party_id = 1;
/* A Composite containing details of the PartyName(s). */
	repeated ern_PartyName party_name = 2;
/* A Composite containing details of the Name, Identifier and role(s) of a Contributor. */
	optional ern_DetailedResourceContributor resource_contributor = 3;
/* The number indicating the order of the Character in a group of Characters. This is represented in an XML schema as an XML Attribute.  */
	optional int32 sequence_number = 4;
}

/* A Composite containing details of a Collection. Collections referenced from Video Resources are of CollectionType VideoChapter . Collections referenced from a Release composite are of CollectionType Series, Season or Episode. */
message ern_Collection {
/* A Composite containing details of the CLine for the Collection. */
	repeated ern_CLine c_line = 1;
/* A Composite containing details of a Character in the Collection. A Character may be described through Name, Identifier and Roles. */
	repeated ern_Character character = 2;
/* A Composite containing a list of CollectionCollectionReferences for a Collection (specific to this Message). */
	optional ern_CollectionCollectionReferenceList collection_collection_reference_list = 3;
/* A Composite containing details of Descriptors and other attributes of the Collection which may vary according to Territory of release. */
	repeated ern_CollectionDetailsByTerritory collection_details_by_territory = 4;
/* A Composite containing details of an Identifier of the Collection. */
	repeated ern_CollectionId collection_id = 5;
/* The Identifier (specific to the Message) of the Collection within the Release which contains it. This is a LocalCollectionAnchor starting with the letter X. */
	optional string collection_reference = 6;
/* A Composite containing a list of CollectionResourceReferences for a Resource (specific to this Message). */
	optional ern_CollectionResourceReferenceList collection_resource_reference_list = 7;
/* A Composite containing details of the Type of the Collection. */
	repeated ern_CollectionType collection_type = 8;
/* A Composite containing a list of CollectionWorkReferences for a Work (specific to this Message). */
	optional ern_CollectionWorkReferenceList collection_work_reference_list = 9;
/* A Composite containing details a Contributor to the Collection. */
	repeated ern_DetailedResourceContributor contributor = 10;
/* A Composite containing details of the Date and Place of the Event in which the Collection was created. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate creation_date = 11;
/* The sum of the Durations of all Resources contained in the Collection (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). */
	optional string duration = 12;
/* The Duration of the musical content (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). */
	optional string duration_of_musical_content = 13;
/* A Reference for a Release (specific to this Message) that is represented by the Collection. This is a LocalReleaseAnchorReference starting with the letter R. */
	optional string equivalent_release_reference = 14;
/* The Flag indicating whether the Collection is complete (=true) or not (=false). Only one of the Elements IsComplete here and in the CollectionDetailsByTerritory is valid for a given Collection. */
	optional bool is_complete = 15;
/* The Language and script for the Elements of the Collection as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 16;
/* The orignal Language of the Collection (represented by an ISO 639-2 LanguageCode). */
	optional avs_IsoLanguageCode original_language = 17;
/* A Composite containing details of the Date and Place of the Event in which the Collection was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD). */
	optional ern_EventDate original_release_date = 18;
/* A Composite containing details of the PLine for the Collection. */
	repeated ern_PLine p_line = 19;
/* A Composite containing details of the Date and Place of the Event in which the Collection was or will be first made available for Usage in its current form, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD). */
	optional ern_EventDate release_date = 20;
/* A Reference for an Image (specific to this Message). This is a LocalResourceAnchorReference starting with the letter A. */
	optional string representative_image_reference = 21;
/* The number indicating the order of the Collection within all Collections at this level. The default value is 1, and the value must be incremented by 1 for each Collection occurring at a particular level. */
	optional int32 sequence_number = 22;
/* A Composite containing details of a Title of the Collection. */
	repeated ern_Title title = 23;
}

/* A Composite containing a CollectionCollectionReference. */
message ern_CollectionCollectionReference {
/* A Reference for a Collection (specific to this Message). This is a LocalCollectionAnchorReference starting with the letter X. The referenced Collection has to be of CollectionType Series, Season or Episode. */
	optional string collection_collection_reference = 1;
/* The Duration of the use of the Creation that is referenced in the CueCreationReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). */
	optional string duration = 2;
/* The end time of the Creation, measured from the start of the Resource from which the CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). */
	optional string end_time = 3;
/* A Date on which the Collection or Resource was included in the parent Collection. */
	optional uint64 inclusion_date = 4;
/* The number indicating the order of the Collection in a group of Collections within a Medley, SoundRecording or other Collection. */
	optional int32 sequence_number = 5;
/* The start time of the Creation, measured from the start of the Resource from which the CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). */
	optional string start_time = 6;
}

/* A Composite containing a list of CollectionCollectionReferences. */
message ern_CollectionCollectionReferenceList {
/* A Composite containing a CollectionCollectionReference for a Collection (specific to this Message). */
	repeated ern_CollectionCollectionReference collection_collection_reference = 1;
/* The number of referenced Collections (typically Chapters). */
	optional int32 number_of_collections = 2;
}

/* A Composite containing details of Descriptors and other attributes of a Collection which may vary according to Territory of release.  */
message ern_CollectionDetailsByTerritory {
/* A Composite containing details of a Character in the Collection. A Character may be described through Name, Identifier and Roles. */
	repeated ern_Character character = 1;
/* A Composite containing details of a Contributor to the Collection. */
	repeated ern_DetailedResourceContributor contributor = 2;
/* A Territory to which the Collection details do not apply. Either this Element or Territory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard. */
	repeated ern_CurrentTerritoryCode excluded_territory_code = 3;
/* The Flag indicating whether the Collection is complete (=true) or not (=false). Only one of the Elements IsComplete here and in the Collection is valid for a given Collection. */
	optional bool is_complete = 4;
/* A Territory to which the Collection details apply. Either this Element or ExcludedTerritory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.  */
	repeated ern_CurrentTerritoryCode territory_code = 5;
/* A Composite containing details of a Title of the Collection. */
	repeated ern_Title title = 6;
}

/* A Composite containing details of a CollectionId. */
message ern_CollectionId {
/* A Composite containing details of the CatalogNumber of the Collection. */
	optional ern_CatalogNumber catalog_number = 1;
/* The GRid identifying the Collection. This is the preferred Element and is mandatory if a GRid is available. A GRid comprises four parts: the xs:string 'A1', followed by five alphanumeric characters, ten alphanumeric characters and and one alphanumeric character. DDEX will enforce the syntax [a-zA-Z0-9]{18} using XML Schema in the future. */
	optional string g_rid = 2;
/* A Composite containing details of the ICPN used as proxy for identification of the Collection. Only applicable when the Collection is an abstraction of a complete PhysicalProduct. An ICPN comprises 12 or 13 digits, depending whether it is an EAN (13) or a UPC (12). DDEX will enforce the syntax [0-9]{12,13} using XML Schema in the future. */
	optional ern_ICPN i_c_p_n = 3;
/* The ISAN (International Standard Audiovisual Number as defined in ISO 15706) for the Collection. An ISAN comprises four blocks of four hexadecimal charaters followed by a check character. DDEX will enforce the syntax [A-F0-9]{12} using XML Schema in the future. */
	optional string i_s_a_n = 4;
/* The ISRC (International Standard Recording Code as defined in  ISO 3901) for the Collection. An ISRC comprises four parts: two characters, followed by three alphanumeric characters, then two digits and five digits. DDEX will enforce the syntax [a-zA-Z]{2}[a-zA-Z0-9]{3}[0-9]{7} using XML Schema in the future. */
	optional string i_s_r_c = 5;
/* The Flag indicating whether this Identifier is old and has been replaced by a new one (=true) or not (=false). The Flag may only be set to True when the new Identifier is also provided. If the Flag is not set, this Identifier is deemed to be the current one. */
	optional bool is_replaced = 6;
/* A Composite containing details of a ProprietaryIdentifier of the Collection (usually one per society involved in the messaging). */
	repeated ern_ProprietaryId proprietary_id = 7;
/* The V-ISAN (Version Identifier of a International Standard Audiovisual Number as defined in ISO 15706-2) for the Collection. A V-ISAN comprises four blocks of four hexadecimal charaters followed by a check character, followed by two further blocks of four hexadecimal characters, followed by a further check character. DDEX will enforce the syntax [A-F0-9]{24} using XML Schema in the future. */
	optional string v_i_s_a_n = 8;
}

/* A Composite containing details of one or more Collections. */
message ern_CollectionList {
/* A Composite containing details of a Collection contained in a Resource. */
	repeated ern_Collection collection = 1;
/* The Language and script for the Elements of the CollectionList as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 2;
}

/* A Composite containing a CollectionResourceReference. */
message ern_CollectionResourceReference {
/* A Reference for a Resource (specific to this Message). This is a LocalResourceAnchorReference starting with the letter A. */
	optional string collection_resource_reference = 1;
/* The Duration of the use of the Resource that is referenced in the CollectionResourceReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). */
	optional string duration = 2;
/* The number indicating the order of the Resources in a group of Resources. */
	optional int32 sequence_number = 3;
}

/* A Composite containing a list of CollectionResourceReferences. */
message ern_CollectionResourceReferenceList {
/* A Composite containing a CollectionResourceReference for a Collection (specific to this Message). */
	repeated ern_CollectionResourceReference collection_resource_reference = 1;
}

/* A Composite containing details of a CollectionType. Collections referenced from Video Resources are of CollectionType VideoChapter . Collections referenced from a Release composite are of CollectionType Series, Season or Episode. */
message ern_CollectionType {
/* The Namespace of the CollectionType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the CollectionType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_CollectionType ext_value = 3;
}

/* A Composite containing a CollectionWorkReference. */
message ern_CollectionWorkReference {
/* A Reference for a Work (specific to this Message). This is a LocalMusicalWorkAnchorReference starting with the letter W. */
	optional string collection_work_reference = 1;
/* The Duration of the use of the Work that is referenced in the CollectionWorkReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). */
	optional string duration = 2;
}

/* A Composite containing a list of CollectionWorkReferences. */
message ern_CollectionWorkReferenceList {
/* A Composite containing a CollectionWorkReference for a Collection (specific to this Message). */
	repeated ern_CollectionWorkReference collection_work_reference = 1;
}

/* A Composite containing details of an Comment. */
message ern_Comment {
/* The Language and script of the Comment as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
	optional string ext_value = 2;
}

/* A Composite containing details of a CommercialModelType. */
message ern_CommercialModelType {
/* The Namespace of the CommercialModelType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the CommercialModelType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_CommercialModelType ext_value = 3;
}

/* A Composite containing details of a condition. */
message ern_Condition {
/* A Relator expressing the accuracy of the condition value. */
	optional avs_RelationalRelator relational_relator = 1;
/* A UnitOfMeasure for the condition value. */
	optional avs_UnitOfConditionValue unit = 2;
/* The numeric value of the condition. */
	optional double value = 3;
}

/* A Composite containing details of a Period a DSP may rent something to a Customer. */
message ern_ConsumerRentalPeriod {
/* A Flag indicating whether a Period can be extended after the end of a Deal (=true) or not (=false). This is represented in an XML schema as an XML Attribute. */
	optional bool is_extensible = 1;
	optional string ext_value = 2;
}

/* A Composite containing details of contact Identifiers of a Party. */
message ern_ContactId {
/* An EmailAddress of the Party. */
	repeated string email_address = 1;
/* A FaxNumber of the Party. */
	repeated string fax_number = 2;
/* A PhoneNumber of the Party. */
	repeated string phone_number = 3;
}

/* A Composite containing details of a ContainerFormat. */
message ern_ContainerFormat {
/* The Namespace of the ContainerFormat. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the ContainerFormat. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_ContainerFormat ext_value = 3;
}

/* A Composite containing details of an CourtesyLine. */
message ern_CourtesyLine {
/* The Language and script of the CourtesyLine as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
	optional string ext_value = 2;
}

/* A Composite containing details of a CreationIds. */
message ern_CreationId {
/* A Composite containing details of the CatalogNumber of the Resource. */
	optional ern_CatalogNumber catalog_number = 1;
/* A MusicalWorkId identifying a MusicalWork within the catalog of its Composer (typically of classical music) according to a standardized numbering (e.g. 'K' numbers for Koechel's catalog of Mozart). */
	repeated string composer_catalog_number = 2;
/* The ISAN (International Standard Audiovisual Number as defined in ISO 15706) for the Resource. An ISAN comprises four blocks of four hexadecimal charaters followed by a check character. DDEX will enforce the syntax [A-F0-9]{12} using XML Schema in the future. */
	optional string i_s_a_n = 3;
/* The ISBN (International Standard Book Number defined in ISO 2108) for the Resource. An ISBN is a 13-digit number. Pre-2007, ISBNs, which had 10-digits and are now deprecated, are converted by adding the prefix '978' and re-calculating the check character. DDEX will enforce the syntax 97[8-9][0-9]{9}[X0-9] using XML Schema in the future. */
	optional string i_s_b_n = 4;
/* The ISMN (International Standard Music Number defined in ISO 10957) for the Resource. An ISMN is a thirteen-digit number. Pre-2008 ISMNs, which had 10 characters and are now deprecated, are converted by replacing the initial letter ('M') with '979-0'. DDEX will enforce the syntax 979[0-9]{9}[X0-9] using XML Schema in the future. */
	optional string i_s_m_n = 5;
/* The ISRC (International Standard Recording Code as defined in  ISO 3901) for the Resource. An ISRC comprises four parts: two characters, followed by three alphanumeric characters, then two digits and five digits. DDEX will enforce the syntax [a-zA-Z]{2}[a-zA-Z0-9]{3}[0-9]{7} using XML Schema in the future. */
	optional string i_s_r_c = 6;
/* The ISSN (International Standard Serial Number defined in ISO 3297) for the Resource. An ISSN comprises two groups of four digits, separated by a hyphen and a control digit. DDEX will enforce the syntax [0-9]{4}-[0-9]{3}[X0-9] using XML Schema in the future. */
	optional string i_s_s_n = 7;
/* The ISWC (International Standard Musical Work Code defined in ISO 15707) identifying the MusicalWork. An ISWC comprises three parts: the letter 'T', followed by nine digits and then one check digit. DDEX will enforce the syntax [a-zA-Z][0-9]{10} using XML Schema in the future. */
	optional string i_s_w_c = 8;
/* The MusicalWorkId identifying the MusicalWork within the catalog of its Composer (typically of classical music) as an opus number. */
	optional string opus_number = 9;
/* A Composite containing details of a ProprietaryIdentifier of the Creation. */
	repeated ern_ProprietaryId proprietary_id = 10;
/* The SICI (Serial Item and Contribution Identifier defined in ANSI/NISO Z39.56-199)  for the Resource. DDEX will enforce the syntax [0-9]{4}-[0-9]{3}[X0-9].+ using XML Schema in the future. */
	optional string s_i_c_i = 11;
/* The V-ISAN (Version Identifier of a International Standard Audiovisual Number as defined in ISO 15706-2) for the Resource. A V-ISAN comprises four blocks of four hexadecimal charaters followed by a check character, followed by two further blocks of four hexadecimal characters, followed by a further check character. DDEX will enforce the syntax [A-F0-9]{24} using XML Schema in the future. */
	optional string v_i_s_a_n = 12;
}

/* A Composite containing details of a Cue. */
message ern_Cue {
/* A Composite containing details of the CLine for the Cue. */
	repeated ern_CLine c_line = 1;
/* A Composite containing a CueCreationReference for a Creation (specific to this Message). */
	repeated ern_CueCreationReference cue_creation_reference = 2;
/* A Composite containing details of a CueOrigin for the Cue. It can be expected that this element will be contractually mandatory in many communications of cue sheets to music rights societies. */
	optional ern_CueOrigin cue_origin = 3;
/* A Composite containing details of a ThemeType for the Creation referenced in the Cue. */
	optional ern_CueThemeType cue_theme_type = 4;
/* A Composite containing details of a UseType of the Cue. It can be expected that this element will be contractually mandatory in many communications of cue sheets to music rights societies. */
	optional ern_CueUseType cue_use_type = 5;
/* A Composite containing details of a VisualPerceptionType for the Creation referenced in the Cue. */
	optional ern_CueVisualPerceptionType cue_visual_perception_type = 6;
/* A Composite containing details of a VocalType for the Creation referenced in the Cue. */
	optional ern_CueVocalType cue_vocal_type = 7;
/* The Duration of the use of the Creation that is referenced in the CueCreationReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). */
	optional string duration = 8;
/* The end time of the Creation, measured from the start of the Resource from which the CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). */
	optional string end_time = 9;
/* A Flag indicating whether whether the Creation referenced in the Cue contains musical content such as a SoundRecording or a MusicalWork (=true) or not (=false). */
	optional bool has_musical_content = 10;
/* A Flag indicating whether a Creation contains dancing (=true) or not (=false). */
	optional bool is_dance = 11;
/* A Composite containing details of the PLine for the Cue. */
	repeated ern_PLine p_line = 12;
/* A Composite containing details of a Character in the Creation referenced in the Cue. A Character may be described through Name, Identifier and Roles. */
	repeated ern_Character referenced_creation_character = 13;
/* A Composite containing details of a Contributor of the Creation referenced in the Cue. */
	repeated ern_DetailedResourceContributor referenced_creation_contributor = 14;
/* A Composite containing details of a CreationId. */
	optional ern_CreationId referenced_creation_id = 15;
/* A Composite containing details of a Title of the Creation referenced in the Cue. */
	repeated ern_Title referenced_creation_title = 16;
/* A Type of the Creation referenced in the Cue. */
	optional avs_CreationType referenced_creation_type = 17;
/* A Composite containing details of an indirect Contributor of the Creation referenced in the Cue. */
	repeated ern_MusicalWorkContributor referenced_indirect_creation_contributor = 18;
/* The start time of the Creation, measured from the start of the Resource from which the CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). */
	optional string start_time = 19;
}

/* A Composite containing a CueCreationReference. */
message ern_CueCreationReference {
/* A Reference for a Resource (specific to this Message). This is a LocalResourceAnchorReference starting with the letter A. */
	optional string cue_resource_reference = 1;
/* A Reference for a Work (specific to this Message). This is a LocalMusicalWorkAnchorReference starting with the letter W. */
	optional string cue_work_reference = 2;
}

/* A Composite containing details of a CueOrigin. */
message ern_CueOrigin {
/* The Namespace of the CueOrigin. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the CueOrigin. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_CueOrigin ext_value = 3;
}

/* A Composite containing details of a CueSheet. */
message ern_CueSheet {
/* A Composite containing details of a Cue. */
	repeated ern_Cue cue = 1;
/* A Composite containing details of a CueSheetId of the CueSheet. */
	repeated ern_ProprietaryId cue_sheet_id = 2;
/* The Identifier (specific to the Message) of the CueSheet within the Release which contains it. This is a LocalCueSheetAnchor starting with the letter Q. */
	optional string cue_sheet_reference = 3;
/* A Composite containing details of a Type of the CueSheet. */
	optional ern_CueSheetType cue_sheet_type = 4;
}

/* A Composite containing details of one or more CueSheets. */
message ern_CueSheetList {
/* A Composite containing details of a CueSheet contained in a Resource. */
	repeated ern_CueSheet cue_sheet = 1;
}

/* A Composite containing details of a CueSheetType. */
message ern_CueSheetType {
/* The Namespace of the CueSheetType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the CueSheetType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_CueSheetType ext_value = 3;
}

/* A Composite containing details of a ThemeType for a Creation referenced in a Cue. */
message ern_CueThemeType {
/* The Namespace of the CueThemeType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the CueThemeType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_ThemeType ext_value = 3;
}

/* A Composite containing details of a CueUseType. */
message ern_CueUseType {
/* The Namespace of the CueUseType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the CueUseType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_CueUseType ext_value = 3;
}

/* A Composite containing details of a VisualPerceptionType for a Creation referenced in a Cue. */
message ern_CueVisualPerceptionType {
/* The Namespace of the CueVisualPerceptionType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the CueVisualPerceptionType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_VisualPerceptionType ext_value = 3;
}

/* A Composite containing details of a VocalType for a Creation referenced in a Cue. */
message ern_CueVocalType {
/* The Namespace of the CueVocalType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the CueVocalType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_VocalType ext_value = 3;
}

/* A Composite containing details of a TerritoryCode. */
message ern_CurrentTerritoryCode {
/* A standard used for the TerritoryCode. This is represented in an XML schema as an XML Attribute. If this Attribute is not provided, it is assumed that the code is a TerritoryCode in accordance with ISO 3166-1 Alpha 2 standard (or Worldwide). */
	optional avs_TerritoryCodeType identifier_type = 1;
	optional avs_CurrentTerritoryCode ext_value = 2;
}

/* A Composite containing details of a DSP acting as a Licensee in a commercial relationship. */
message ern_DSP {
/* The Language and script for the Elements of the DSP as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
/* A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators. */
	repeated ern_PartyId party_id = 2;
/* A Composite containing details of the PartyName(s). */
	repeated ern_PartyName party_name = 3;
/* The Territory from which the DSP operates. This Territory may differ from the one in which SalesTransactions occur. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.  */
	optional ern_CurrentTerritoryCode territory_code = 4;
/* A Composite containing a TradingName of the DSP. */
	optional ern_Name trading_name = 5;
/* A URL for the DSP's web site. */
	repeated string u_r_l = 6;
}

/* A Composite containing details (in full or in summary) of a Deal made between a DSP (as Licensee) and a Licensor of Works or Releases. When any new DealTerms are added or removed from an existing Deal (different UseTypes, Prices, Territories, DistributionChannels) then a new Deal is created, and (if appropriate) the ValidityPeriod of the existing Deal should be terminated. The only changes which should be made to the DealTerms of an existing Deal are corrections required because of an earlier error or omission, or the addition of an EndDate to the Deal's ValidityPeriod. */
message ern_Deal {
/* A Composite containing a Reference to a TextDocument containing details of the Deal (in the form of an Identifier, Name or Description). */
	repeated ern_DealReference deal_reference = 1;
/* A Composite containing a list of DealTechnicalResourceDetailsReferences for the Deal. */
	optional ern_DealTechnicalResourceDetailsReferenceList deal_technical_resource_details_reference_list = 2;
/* A Composite containing details of the terms of the Deal. */
	optional ern_DealTerms deal_terms = 3;
/* A Composite containing details of a WebPage for the DistributionChannel. */
	repeated ern_WebPage distribution_channel_page = 4;
/* The Language and script for the Elements of the Deal as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 5;
/* A Composite containing details of one or more Usages that govern a Resource in the Deal where the Usage of the Resource differs from the Usage of the other Resources in the same Release. */
	optional ern_ResourceUsage resource_usage = 6;
}

/* A Composite containing details of one or more Deals. */
message ern_DealList {
/* The Language and script for the Elements of the DealList as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
/* A Composite containing details of one or more Deals pertaining to one or more Releases. */
	repeated ern_ReleaseDeal release_deal = 2;
}

/* A Composite containing details of a DealReference. */
message ern_DealReference {
/* The Language and script of the DealReference as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
	optional string ext_value = 2;
}

/* A Composite containing details of one or more Resources relating to a Deal. */
message ern_DealResourceReferenceList {
/* A Reference for a Resource (specific to this Message). This is a LocalResourceAnchorReference starting with the letter A. */
	repeated string deal_resource_reference = 1;
/* A Composite containing details about the Period of Time applicable to the Resources. */
	optional ern_Period period = 2;
}

/* A Composite containing a list of DealTechnicalResourceDetailsReferences. */
message ern_DealTechnicalResourceDetailsReferenceList {
/* A Reference for a Composite specifying technical details of a Resource (specific to this Message). This is a LocalTechnicalResourceDetailsAnchorReference starting with the letter T. */
	repeated string deal_technical_resource_details_reference = 1;
}

/* A Composite containing details of the terms of a Deal. */
message ern_DealTerms {
/* The Flag indicating whether all Deals are cancelled for the given Territories (=true) or not (=false). This Flag can be used in conjunction with a StartDate of a ValidityPeriod to indicate the point in time from which all Deals are cancelled. This element is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it. */
	optional bool all_deals_cancelled = 1;
/* A Date on which an audio or video clip is made first available for display (it overrides the generic ReleaseDisplayStartDate if supplied). If no ClipPreviewStartDate is provided, the StartDate for the Deal is used instead. The ClipPreviewStartDate may not be later than the StartDate for the Deal. The ClipPrevicePreviewStartDate shall not be later than the StartDate of the Deal allowing the general availability of the referenced Release. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_ddex_IsoDate clip_preview_start_date = 2;
/* A Date on which an audio or video clip is made first available for display (it overrides the generic ReleaseDisplayStartDate if supplied). If no ClipPreviewStartDate is provided, the StartDate for the Deal is used instead. The ClipPreviewStartDate may not be later than the StartDate for the Deal. The ClipPrevicePreviewStartDate shall not be later than the StartDate of the Deal allowing the general availability of the referenced Release. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional uint64 clip_preview_start_date_time = 3;
/* A Composite containing details of the fundamental business model which applies to the Deal (e.g. SubscriptionModel and PayAsYouGoModel). The CommercialModelType indicates how the Consumer pays for the Service or Release. */
	repeated ern_CommercialModelType commercial_model_type = 4;
/* A Composite containing details of a Period the DSP may rent something to a Customer. */
	optional ern_ConsumerRentalPeriod consumer_rental_period = 5;
/* A Date on which the cover art is made first available for display (it overrides the generic ReleaseDisplayStartDate if supplied). If no CoverArtPreviewStartDate is provided, the StartDate for the Deal is used instead. The CoverArtPreviewStartDate may not be later than the StartDate for the Deal. CoverArtPreviewStartDate shall not be later than the StartDate of the Deal allowing the general availability of the referenced Release. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_ddex_IsoDate cover_art_preview_start_date = 6;
/* A Date on which the cover art is made first available for display (it overrides the generic ReleaseDisplayStartDate if supplied). If no CoverArtPreviewStartDate is provided, the StartDate for the Deal is used instead. The CoverArtPreviewStartDate may not be later than the StartDate for the Deal. CoverArtPreviewStartDate shall not be later than the StartDate of the Deal allowing the general availability of the referenced Release. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional uint64 cover_art_preview_start_date_time = 7;
/* A Composite containing details of the DSP through whose DistributionChannel the sales are permitted. If none are provided no limitations on the DistributionChannels are given. */
	repeated ern_DSP distribution_channel = 8;
/* A Composite containing details of excluded DSP. This is used in an aggregator model where all agreed partners of the aggregators may use a ReleaseDeal, except those that are listed herein. */
	repeated ern_DSP excluded_distribution_channel = 9;
/* A Territory in which the Deal does not apply. Either this Element or Territory must be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.  */
	repeated ern_CurrentTerritoryCode excluded_territory_code = 10;
/* A Composite containing details of one or more Resources that are only available for download as soon as the Release is purchased (i.e. before the ReleaseDate). */
	optional ern_DealResourceReferenceList instant_gratification_resource_list = 11;
/* The Flag indicating whether the Deal is exclusive (=true) or not (=false) to the MessageRecipient with respect to the relevant Territory(ies), Time(s) and Release(s). For other Territory(ies), or Time(s), other DSPs might be able to sell the Release(s). The exclusivity is in accordance with the agreement between the MessageSender and MessageRecipient. */
	optional bool is_exclusive = 12;
/* A Flag indicating whether the Deal is covering only the period where the Release can be purchased by a consumer but not yet fulfilled (=true) or not (=false). */
	optional bool is_pre_order_deal = 13;
/* The Flag indicating whether a special Deal is made between the Licensor and the Licensee (=true) or not (=false) regarding the royalties or payments due to be paid for Releases distributed under this Deal. */
	optional bool is_promotional = 14;
/* The Language and script for the Elements of the DealTerms as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 15;
/* A number of Products per carton. This is the smallest number of Products that can be ordered. */
	optional int32 number_of_products_per_carton = 16;
/* A Composite containing details of physical returns. */
	optional ern_PhysicalReturns physical_returns = 17;
/* A Composite containing details of one or more Resources that are only available when the Release is purchased during a pre-order period (delivery is typically at ReleaseDate). */
	optional ern_DealResourceReferenceList pre_order_incentive_resource_list = 18;
/* A Composite containing details of the Date and Place of the Event in which the pre-ordered Release is made first available for previewing (it overrides the generic ReleaseDisplayStartDate if supplied). If no PreOrderPreviewDate is provided, the StartDate for the Deal is used instead. The PreOrderPreviewDate may not be later than the StartDate for the Deal. This element has been deprecated and may be deleted in a future version of this message. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate pre_order_preview_date = 19;
/* A Composite containing details of the Date and Place of the Event in which the pre-ordered Release is made first available for previewing (it overrides the generic ReleaseDisplayStartDate if supplied). If no PreOrderPreviewDate is provided, the StartDate for the Deal is used instead. The PreOrderPreviewDate may not be later than the StartDate for the Deal. This element has been deprecated and may be deleted in a future version of this message. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional uint64 pre_order_preview_date_time = 20;
/* A Composite containing details of the Date and Place of the Event in which the related Release is made available for pre-ordering. This element is not applicable on Track Releases. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate pre_order_release_date = 21;
/* A Composite containing details of a Price. Note that this Price applies to all UseTypes referenced in this Composite. */
	repeated ern_PriceInformation price_information = 22;
/* A Composite containing details of a PromotionalCode. */
	optional ern_PromotionalCode promotional_code = 23;
/* A Composite containing details of one or more offers related to the Release. */
	repeated ern_RelatedReleaseOfferSet related_release_offer_set = 24;
/* A Date on which the Release is made first available for display. If other Track list, cover art and clip preview dates are not provided, then this date covers them as well (assuming clips are available). If no ReleaseDisplayStartDate is provided, the StartDate for the Deal is used instead. The ReleaseDisplayStartDate may not be later than the StartDate for the Deal. If the MessageRecipient is not able to cater for such granular display policies, the MessageRecipient may be forced to not display any Release information until a much later date. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_ddex_IsoDate release_display_start_date = 25;
/* A Date on which the Release is made first available for display. If other Track list, cover art and clip preview dates are not provided, then this date covers them as well (assuming clips are available). If no ReleaseDisplayStartDate is provided, the StartDate for the Deal is used instead. The ReleaseDisplayStartDate may not be later than the StartDate for the Deal. If the MessageRecipient is not able to cater for such granular display policies, the MessageRecipient may be forced to not display any Release information until a much later date. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional uint64 release_display_start_date_time = 26;
/* A Composite containing details of a rights claim policy. */
	repeated ern_RightsClaimPolicy rights_claim_policy = 27;
/* The Flag indicating whether all Releases referred to are to be taken down by the MessageRecipient. This includes that all Deals referred to in a specific Composite are cancelled and no information about the Releases should be displayed to the end user on the DSP's website (=true) or not (=false). This element is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it. */
	optional bool take_down = 28;
/* A Territory in which the Deal applies. Either this Element or ExcludedTerritory must be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.  */
	repeated ern_CurrentTerritoryCode territory_code = 29;
/* A Date on which the Track list is made first available for display (it overrides the generic ReleaseDisplayStartDate if supplied). If no TrackListingPreviewStartDate is provided, the StartDate for the Deal is used instead. The TrackListingPreviewStartDate may not be later than the StartDate for the Deal. The TrackListingPreviewStartDate shall not be later than the StartDate of the Deal allowing the general availability of the referenced Release. This element is not applicable on Track Releases. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_ddex_IsoDate track_listing_preview_start_date = 30;
/* A Date on which the Track list is made first available for display (it overrides the generic ReleaseDisplayStartDate if supplied). If no TrackListingPreviewStartDate is provided, the StartDate for the Deal is used instead. The TrackListingPreviewStartDate may not be later than the StartDate for the Deal. The TrackListingPreviewStartDate shall not be later than the StartDate of the Deal allowing the general availability of the referenced Release. This element is not applicable on Track Releases. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional uint64 track_listing_preview_start_date_time = 31;
/* A Composite containing the Types and number of Usages applicable to a Release to which the Deal applies. */
	repeated ern_Usage usage = 32;
/* A Composite containing details about a Period of Time during which the Deal is valid. No StartDate in this Composite means that the Deal is valid as per contractual relationship between MessageSender and MessageRecipient. No EndDate in this Composite means that the Deal is valid until further notice. */
	repeated ern_Period validity_period = 33;
/* A Composite containing details of UserGeneratedContent permissions. */
	repeated ern_WebPolicy web_policy = 34;
}

/* A Composite containing details of an Description. */
message ern_Description {
/* The Language and script of the Description as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
	optional string ext_value = 2;
}

/* A Composite containing details of the Name, Identifier and role(s) of a Contributor to a Resource. */
message ern_DetailedResourceContributor {
/* A Composite containing details of the additional roles played by the Artist. */
	repeated ern_ArtistRole additional_roles = 1;
/* A Composite containing details of the kinds of usage for which rights have been delegated by the Artist. */
	optional ern_ArtistDelegatedUsageRights artist_delegated_usage_rights = 2;
/* The country of whose citizenship the Artist has. */
	optional ern_CurrentTerritoryCode citizenship = 3;
/* A Composite containing details of contact Identifiers of the Artist. */
	optional ern_ContactId contact_information = 4;
/* A Composite containing details of the Date and Place of birth. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate date_and_place_of_birth = 5;
/* A Composite containing details of the Date and Place of death. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate date_and_place_of_death = 6;
/* A Composite containing details of a typical or main Genre relating to the Artist. */
	repeated ern_Genre genre = 7;
/* A Composite containing details of a Type of an agreement that covers the Artist's participation in making a SoundRecording. */
	optional ern_GoverningAgreementType governing_agreement_type = 8;
/* A Type of musical instrument played by the Artist. */
	repeated string instrument_type = 9;
/* A Flag indicating whether the Contributor is an Artist that has a contract for its part in creating the Resource (=true) or not (=false). */
	optional bool is_contracted_artist = 10;
/* A Flag indicating whether the Contributor is a featured Artist (=true) or not (=false). */
	optional bool is_featured_artist = 11;
/* A Composite containing details of a membership in a collective rights management organization. */
	repeated ern_Membership membership = 12;
/* The nationality of the Contributor. */
	repeated ern_ddexC_CurrentTerritoryCode nationality = 13;
/* A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators. */
	repeated ern_PartyId party_id = 14;
/* A Composite containing details of the PartyName(s). */
	repeated ern_PartyName party_name = 15;
/* A Composite containing details of the Date and Place of a Performance. */
	repeated ern_Performance performance = 16;
/* A Type of (musical) instrument primarily played by the Artist. */
	optional string primary_instrument_type = 17;
/* A Composite containing details of the primary role played by the Artist in relation to other Artists. */
	optional ern_ArtistRole primary_role = 18;
/* A Composite containing details of a role played by the Contributor. */
	repeated ern_ResourceContributorRole resource_contributor_role = 19;
/* The number indicating the order of the ResourceContributor in a group of ResourceContributors that have contributed to a Resource. This is represented in an XML schema as an XML Attribute.  */
	optional int32 sequence_number = 20;
/* The sex of the Contributor. */
	optional avs_Sex sex = 21;
/* The country of main residency of the Artist. */
	optional ern_AllTerritoryCode territory_of_residency = 22;
}

/* A Composite containing details of a DistributionChannelType. */
message ern_DistributionChannelType {
/* The Namespace of the DistributionChannelType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the DistributionChannelType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_DistributionChannelType ext_value = 3;
}

/* A Composite containing details of a DrmPlatformType. */
message ern_DrmPlatformType {
/* The Namespace of the DrmPlatformType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the DrmPlatformType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
/* The Identifier of the Version of the DrmPlatformType. This is represented in an XML schema as an XML Attribute. */
	optional string version = 3;
	optional avs_DrmPlatformType ext_value = 4;
}

/* A Composite containing details of the Date and Place of an Event. */
message ern_EventDate {
/* The Flag indicating whether the Event being described occurred sometime after the reported Date (=true) or not (=false). This is represented in an XML schema as an XML Attribute. */
	optional bool is_after = 1;
/* The Flag indicating whether the reported Date is approximate (=true) or exact (=false). This is represented in an XML schema as an XML Attribute.  */
	optional bool is_approximate = 2;
/* The Flag indicating whether the Event being described occurred sometime before the reported Date (=true) or not (=false). This is represented in an XML schema as an XML Attribute. */
	optional bool is_before = 3;
/* The Language and script for the LocationDescription as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 4;
/* A Description of the location in which the Event occurred. It offers the opportunity to describe a place more precisely than using the TerritoryCode. This is represented in an XML schema as an XML Attribute. */
	optional string location_description = 5;
/* The Territory in which the Event occurred. This is represented in an XML schema as an XML Attribute. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.  */
	optional string territory_code = 6;
	optional ern_ddex_IsoDate ext_value = 7;
}

/* A Composite containing details of the DateTime and Place of an Event. */
message ern_EventDateTime {
/* The Flag indicating whether the Event being described occurred sometime after the reported DateTime (=true) or not (=false). This is represented in an XML schema as an XML Attribute. */
	optional bool is_after = 1;
/* The Flag indicating whether the reported DateTime is approximate (=true) or exact (=false). This is represented in an XML schema as an XML Attribute.  */
	optional bool is_approximate = 2;
/* The Flag indicating whether the Event being described occurred sometime before the reported DateTime (=true) or not (=false). This is represented in an XML schema as an XML Attribute. */
	optional bool is_before = 3;
/* The Language and script for the LocationDescription as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 4;
/* A Description of the location in which the Event occurred. It offers the opportunity to describe a place more precisely than using the TerritoryCode. This is represented in an XML schema as an XML Attribute. */
	optional string location_description = 5;
/* The Territory in which the Event occurred. This is represented in an XML schema as an XML Attribute. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.  */
	optional string territory_code = 6;
	optional uint64 ext_value = 7;
}

/* A Composite containing details of a Resource which is a ContentItem of a ResourceGroup. */
message ern_ExtendedResourceGroupContentItem {
/* The Duration of the ContentItem featured, if it is a SoundRecording or Video (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). This Duration may be less than the normal Duration of the ContentItem, if only a part of it is included. */
	optional string duration = 1;
/* The Flag indicating whether a Resource in a Release is additional to those on the original Release of which this is a Version (=true) or not (=false). If this Element is not provided, it is assumed that this is False. */
	optional bool is_bonus_resource = 2;
/* The Flag indicating whether a Resource in a Release is hidden in some way from the Consumer (=true) or not (=false). If this Element is not provided, it is assumed that this is False. */
	optional bool is_hidden_resource = 3;
/* The Flag indicating whether a Resource in a Release may be made available to consumers despite the distribution of the containing Release not having been permitted (=true) or not (=false). If this Element is not provided, it is assumed that this is False. The actual status of a Resource as an InstantGratificationResource is determined in the relevant Deal. */
	optional bool is_instant_gratification_resource = 4;
/* A Flag indicating whether a Resource that is only available when the Release is purchased during a pre-order period (delivery is typically at ReleaseDate) (=true) or not (=false). If this Element is not provided, it is assumed that this is False. The actual status of a Resource as an PreOrderIncentiveResource is determined in the relevant Deal. */
	optional bool is_pre_order_incentive_resource = 5;
/* A Composite containing details of a ReleaseResourceReference (specific to this Message) for a Resource which is linked to this ContentItem. Example: an Image, Text or NonMusicalWorkVideo associated with a SoundRecording. This LocalAnchorReference is a xs:string starting with the letter A. */
	repeated ern_LinkedReleaseResourceReference linked_release_resource_reference = 6;
/* A Composite containing details of ReleaseIds of a Release which has the same content as the ResourceGroupContentItem. If available, a GRid has to be used. If the Release contains only one SoundRecording, the ISRC of the SoundRecording may be used instead. If the Release is an abstraction of a complete PhysicalProduct (such as a CD Album), the ICPN of the PhysicalProduct may be used instead. */
	optional ern_ReleaseId release_id = 7;
/* A Composite containing a ReleaseResourceReference for the ContentItem (specific to this Message). The LocalAnchorReference in this Composite is a xs:string starting with the letter A. */
	optional ern_ReleaseResourceReference release_resource_reference = 8;
/* The Identifier (specific to the Message) of a Release which has the same content as the ResourceGroupContentItem. This is a LocalReleaseAnchorReference starting with the letter R. */
	optional string resource_group_content_item_release_reference = 9;
/* A Composite containing details of the Type of the ContentItem. */
	repeated ern_ResourceType resource_type = 10;
/* The number indicating the order of the ContentItem among all Resources within this ResourceGroup. This is analogous to the Track number on a SoundCarrier. Not all ResourceGroups necessarily have SequenceNumbers (it is most applicable to SoundRecordings and MusicalWorkVideos). */
	optional int32 sequence_number = 11;
/* The SequenceNumber within the SequenceNumber. Example: if a Track is subdivided into several numbered sections, these are numbered with a SequenceSubNumber. The SequenceSubNumber is unique within its SequenceNumber. */
	optional int32 sequence_sub_number = 12;
}

/* A Composite containing an Extent and a UnitOfMeasure. */
message ern_Extent {
/* The UnitOfMeasure of the Extent. This is represented in an XML schema as an XML Attribute.  */
	optional avs_UnitOfExtent unit_of_measure = 1;
	optional double ext_value = 2;
}

/* A Composite containing details of promotional or other material in digital form related to a Release. */
message ern_ExternalResourceLink {
/* The Identifier which provides a communication link to the related external Resource. */
	optional string external_link = 1;
/* A Composite containing details of the Type of a Resource pointed to by the ExternalResourceLink. */
	repeated ern_ExternallyLinkedResourceType externally_linked_resource_type = 2;
/* The FileFormat of the external Resource. */
	optional string file_format = 3;
/* A URL of the linked external Resource. */
	repeated string u_r_l = 4;
/* A Composite containing details about the Period of Time during which the ExternalResourceLink is active. */
	optional ern_Period validity_period = 5;
}

/* A Composite containing details of an ExternallyLinkedResourceType. */
message ern_ExternallyLinkedResourceType {
/* The Namespace of the ExternallyLinkedResourceType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the ExternallyLinkedResourceType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_ExternallyLinkedResourceType ext_value = 3;
}

/* A Composite containing details of a File. */
message ern_File {
/* The Name of the File representing the Resource. The FileName should conform to the relevant choreography standard (if one is used). It may not contain any path information and the concatenation of FilePath and FileName shall be the a complete valid path to the Resource File. */
	optional string file_name = 1;
/* The location of the File representing the Resource relative to the XML file containing the NewReleaseMessage. The FilePath may not contain any FileName information and the concatenation of FilePath and FileName shall be a complete valid path to the Resource File. */
	optional string file_path = 2;
/* A Composite containing a HashSum of the File and information about the algorithm with which it has been generated. */
	optional ern_HashSum hash_sum = 3;
/* A URL of the File. */
	optional string u_r_l = 4;
}

/* A Composite containing details of a Fingerprint and its governing algorithm. */
message ern_Fingerprint {
/* The value of the Fingerprint. */
	optional string fingerprint = 1;
/* A parameter of the FingerprintAlgorithm. */
	optional string fingerprint_algorithm_parameter = 2;
/* A Composite containing details of the Type of FingerprintAlgorithm governing the Fingerprint. */
	optional ern_FingerprintAlgorithmType fingerprint_algorithm_type = 3;
/* The Identifier of the Version of the FingerprintAlgorithm. */
	optional string fingerprint_algorithm_version = 4;
/* The datatype of the Fingerprint. */
	optional avs_BinaryDataType fingerprint_data_type = 5;
}

/* A Composite containing details of a FingerprintAlgorithmType. */
message ern_FingerprintAlgorithmType {
/* The Namespace of the FingerprintAlgorithmType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the FingerprintAlgorithmType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_FingerprintAlgorithmType ext_value = 3;
}

/* A Composite containing a FrameRate and a UnitOfMeasure. */
message ern_FrameRate {
/* The UnitOfMeasure of the FrameRate. This is represented in an XML schema as an XML Attribute.  */
	optional avs_UnitOfFrameRate unit_of_measure = 1;
	optional double ext_value = 2;
}

/* A Composite containing details of a FulfillmentDate. */
message ern_FulfillmentDate {
/* A Date after which an end user can receive the Resource (in ISO 8601:2004 format: YYYY-MM-DD). If no FulfillmentDate is provided the FulfillmentDate is the StartDate of the respective Deal.  */
	optional ern_ddex_IsoDate fulfillment_date = 1;
/* The Identifier (specific to the Message) of a Release for a Resource. This is a LocalReleaseAnchorReference starting with the letter R. */
	repeated string resource_release_reference = 2;
}

/* A Composite containing details of a Genre. */
message ern_Genre {
/* A Composite containing a Description of a genre or style (such as Musical, literary or audio-visual) with which a Creation is associated. */
	optional ern_Description genre_text = 1;
/* The Language and script for the Elements of the Genre as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 2;
/* A Composite containing a Description of a secondary genre or style with which a Creation is associated. */
	optional ern_Description sub_genre = 3;
}

/* A Composite containing details of a GoverningAgreementType. */
message ern_GoverningAgreementType {
/* The Namespace of the GoverningAgreementType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the GoverningAgreementType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_GoverningAgreementType ext_value = 3;
}

/* A Composite containing details of a HashSum and its governing algorithm. */
message ern_HashSum {
/* The value of the HashSum. */
	optional string hash_sum = 1;
/* A Composite containing details of the Type of HashSumAlgorithm governing the HashSum. */
	optional ern_HashSumAlgorithmType hash_sum_algorithm_type = 2;
/* The datatype of the HashSum. */
	optional avs_BinaryDataType hash_sum_data_type = 3;
}

/* A Composite containing details of a HashSumAlgorithmType. */
message ern_HashSumAlgorithmType {
/* The Namespace of the HashSumAlgorithmType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the HashSumAlgorithmType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_HashSumAlgorithmType ext_value = 3;
}

/* A Composite containing details of a HostSoundCarrier of a SoundRecording. This Composite exists in the Release Notification Message Suite Standard to support the identification and matching of SoundRecording information. */
message ern_HostSoundCarrier {
/* A Composite containing details of the AdministratingRecordCompany for the Rights in the HostSoundCarrier. */
	repeated ern_AdministratingRecordCompany administrating_record_company = 1;
/* A Composite containing details of the DisplayArtist for the HostSoundCarrier. The DisplayArtist may be described through Name, Identifier and Roles. */
	repeated ern_Artist display_artist = 2;
/* A Composite containing details of ReleaseIds of the HostSoundCarrier. If available, a GRid has to be used. If the HostSoundCarrier contains only one SoundRecording, the ISRC of the SoundRecording may be used instead. */
	repeated ern_ReleaseId release_id = 3;
/* A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the HostSoundCarrier. */
	optional ern_RightsAgreementId rights_agreement_id = 4;
/* A Composite containing details of a Title of the HostSoundCarrier. */
	repeated ern_Title title = 5;
/* The TrackNumber of the SoundRecording within the HostSoundCarrier. */
	optional string track_number = 6;
/* The SequenceNumber within the Set of the volume containing the SoundRecording, where the HostSoundCarrier is a Set (such as a 'box set' of CDs). */
	optional string volume_number_in_set = 7;
}

/* A Composite containing details of an ICPN. */
message ern_ICPN {
/* The Flag indicating whether the ICPN is specifically an EAN (=true) or a UPC (=false). This is represented in an XML schema as an XML Attribute. This attribute is deprecated. DDEX advises that it will be removed at a future date and therefore recommends against using it. */
	optional bool is_ean = 1;
	optional string ext_value = 2;
}

/* A Composite containing details of an Image.  */
message ern_Image {
/* A Composite containing details of the Date and Place of the Event in which the Image was created. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate creation_date = 1;
/* A Composite containing details of the Image which may vary according to Territory of release. */
	repeated ern_ImageDetailsByTerritory image_details_by_territory = 2;
/* A Composite containing details of Identifiers of the Image. */
	repeated ern_ResourceProprietaryId image_id = 3;
/* A Composite containing details of the Type of the Image. */
	optional ern_ImageType image_type = 4;
/* The Flag indicating whether the Image is related to an Artist (=true) or not (=false). */
	optional bool is_artist_related = 5;
/* The Flag indicating whether the Image Element was updated (=true) or not (=false). When this Boolean Flag is set to true, the MessageRecipient is expected to replace any previously provided Image data with the now provided data. This attribute is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it. */
	optional bool is_updated = 6;
/* The Language and script for the Elements of the Image as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 7;
/* The Identifier (specific to the Message) of the Image within the Release which contains it. This is a LocalResourceAnchor starting with the letter A. */
	optional string resource_reference = 8;
/* A Composite containing details of a Title of the Image. */
	repeated ern_Title title = 9;
}

/* A Composite containing details of an ImageCodecType. */
message ern_ImageCodecType {
/* The Namespace of the ImageCodecType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the ImageCodecType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
/* The Identifier of the Version of the ImageCodecType. This is represented in an XML schema as an XML Attribute. */
	optional string version = 3;
	optional avs_ImageCodecType ext_value = 4;
}

/* A Composite containing details of Descriptors, Dates and other attributes of an Image which may vary according to Territory of release. */
message ern_ImageDetailsByTerritory {
/* A Composite containing details of the CLine for the Image. */
	repeated ern_CLine c_line = 1;
/* A Composite containing an Annotation which acknowledges record companies and/or other Parties giving permission for Artists or others featured on the Image. */
	optional ern_CourtesyLine courtesy_line = 2;
/* A Composite containing a Description of the subject of the Image. */
	optional ern_Description description = 3;
/* A Composite containing the Name to be used by a DSP when presenting Artist details of the Resource to a Consumer. A Resource-level DisplayArtistName shall only be provided if it differs from the DisplayArtistName for a Release that contains the Resource and is communicated in the same XML message. */
	repeated ern_Name display_artist_name = 4;
/* A Territory to which the Image details do not apply. Either this Element or Territory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard. */
	repeated ern_CurrentTerritoryCode excluded_territory_code = 5;
/* A Composite containing details of a FulfillmentDate. */
	optional ern_FulfillmentDate fulfillment_date = 6;
/* A Composite containing details of a Genre to which the Image belongs. */
	repeated ern_Genre genre = 7;
/* A Composite containing details of an indirect Contributor to the Image. */
	repeated ern_IndirectResourceContributor indirect_resource_contributor = 8;
/* A Composite containing details of a Description of the Image containing Keywords. */
	repeated ern_Keywords keywords = 9;
/* The Language and script for the Elements of the ImageDetailsByTerritory as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 10;
/* A Composite containing details of the Date and Place of the Event in which the Image was originally published, whether for physical or electronic/online distribution. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate original_resource_release_date = 11;
/* A Composite containing details of the classification of the Image according to advice which it carries about the level of explicitness or offensiveness of its content. */
	repeated ern_ParentalWarningType parental_warning_type = 12;
/* A Composite containing details of a Contributor to the Image. */
	repeated ern_DetailedResourceContributor resource_contributor = 13;
/* A Composite containing details of the Date and Place of the Event in which the Image was published, whether for physical or electronic/online distribution. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate resource_release_date = 14;
/* A Composite containing details of a Synopsis of the Image. */
	optional ern_Synopsis synopsis = 15;
/* A Composite containing technical details of the Image. */
	repeated ern_TechnicalImageDetails technical_image_details = 16;
/* A Territory to which the Image details apply. Either this Element or ExcludedTerritory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard. */
	repeated ern_CurrentTerritoryCode territory_code = 17;
/* A Composite containing details of a Title of the Image. */
	repeated ern_Title title = 18;
}

/* A Composite containing details of an ImageType. */
message ern_ImageType {
/* The Namespace of the ImageType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the ImageType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_ImageType ext_value = 3;
}

/* A Composite containing details of the Name, Identifier and role(s) of an indirect Contributor to a Resource. */
message ern_IndirectResourceContributor {
/* A Composite containing details of a role played by the indirect Contributor. */
	repeated ern_MusicalWorkContributorRole indirect_resource_contributor_role = 1;
/* The nationality of the indirect Contributor. */
	repeated ern_ddexC_CurrentTerritoryCode nationality = 2;
/* A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators. */
	repeated ern_PartyId party_id = 3;
/* A Composite containing details of the PartyName(s). */
	repeated ern_PartyName party_name = 4;
/* The number indicating the order of the indirect ResourceContributor in a group of ResourceContributors that have contributed to a Resource. This is represented in an XML schema as an XML Attribute.  */
	optional int32 sequence_number = 5;
}

/* A Composite containing details of a Description containing Keywords. */
message ern_Keywords {
/* The Language and script of the Keywords as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
	optional string ext_value = 2;
}

/* A Composite containing details of a LabelName. */
message ern_LabelName {
/* A Type of LabelName. This is represented in an XML schema as an XML Attribute. */
	optional avs_LabelNameType label_name_type = 1;
/* The Language and script of the LabelName as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 2;
/* The Namespace of the ReleaseType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 3;
/* A UserDefined value of the ReleaseType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 4;
	optional string ext_value = 5;
}

/* A Composite containing details of a LinkedReleaseResourceReference for a Resource which is linked to a ContentItem. */
message ern_LinkedReleaseResourceReference {
/* The Language and script for the LinkDescription as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
/* A Composite containing a  Description of the link for the ReleaseResourceReference. */
	optional string link_description = 2;
	optional ern_ddex_LocalResourceAnchorReference ext_value = 3;
}

/* A Composite containing details of a MIDI. */
message ern_MIDI {
/* A Composite containing details of the Date and Place of the Event in which the MIDI was created. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate creation_date = 1;
/* The Duration of the MIDI (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). */
	optional string duration = 2;
/* A Composite containing details of a MusicalWorkId of a MusicalWork used in the MIDI. */
	repeated ern_MusicalWorkId indirect_midi_id = 3;
/* A Composite containing a Description of the Type of instrumentation of the MusicalWork(s) in the MIDI. */
	optional ern_Description instrumentation_description = 4;
/* The Flag indicating whether the MIDI is related to an Artist (=true) or not (=false). */
	optional bool is_artist_related = 5;
/* The Flag indicating whether the MIDI is used as background to other audio or audiovisual material (=true) or not (=false). */
	optional bool is_background = 6;
/* The Flag indicating whether the MIDI is additional to those on the original Release of which this is a Version (=true) or not (=false). This element is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it. The IsBonusResource element in ResourceGroupContentItem should be used instead. */
	optional bool is_bonus_resource = 7;
/* The Flag indicating whether the MIDI is generated by a computer (=true) or not (=false). */
	optional bool is_computer_generated = 8;
/* The Flag indicating whether the MIDI is hidden in some way from the Consumer (=true) or not (=false). */
	optional bool is_hidden_resource = 9;
/* The Flag indicating whether the MIDI is instrumental (=true) or not (=false). */
	optional bool is_instrumental = 10;
/* The Flag indicating whether the MIDI is a Medley (=true) or not (=false). */
	optional bool is_medley = 11;
/* The Flag indicating whether the MIDI is a Potpourri (=true) or not (=false). */
	optional bool is_potpourri = 12;
/* The Flag indicating whether the MIDI Element was updated (=true) or not (=false). When this Boolean Flag is set to true, the MessageRecipient is expected to replace any previously provided MIDI data with the now provided data. This attribute is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it. */
	optional bool is_updated = 13;
/* The Language and script for the Elements of the MIDI as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 14;
/* The Language of the Performance recorded in the MIDI (represented by an ISO 639-2 LanguageCode). */
	optional avs_IsoLanguageCode language_of_performance = 15;
/* A Composite containing details of the Date and Place of the Event in which the MIDI was originally mastered (in either analogue or digital form). This is a string with the syntax YYYY[-MM[-DD]]. This element is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it. */
	optional ern_EventDate mastered_date = 16;
/* A Composite containing details of Descriptors and other attributes of the MIDI which may vary according to Territory of release.  */
	repeated ern_MidiDetailsByTerritory midi_details_by_territory = 17;
/* A Composite containing details of Identifiers of the Midi. */
	repeated ern_ResourceProprietaryId midi_id = 18;
/* A Composite containing details of the Type of the MIDI. */
	optional ern_MidiType midi_type = 19;
/* The Flag indicating whether the MIDI is followed by a period of silence (=false) or not (=true).  */
	optional bool no_silence_after = 20;
/* The Flag indicating whether the MIDI is preceded by a period of silence (=false) or not (=true).  */
	optional bool no_silence_before = 21;
/* A Flag indicating whether performer information is required (=true) or not (=false) when communicating details of the MIDI. */
	optional bool performer_information_required = 22;
/* A Composite containing details of the ReferenceTitle of the MIDI. */
	optional ern_ReferenceTitle reference_title = 23;
/* A Composite containing details of the Date and Place of the Event in which the MIDI was re-mastered (usually digitally). This is a string with the syntax YYYY[-MM[-DD]]. This element is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it. */
	optional ern_EventDate remastered_date = 24;
/* A Composite containing details of ResourceContainedResourceReferences referring to a Resource that is contained in the current MIDI. */
	optional ern_ResourceContainedResourceReferenceList resource_contained_resource_reference_list = 25;
/* A Composite containing details of one or more MusicalWorks contained in the MIDI. */
	optional ern_ResourceMusicalWorkReferenceList resource_musical_work_reference_list = 26;
/* The Identifier (specific to the Message) of the MIDI within the Release which contains it. This is a LocalResourceAnchor starting with the letter A. */
	optional string resource_reference = 27;
/* A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the MIDI. */
	optional ern_RightsAgreementId rights_agreement_id = 28;
}

/* A Composite containing details of a membership in a collective rights management organization. */
message ern_Membership {
/* The EndDate of the membership. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_ddex_IsoDate end_date = 1;
/* A Type of membership. */
	optional avs_MembershipType membership_type = 2;
/* A Composite containing details of the collective rights management organization. */
	optional ern_PartyDescriptor organization = 3;
/* The StartDate of the membership. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_ddex_IsoDate start_date = 4;
}

/* A Composite containing information about Parties in between the original MessageSender and ultimate MessageRecipient. */
message ern_MessageAuditTrail {
/* The Language and script for the Elements of the MessageAuditTrail as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
/* A Composite containing details of a Party handling the Message and the Time at which the handling took place. */
	repeated ern_MessageAuditTrailEvent message_audit_trail_event = 2;
}

/* A Composite containing details of a Party handling a Message and the Time at which the handling took place. */
message ern_MessageAuditTrailEvent {
/* The DateTime at which the Message was handled by the MessagingParty (the only allowed format is ISO 8601:2004: YYYY-MM-DDThh:mm:ssTZD). */
	optional uint64 date_time = 1;
/* A Composite containing details of a MessagingParty. */
	optional ern_MessagingParty messaging_party_descriptor = 2;
}

/* A Composite placed at the beginning of each DdexMessage providing information about the Message, such as MessageSender, MessageRecipient and a Message creation time stamp. */
message ern_MessageHeader {
/* A Composite containing a human-readable Comment about the Message. */
	optional ern_Comment comment = 1;
/* The Language and script for the Elements of the MessageHeader as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 2;
/* A Composite containing information about Parties in between the original MessageSender and ultimate MessageRecipient. */
	optional ern_MessageAuditTrail message_audit_trail = 3;
/* The indicator used to distinguish a live Message from a test Message. */
	optional avs_MessageControlType message_control_type = 4;
/* The DateTime on which the Message was created (the only allowed format is ISO 8601:2004: YYYY-MM-DDThh:mm:ssTZD). */
	optional uint64 message_created_date_time = 5;
/* The FileName, possibly including the FilePath, of the XML File containing the current Message. */
	optional string message_file_name = 6;
/* A xs:string used to uniquely identify the current Message. The MessageId shall be, in combination with the DdexPartyId (DPID) of the MessageSender, globally unique. Thus, a MessageSender shall never re-use a MessageId. */
	optional string message_id = 7;
/* A Composite containing details of the MessageRecipient. Note that if multiple MessageRecipients are provided, all of them will be able to read this information. */
	repeated ern_MessagingParty message_recipient = 8;
/* A Composite containing details of the MessageSender. */
	optional ern_MessagingParty message_sender = 9;
/* A xs:string used to uniquely identify the thread of Messages of which the current Message is a part. The MessageThreadId shall be, in combination with the DdexPartyId (DPID) of the MessageSender, globally unique. Thus, a MessageSender shall never re-use a MessageThreadId. One example of such a 'thread' is the chain of NewReleaseMessages being sent from ReleaseCreator to wholesale ReleaseDistributor 1 to retail DSP when communicating information about the same Release(s). A common MessageThreadId will allow all these messages to be tied together. */
	optional string message_thread_id = 10;
/* A Composite containing details of the Party on whose behalf the Message is sent. */
	optional ern_MessagingParty sent_on_behalf_of = 11;
}

/* A Composite containing details of a MessagingParty. */
message ern_MessagingParty {
/* The Language and script for the Elements of the MessagingParty as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
/* A Composite containing details of the PartyId for the Party handling the Message. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators. */
	repeated ern_PartyId party_id = 2;
/* A Composite containing details of the PartyNames for the Party handling the Message. */
	optional ern_PartyName party_name = 3;
/* A Composite containing a TradingName for the Party handling the Message. */
	optional ern_Name trading_name = 4;
}

/* A Composite containing details of Descriptors and other attributes of a MIDI which may vary according to Territory of release. */
message ern_MidiDetailsByTerritory {
/* A Composite containing details of the CLine for the MIDI. */
	repeated ern_CLine c_line = 1;
/* A Composite containing an Annotation which acknowledges record companies and/or other Parties giving permission for guests Artists or others featured on the MIDI. */
	optional ern_CourtesyLine courtesy_line = 2;
/* A Composite containing details of the DisplayArtist for the MIDI. The DisplayArtist may be described through Name, Identifier and Roles. */
	repeated ern_Artist display_artist = 3;
/* A Composite containing the Name to be used by a DSP when presenting Artist details of the Resource to a Consumer. A Resource-level DisplayArtistName shall only be provided if it differs from the DisplayArtistName for a Release that contains the Resource and is communicated in the same XML message. */
	repeated ern_Name display_artist_name = 4;
/* A Territory to which the MIDI details do not apply. Either this Element or Territory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard. */
	repeated ern_CurrentTerritoryCode excluded_territory_code = 5;
/* A Composite containing details of a FulfillmentDate. */
	optional ern_FulfillmentDate fulfillment_date = 6;
/* A Composite containing details of a Genre to which the MIDI belongs. */
	repeated ern_Genre genre = 7;
/* A Composite containing details of a HostSoundCarrier on which the MIDI appears (e.g., the CD on which it was originally released). This Composite exists in the Release Notification Message Suite Standard, to support the identification and matching of MIDI information. */
	repeated ern_HostSoundCarrier host_sound_carrier = 8;
/* A Composite containing details of an indirect Contributor to the MIDI. */
	repeated ern_IndirectResourceContributor indirect_resource_contributor = 9;
/* A Composite containing details of a Description of the MIDI containing Keywords. */
	repeated ern_Keywords keywords = 10;
/* A Composite containing the Name of the Label under which the Release is to be marketed. The use of multiple LabelNames is discouraged unless used to communicate label names in different languages and/or scripts. */
	repeated ern_LabelName label_name = 11;
/* The Language and script for the Elements of the MidiDetailsByTerritory as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 12;
/* A Composite containing a Comment about the promotion and marketing of the MIDI. */
	optional ern_Comment marketing_comment = 13;
/* A Composite containing details of the Date and Place of the Event in which the MIDI was originally published, whether for physical or electronic/online distribution. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate original_resource_release_date = 14;
/* A Composite containing details of the classification of the MIDI according to advice which it carries about the level of explicitness or offensiveness of its content. */
	repeated ern_ParentalWarningType parental_warning_type = 15;
/* A Composite containing details of the Date and Place of the Event in which the MIDI was re-mastered (usually digitally). This is a string with the syntax YYYY[-MM[-DD]]. This element is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it. */
	optional ern_EventDate remastered_date = 16;
/* A Composite containing details of a Contributor to the MIDI. */
	repeated ern_DetailedResourceContributor resource_contributor = 17;
/* A Composite containing details of the Date and Place of the Event in which the MIDI was published, whether for physical or electronic/online distribution. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate resource_release_date = 18;
/* A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the MIDI. */
	optional ern_RightsAgreementId rights_agreement_id = 19;
/* A Composite containing details of RightsController of Rights in the MIDI. */
	repeated ern_TypedRightsController rights_controller = 20;
/* The number indicating the order of the MIDI in a group of MIDIs in a Release. */
	optional int32 sequence_number = 21;
/* A Composite containing details of a Synopsis of the MIDI. */
	optional ern_Synopsis synopsis = 22;
/* A Composite containing technical details of the MIDI. */
	repeated ern_TechnicalMidiDetails technical_midi_details = 23;
/* A Territory to which the MIDI details apply. Either this Element or ExcludedTerritory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.  */
	repeated ern_CurrentTerritoryCode territory_code = 24;
/* A Composite containing details of a Title of the MIDI. */
	repeated ern_Title title = 25;
}

/* A Composite containing details of a MidiType. */
message ern_MidiType {
/* The Namespace of the MidiType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the MidiType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_MidiType ext_value = 3;
}

/* A Composite containing details of a MusicalWork. */
message ern_MusicalWork {
/* The Flag indicating whether the MusicalWork Element was updated (=true) or not (=false). When this Boolean Flag is set to true, the MessageRecipient is expected to replace any previously provided MusicalWork data with the now provided data. This attribute is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it. */
	optional bool is_updated = 1;
/* The Language and script for the Elements of the MusicalWork as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 2;
/* A Composite containing details a MusicalWorkContributor to the MusicalWork. */
	repeated ern_MusicalWorkContributor musical_work_contributor = 3;
/* A Composite containing details of Descriptors and other attributes of the MusicalWork which may vary according to Territory of release.  */
	repeated ern_MusicalWorkDetailsByTerritory musical_work_details_by_territory = 4;
/* A Composite containing details of a MusicalWorkId of the MusicalWork. */
	repeated ern_MusicalWorkId musical_work_id = 5;
/* The Identifier (specific to the Message) of the MusicalWork within the Release which contains it. This is a LocalMusicalWorkAnchor starting with the letter W. */
	optional string musical_work_reference = 6;
/* A Composite containing details of the Type of the MusicalWork. */
	repeated ern_MusicalWorkType musical_work_type = 7;
/* A Composite containing details of a ReferenceTitle of the MusicalWork. */
	repeated ern_ReferenceTitle reference_title = 8;
/* A Composite containing details of a RightShare for the MusicalWork. */
	repeated ern_RightShare right_share = 9;
/* A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork. */
	optional ern_RightsAgreementId rights_agreement_id = 10;
}

/* A Composite containing details a MusicalWorkContributor. */
message ern_MusicalWorkContributor {
/* A Composite containing details of a role played by the Contributor in relation to the MusicalWork. Note: This can be used in a DdexMessage in relation to any Work, Performance or Fixation any of which may form the whole or part of the Resource itself. Example: if an 'AssociatedPerformer' is shown as a Contributor to a MusicalWork it refers to a performer of a Resource (e.g. a SoundRecording) expressing the MusicalWork. */
	repeated ern_MusicalWorkContributorRole musical_work_contributor_role = 1;
/* A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators. */
	repeated ern_PartyId party_id = 2;
/* A Composite containing details of the PartyName(s). */
	repeated ern_PartyName party_name = 3;
/* The number indicating the order of the MusicalWorkContributor in a group of MusicalWorkContributors that have contributed to a MusicalWork. This is represented in an XML schema as an XML Attribute.  */
	optional int32 sequence_number = 4;
/* A Composite containing details of a society affiliation for the MusicalWorkContributor. */
	repeated ern_SocietyAffiliation society_affiliation = 5;
}

/* A Composite containing details of a MusicalWorkContributorRole. Note: This can be used in a DdexMessage in relation to any Work, Performance or Fixation any of which may form the whole or part of the Resource itself. Example: if an 'AssociatedPerformer' is shown as a Contributor to a MusicalWork it refers to a performer of a Resource (e.g. a SoundRecording) expressing the MusicalWork. */
message ern_MusicalWorkContributorRole {
/* The Namespace of the MusicalWorkContributorRole. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the MusicalWorkContributorRole. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_MusicalWorkContributorRole ext_value = 3;
}

/* A Composite containing details of Descriptors and other attributes of a MusicalWork which may vary according to Territory of release.  */
message ern_MusicalWorkDetailsByTerritory {
/* A Composite containing the Name to be used by a DSP when presenting Artist details of the Resource to a Consumer. A Resource-level DisplayArtistName shall only be provided if it differs from the DisplayArtistName for a Release that contains the Resource and is communicated in the same XML message. */
	repeated ern_Name display_artist_name = 1;
/* A Territory to which the MusicalWork details do not apply. Either this Element or Territory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard. */
	repeated ern_CurrentTerritoryCode excluded_territory_code = 2;
/* The Language and script for the Elements of the MusicalWorkDetailsByTerritory as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 3;
/* A Composite containing details a MusicalWorkContributor to the MusicalWork. */
	repeated ern_MusicalWorkContributor musical_work_contributor = 4;
/* A Territory to which the MusicalWork details apply. Either this Element or ExcludedTerritory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.  */
	repeated ern_CurrentTerritoryCode territory_code = 5;
}

/* A Composite containing details of a MusicalWorkId. */
message ern_MusicalWorkId {
/* A MusicalWorkId identifying a MusicalWork within the catalog of its Composer (typically of classical music) according to a standardized numbering (e.g. 'K' numbers for Koechel's catalog of Mozart). */
	repeated string composer_catalog_number = 1;
/* The ISWC (International Standard Musical Work Code defined in ISO 15707) identifying the MusicalWork. An ISWC comprises three parts: the letter 'T', followed by nine digits and then one check digit. DDEX will enforce the syntax [a-zA-Z][0-9]{10} using XML Schema in the future. */
	optional string i_s_w_c = 2;
/* The Flag indicating whether this Identifier is old and has been replaced by a new one (=true) or not (=false). The Flag may only be set to True when the new Identifier is also provided. If the Flag is not set, this Identifier is deemed to be the current one. */
	optional bool is_replaced = 3;
/* The MusicalWorkId identifying the MusicalWork within the catalog of its Composer (typically of classical music) as an opus number. */
	optional string opus_number = 4;
/* A Composite containing details of a ProprietaryIdentifier of the MusicalWork. */
	repeated ern_ProprietaryId proprietary_id = 5;
}

/* A Composite containing details of a MusicalWorkType. */
message ern_MusicalWorkType {
/* The Namespace of the MusicalWorkType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the MusicalWorkType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_MusicalWorkType ext_value = 3;
}

/* A Composite containing details of a Name. */
message ern_Name {
/* The Language and script of the Name as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
	optional string ext_value = 2;
}

message ern_NewReleaseMessage {
/* The Identifier of the Version of the business profile used for the Message. This is represented in an XML schema as an XML Attribute. */
	optional string business_profile_version_id = 1;
/* A Composite containing details of a Price change. */
	optional ern_CatalogTransfer catalog_transfer = 2;
/* A Composite containing details of one or more Collections contained in Releases for which data is provided in the NewReleaseMessage. */
	optional ern_CollectionList collection_list = 3;
/* A Composite containing details of one or more CueSheets contained in Releases for which data is provided in the NewReleaseMessage. */
	optional ern_CueSheetList cue_sheet_list = 4;
/* A Composite containing details of one or more Deals governing the Usage of the Releases in the Message. */
	optional ern_DealList deal_list = 5;
/* A Flag indicating whether the NewReleaseMessage is sent as part of a backfill activity (as opposed to providing ongoing deliveries of frontline Releases) (=true) or not (=false). When this element is not present, then no information on whether it is part of a backfill activity or not is provided. */
	optional bool is_backfill = 6;
/* The Language and script for the Elements of the NewReleaseMessage as defined in IETF RfC 5646. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 7;
/* The MessageHeader for the NewReleaseMessage. */
	optional ern_MessageHeader message_header = 8;
/* The Identifier of the Version of the XML schema used for the Message. This is represented in an XML schema as an XML Attribute. */
	optional string message_schema_version_id = 9;
/* A Composite containing details of one or more DDEX Releases contained in the NewReleaseMessage. */
	optional ern_ReleaseList release_list = 10;
/* The Identifier of the Version of the release profile used for the Message. This is represented in an XML schema as an XML Attribute. */
	optional string release_profile_version_id = 11;
/* A Composite containing details of one or more Resources. */
	optional ern_ResourceList resource_list = 12;
/* The indicator which distinguishes whether the Message contains original data or updates to previously sent data. This element is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it. */
	optional avs_UpdateIndicator update_indicator = 13;
/* A Composite containing details of one or more MusicalWorks, a Performance of which is contained in the Resources of the NewReleaseMessage. */
	optional ern_WorkList work_list = 14;
}

/* A Composite containing details of an OperatingSystemType. */
message ern_OperatingSystemType {
/* The Namespace of the OperatingSystemType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the OperatingSystemType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
/* The Identifier of the Version of the OperatingSystemType. This is represented in an XML schema as an XML Attribute. */
	optional string version = 3;
	optional avs_OperatingSystemType ext_value = 4;
}

/* A Composite containing details of a PLine. */
message ern_PLine {
/* The Language and script of the PLineText as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
/* The Name of the company releasing the Creation. This may be an owner or a licensee of the Creation. */
	optional string p_line_company = 2;
/* The text of the PLine. */
	optional string p_line_text = 3;
/* A Type of PLine. This is represented in an XML schema as an XML Attribute. If this Attribute is not provided, it is assumed that the PLine is a OriginalPLine. */
	optional avs_PLineType p_line_type = 4;
/* The Year of the PLine. */
	optional uint32 year = 5;
}

/* A Composite containing details of a ParentalWarningType. */
message ern_ParentalWarningType {
/* The Namespace of the ParentalWarningType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the ParentalWarningType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_ParentalWarningType ext_value = 3;
}

/* A Composite containing details of a Party. Parties are typically described through Names and/or Identifiers. */
message ern_PartyDescriptor {
/* A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators. */
	repeated ern_PartyId party_id = 1;
/* A Composite containing details of the PartyName(s). */
	repeated ern_PartyName party_name = 2;
}

/* A Composite containing details of a PartyId. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators. */
message ern_PartyId {
/* The Flag indicating whether the PartyId is a DPID (=true) or not (=false). This is represented in an XML schema as an XML Attribute. */
	optional bool is_d_p_i_d = 1;
/* The Flag indicating whether the PartyId is an ISNI (=true) or not (=false). This is represented in an XML schema as an XML Attribute. */
	optional bool is_i_s_n_i = 2;
/* The Namespace of the PartyId if it belongs to a proprietary Party xs:ID scheme. If the PartyId is a DPID, the Namespace Element must not be used. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 3;
	optional string ext_value = 4;
}

/* A Composite containing details of a PartyName. Name details for a Party typically either contain a FullName or a KeyName. */
message ern_PartyName {
/* A Composite containing a short version of the PartyName (e.g. for use on devices with a small display). */
	optional ern_Name abbreviated_name = 1;
/* A Composite containing the complete Name of the Party, in its normal form of presentation (e.g. John H. Smith, Acme Music Inc, the Beatles). */
	optional ern_Name full_name = 2;
/* The FullName transcribed using 7-bit ASCII code. */
	optional string full_name_ascii_transcribed = 3;
/* A Composite containing the complete Name of the Party in the form in which it normally appears in an alphabetic index, with the KeyName first (e.g. Smith, John H.; Beatles, The). */
	optional ern_Name full_name_indexed = 4;
/* A Composite containing the Part of a Name of the Party normally used to index an entry in an alphabetical list, such as 'Smith' (in John Smith) or 'Garcia Marquez' or 'Madonna' or 'Francis de Sales' (in Saint Francis de Sales). For persons, this normally corresponds to the 'family name' or names, which in Western name forms usually comes as a surname at the end of a FullName, and in Asian name forms often at the beginning of a FullName.  */
	optional ern_Name key_name = 5;
/* The Language and script for the Elements of the PartyName as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 6;
/* A Composite containing the Name(s) following the KeyName. Example:'Ibrahim' (in Anwar Ibrahim). This is common, e.g., in many Asian personal name forms where a FullName begins with the KeyName, which is followed by other names. */
	optional ern_Name names_after_key_name = 7;
/* A Composite containing the Name(s) preceding the KeyName in the FullName (and that is placed after it in a FullNameIndexed). Examples: 'George' in 'George Michael'; 'John Fitzgerald' in 'John Fitzgerald Kennedy'. Not all PartyNames have a NamesBeforeKeyName (e.g. Madonna, EMI Music Inc). */
	optional ern_Name names_before_key_name = 8;
}

/* A Composite containing details of a PercentageRate. */
message ern_Percentage {
/* A Flag indicating whether a PercentageRate is given as a value in the range [0,1] (=true) instead of a value in the range [0,100] (=false). This is represented in an XML schema as an XML Attribute. Absence of this attribute is synonymous with false. */
	optional bool has_max_value_of_one = 1;
	optional double ext_value = 2;
}

/* A Composite containing details of a Performance. */
message ern_Performance {
/* A Composite containing details of the Date of the Performance. This is a string with the syntax YYYY[-MM[-DD]]. The Place of the Performance should not be specified in the TerritoryCode and LocationDescription attributes. Instead, the sibling Territory element should be used. */
	optional ern_EventDate date = 1;
/* The territory of the Performance. */
	optional ern_AllTerritoryCode territory = 2;
}

/* A Composite containing details about a Period of Time. Periods are typically describedby at least a StartDate or EndDate (or StartDateTime or EndDateTime) where the StartDate(Time) and EndDate(Time) are included in the Period. Thus a one-day period can be described by using the same date in the StartDate and EndDate. */
message ern_Period {
/* A Composite containing details of the Date and Place of an Event that marks the end of the Period (in ISO 8601:2004 format: YYYY-MM-DD). The EndDate must not be earlier than the StartDate if both are provided. */
	optional ern_EventDate end_date = 1;
/* A Composite containing details of the DateTime and Place of an Event that marks the end of the Period (in ISO 8601:2004 format: YYYY-DD-MMThh:mm:ss). The EndDateTime must not be earlier than the StartDateTime if both are provided. */
	optional ern_EventDateTime end_date_time = 2;
/* A Composite containing details of the Date and Place of an Event that marks the beginning of the Period (in ISO 8601:2004 format: YYYY-MM-DD). The StartDate must be earlier than the EndDate if both are provided. */
	optional ern_EventDate start_date = 3;
/* A Composite containing details of the DateTime and Place of an Event that marks the beginning of the Period (in ISO 8601:2004 format: YYYY-DD-MMThh:mm:ss). The StartDateTime must be earlier than the EndDateTime if both are provided. */
	optional ern_EventDateTime start_date_time = 4;
}

/* A Composite containing details of physical returns. */
message ern_PhysicalReturns {
/* A Date which is the latest one for physical returns (in ISO 8601:2004 format: YYYY-MM-DD). */
	optional ern_ddex_IsoDate latest_date_for_physical_returns = 1;
/* The Flag indicating whether physical returns are allowed (=true) or not (=false). */
	optional bool physical_returns_allowed = 2;
}

/* A Composite containing details of a preview. */
message ern_PreviewDetails {
/* The position of the preview measured in Pixels or millimetres  from the bottom right corner of the Resource. */
	optional double bottom_right_corner = 1;
/* A Type of expression indicating how this should be perceived, e.g. as instruction (meaning that this has to be done to create the preview) or as information (meaning that this has been done to craete the preview). */
	optional avs_ExpressionType expression_type = 2;
/* A Composite containing a Description of the Type of Part that the preview relates to, e.g. chorus or intro. */
	optional ern_Description part_type = 3;
/* The position of the preview measured in Pixels or millimetres from the top left corner of the Resource. */
	optional double top_left_corner = 4;
}

/* A Composite containing details of a Price. */
message ern_Price {
/* The Currency of the Price (represented by an ISO 4217 CurrencyCode). This is represented in an XML schema as an XML Attribute.  */
	optional avs_CurrencyCode currency_code = 1;
	optional double ext_value = 2;
}

/* A Composite containing details of a Price. */
message ern_PriceInformation {
/* A Composite containing details of a wholesale Price for a single unit, which informs the informs the DSP of the Price the Release should be offered at. Note that the size of a bulk order is defined in the contract between MessageSender and the MessageRecipient. This element should not be combined with PriceType. */
	optional ern_Price bulk_order_wholesale_price_per_unit = 1;
/* A Composite containing a Description of the differences between multiple PriceInformation Composites. */
	optional ern_Description description = 2;
/* A Composite containing a Type of Price according to its value range. Typical examples include 'budget' and 'front line'. This is an informative element which is not meant to be used to send instructions on the Price to be used by the DSP. */
	optional ern_PriceRangeType price_range_type = 3;
/* A Composite containing further details of the Price, including a Price code that informs the DSP of the Price the Release should be offered at, often in combination with a rate card. This element should not be combined with WholesalePricePerUnit or BulkOrderWholesalePricePerUnit. */
	optional ern_PriceType price_type = 4;
/* A Composite containing details of a suggested retail Price. */
	optional ern_Price suggested_retail_price = 5;
/* A Composite containing details of a wholesale Price for a single unit of Usage, which informs the informs the DSP of the Price the Release should be offered at. Note that this Price applies to all UseTypes referenced in a DealTerm Composite. This element should not be combined with PriceType. */
	optional ern_Price wholesale_price_per_unit = 6;
}

/* A Composite containing details of a PriceRangeType. */
message ern_PriceRangeType {
/* The Namespace of the PriceRangeType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
	optional avs_PriceRangeType ext_value = 2;
}

/* A Composite containing details of a PriceType. */
message ern_PriceType {
/* The Namespace of the PriceType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
	optional avs_PriceType ext_value = 2;
}

/* A Composite containing details of a PromotionalCode. */
message ern_PromotionalCode {
/* The Namespace of the PromotionalCode. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
	optional string ext_value = 2;
}

/* A Composite containing details of a ProprietaryIdentifier. */
message ern_ProprietaryId {
/* The Namespace of the ProprietaryId. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
	optional string ext_value = 2;
}

message ern_PurgeReleaseMessage {
/* The Language and script for the Elements of the CatalogListMessage as defined in IETF RfC 5646. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
/* The MessageHeader for the NewReleaseMessage. */
	optional ern_MessageHeader message_header = 2;
/* The Identifier of the Version of the XML schema used for the Message. This is represented in an XML schema as an XML Attribute. */
	optional string message_schema_version_id = 3;
/* A Composite containing details of a DDEX Release to be purged. */
	optional ern_PurgedRelease purged_release = 4;
}

/* A Composite containing details of a DDEX Release to be purged. */
message ern_PurgedRelease {
/* A Composite containing details of ReleaseIds. If available, a GRid has to be used. If the Release contains only one SoundRecording, the ISRC of the SoundRecording may be used instead. If the Release is an abstraction of a complete PhysicalProduct (such as a CD Album), the ICPN of the PhysicalProduct may be used instead. */
	optional ern_ReleaseId release_id = 1;
/* A Composite containing details of a Contributor to the Release. */
	repeated ern_DetailedResourceContributor resource_contributor = 2;
/* A Composite containing details of a Title of the Release. */
	repeated ern_Title title = 3;
}

/* A Composite containing details of a Purpose. */
message ern_Purpose {
/* The Namespace of the Purpose. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the Purpose. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_Purpose ext_value = 3;
}

/* A Composite containing details of a RatingAgency. */
message ern_RatingAgency {
/* The Namespace of the RatingAgency. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the RatingAgency. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_RatingAgency ext_value = 3;
}

/* A Composite containing details of a Reason. */
message ern_Reason {
/* The Language and script of the Reason as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
	optional string ext_value = 2;
}

/* A Composite containing details of a ReasonType. */
message ern_ReasonType {
/* The Namespace of the ReasonType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the ReasonType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_ReasonType ext_value = 3;
}

/* A Composite containing details of a ReferenceTitle. */
message ern_ReferenceTitle {
/* The Language and script for the Elements of the ReferenceTitle as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
/* A Composite containing details of a SubTitle of the ReferenceTitle, including Titles of Versions used to differentiate different versions of the same Title, as required by the GRid and ISRC ReferenceDescriptiveMetadataSets (where the SubTitle is called Version Title). */
	optional ern_SubTitle sub_title = 2;
/* A Composite containing the text of the ReferenceTitle. */
	optional ern_TitleText title_text = 3;
}

/* A Composite containing details of a Release (or a PhysicalProduct or a DigitalProduct derived from such a Release) which is related to a Resource, Release or Product. */
message ern_RelatedRelease {
/* The Language and script for the Elements of the ReleatedRelease as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
/* A Composite containing details of the Date and Place of the Event in which the collection of tracks for the Release (e.g. the equivalent physical album on vinyl) was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD). */
	optional ern_EventDate original_release_date = 2;
/* A Composite containing details of the ReferenceTitle of the Release. */
	optional ern_ReferenceTitle reference_title = 3;
/* A Composite containing details of the Date and Place of the Event in which the related Release was or will be first made available for Usage in its current form, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD). */
	optional ern_EventDate release_date = 4;
/* A Composite containing details of ReleaseIds. If available, a GRid shall always to be used. If the Release contains only one SoundRecording, the ISRC of the SoundRecording may be used instead. If the Release is an abstraction of a complete PhysicalProduct (such as a CD Album), the ICPN of the PhysicalProduct may be used instead. More than one of these identifiers may be provided. */
	repeated ern_ReleaseId release_id = 5;
/* A Composite containing details of the Type of the relationship between the two Releases. */
	optional ern_ReleaseRelationshipType release_relationship_type = 6;
/* A Composite containing summary details of Descriptors and other attributes of the Release which may vary according to Territory of Release. Territory of Release may be the world. */
	repeated ern_ReleaseSummaryDetailsByTerritory release_summary_details_by_territory = 7;
/* A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the Release. */
	optional ern_RightsAgreementId rights_agreement_id = 8;
}

/* A Composite containing details of one or more offers related to one or more Releases. */
message ern_RelatedReleaseOfferSet {
/* A Composite containing details of a Deal that is available as an offer related to the Release(s). If no Deal is provided, the parent Release and the Releases listed in the RelatedReleaseOfferSet are bundled and offered under the ReleaseOffer associated with the parent Release. */
	repeated ern_Deal deal = 1;
/* The Language and script for the Elements of the RelatedReleaseOfferSet as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 2;
/* A Composite containing a Description of the Release(s) for which the offer(s) are available.This Element is designed to be used to describe entire collections or repertoires, and is not to be used to list individual Releases by xs:ID or Title. */
	optional ern_Description release_description = 3;
/* A Composite containing details of ReleaseIds of the Release(s) for which the offer(s) are available. */
	repeated ern_ReleaseId release_id = 4;
}

/* A Composite containing details of a DDEX Release. */
message ern_Release {
/* A Composite containing details of a WebPage for the Artist. */
	repeated ern_WebPage artist_profile_page = 1;
/* A Composite containing details of the CLine for the Release. */
	repeated ern_CLine c_line = 2;
/* The sum of the Durations of all Resources contained in the Release (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). */
	optional string duration = 3;
/* A Composite containing details of promotional or other material related to the Release. */
	repeated ern_ExternalResourceLink external_resource_link = 4;
/* A Composite containing details of the Date of the Event in which the collection of tracks for the Release (e.g. the equivalent physical album on vinyl) was or will be first made globally available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD). This element is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it. */
	optional ern_EventDate global_original_release_date = 5;
/* A Composite containing details of the Date of the Event in which the Release was or will be first made globally available for Usage in its current form, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD). This element is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it. */
	optional ern_EventDate global_release_date = 6;
/* The Flag indicating whether the Release is a main one as defined in the relevant Profile Standard (=true) or not (=false). This is represented in an XML schema as an XML Attribute. */
	optional bool is_main_release = 7;
/* The Language and script for the Elements of the Release as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 8;
/* The predominant Language of dubbing used in the  Resources (represented by an ISO 639-2 LanguageCode). */
	repeated avs_IsoLanguageCode language_of_dubbing = 9;
/* The predominant original Language of the Performance recorded in the Resources (represented by an ISO 639-2 LanguageCode). */
	repeated avs_IsoLanguageCode language_of_performance = 10;
/* A Composite containing details of the PLine for the Release. */
	repeated ern_PLine p_line = 11;
/* A Composite containing details of the ReferenceTitle of the Release. */
	optional ern_ReferenceTitle reference_title = 12;
/* A Composite containing details of one or more Collections contained in the Release. */
	optional ern_ReleaseCollectionReferenceList release_collection_reference_list = 13;
/* A Composite containing details of Descriptors and other attributes of the Release which may vary according to Territory of release. */
	repeated ern_ReleaseDetailsByTerritory release_details_by_territory = 14;
/* A Composite containing details of ReleaseIds. If available, a GRid has to be used. If the Release contains only one SoundRecording, the ISRC of the SoundRecording may be used instead. If the Release is an abstraction of a complete PhysicalProduct (such as a CD Album), the ICPN of the PhysicalProduct may be used instead. */
	repeated ern_ReleaseId release_id = 15;
/* The Identifier (specific to the Message) of the Release. Used to link the Release to one or more Deal(s). This is a LocalReleaseAnchor starting with the letter R. */
	repeated string release_reference = 16;
/* A Composite containing details of one or more Resources contained in the Release. */
	optional ern_ReleaseResourceReferenceList release_resource_reference_list = 17;
/* A Composite containing details of the form in which a ReleaseCreator anticipates offering the Release to Consumers. This may be overridden by the ReleaseType for specific Territories as specified in the ReleaseDetailsByTerritory Composite. */
	repeated ern_ReleaseType release_type = 18;
/* A Composite containing details of a ResourceOmissionReason. */
	optional ern_ResourceOmissionReason resource_omission_reason = 19;
/* A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the Release. */
	optional ern_RightsAgreementId rights_agreement_id = 20;
/* A Composite containing details of the A Composite containing details of the SalesReportingProxyReleaseId. */
	repeated ern_SalesReportingProxyReleaseId sales_reporting_proxy_release_id = 21;
/* The predominant Language of SubTitles in the  Resources (represented by an ISO 639-2 LanguageCode). */
	repeated avs_IsoLanguageCode sub_title_language = 22;
}

/* A Composite containing details of a ReleaseCollectionReference. */
message ern_ReleaseCollectionReference {
/* A Type of Collection in the context of a Release. This is represented in an XML schema as an XML Attribute. */
	optional avs_ReleaseResourceType release_resource_type = 1;
	optional ern_ddex_LocalCollectionAnchorReference ext_value = 2;
}

/* A Composite containing a list of ReleaseCollectionReferences. */
message ern_ReleaseCollectionReferenceList {
/* The number of referenced Collections (typically Chapters). */
	optional int32 number_of_collections = 1;
/* A Composite containing a ReleaseCollectionReference for a Collection (specific to this Message). The referenced Collection has to be of CollectionType Series, Season or Episode. */
	repeated ern_ReleaseCollectionReference release_collection_reference = 2;
}

/* A Composite containing details of one or more Deals pertaining to one or more Releases. */
message ern_ReleaseDeal {
/* A Composite containing details of a Deal governing the Usage of all Releases identified in the ReleaseDeal Composite. */
	repeated ern_Deal deal = 1;
/* The Identifier (specific to the Message) of a Release in the Deal. This is a LocalReleaseAnchorReference starting with the letter R. */
	repeated string deal_release_reference = 2;
/* The Date at which the MessageRecipient is expected to cancel all Deals for the Release and replace them with the Deals provided within the current Message. The EffectiveDate is typically the date on which the NewReleaseMessage is being sent. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_ddex_IsoDate effective_date = 3;
/* The Language and script for the Elements of the ReleaseDeal as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 4;
}

/* A Composite containing details of Descriptors and other attributes of a Release which may vary according to Territory of release. */
message ern_ReleaseDetailsByTerritory {
/* A Composite containing details of the AdministratingRecordCompany for the Release.  */
	repeated ern_AdministratingRecordCompany administrating_record_company = 1;
/* A Composite containing details of a rating for the Release. */
	repeated ern_AvRating av_rating = 2;
/* A Composite containing details of the CLine for the Release. */
	repeated ern_CLine c_line = 3;
/* A Composite containing details of a Character in the Release. A Character may be described through Name, Identifier and Roles. */
	repeated ern_Character character = 4;
/* A Composite containing details of the DisplayArtist for the Release. The DisplayArtist may be described through Name, Identifier and Roles. */
	repeated ern_Artist display_artist = 5;
/* A Composite containing the Name to be used by a DSP when presenting Artist details of the Release to a Consumer. */
	repeated ern_Name display_artist_name = 6;
/* A Composite containing details of a DisplayConductor for the Release. A DisplayConductor may be described through Name, Identifier and Roles. */
	repeated ern_Artist display_conductor = 7;
/* A Territory to which the ReleaseSummaryDetailsByTerritory do not apply. Either this Element or Territory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard. */
	repeated ern_CurrentTerritoryCode excluded_territory_code = 8;
/* A Composite containing details of a related Release File that a DSP can obtain. */
	repeated ern_File file = 9;
/* A Composite containing a Description providing details of how a DSP can obtain any related Release File. */
	repeated ern_Description file_availability_description = 10;
/* A Composite containing details of a Genre to which the Release belongs. */
	repeated ern_Genre genre = 11;
/* The Flag indicating whether the Release is a multiartist compilation (=true) or not (=false). */
	optional bool is_multi_artist_compilation = 12;
/* A Composite containing details of a Description of the Release containing Keywords. */
	repeated ern_Keywords keywords = 13;
/* A Composite containing the Name of the Label for the Release. The use of multiple LabelNames is discouraged unless used to communicate label names in different languages and/or scripts. */
	repeated ern_LabelName label_name = 14;
/* The Language and script for the Elements of the ReleaseSummaryDetailsByTerritory as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 15;
/* A Composite containing a Comment about the promotion and marketing of the Release. */
	optional ern_Comment marketing_comment = 16;
/* A number of units (typically a CD or a DVD) contained in a physical Release. This Element is for boxed sets. */
	optional int32 number_of_units_per_physical_release = 17;
/* A Composite containing details of the Date and Place of the Event in which the Release was or will be first made available in electronic/online format for Usage (in ISO 8601:2004 format: YYYY-MM-DD). This element is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it. */
	optional ern_EventDate original_digital_release_date = 18;
/* A Composite containing details of the Date and Place of the Event in which the collection of tracks for the Release (e.g. the equivalent physical album on vinyl) was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY[-MM[-DD]]). */
	optional ern_EventDate original_release_date = 19;
/* A Composite containing details of the PLine for the Release. */
	repeated ern_PLine p_line = 20;
/* A Composite containing details of the classification of the Release according to advice which it carries about the level of explicitness or offensiveness of its content. */
	repeated ern_ParentalWarningType parental_warning_type = 21;
/* A Composite containing details of a Release (or a PhysicalProduct or a DigitalProduct derived from such a Release) which is related to this Release. */
	repeated ern_RelatedRelease related_release = 22;
/* A Composite containing details of the Date and Place of the Event in which the Release was or will be first made available for Usage in its current form, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY[-MM[-DD]]). */
	optional ern_EventDate release_date = 23;
/* A Composite containing details of the form in which a ReleaseCreator anticipates offering the Release to Consumers. This overrides the ReleaseType specified globally for the Release. */
	repeated ern_ReleaseType release_type = 24;
/* A Composite containing details of a group of some or all of the Resources in the Release. ResourceGroups are used to signal groupings or sequences of Resources within a Release. Examples include individual carriers in a multi-carrier Release or classical Work groupings as well as the default order of Resources within a Release. */
	repeated ern_ResourceGroup resource_group = 25;
/* A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the Release. */
	optional ern_RightsAgreementId rights_agreement_id = 26;
/* A Composite containing details of a Synopsis of the Release. */
	optional ern_Synopsis synopsis = 27;
/* A Territory to which the ReleaseSummaryDetailsByTerritory apply. Either this Element or ExcludedTerritory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard. */
	repeated ern_CurrentTerritoryCode territory_code = 28;
/* A Composite containing details of a Title of the Release. */
	repeated ern_Title title = 29;
}

/* A Composite containing details of a ReleaseId. If available, a GRid should always to be used. If the Release contains only one SoundRecording, the ISRC of the SoundRecording may be used instead. If the Release is an abstraction of a complete PhysicalProduct (such as a CD Album), the ICPN of the PhysicalProduct may be used instead. */
message ern_ReleaseId {
/* A Composite containing details of the CatalogNumber of the Release. */
	optional ern_CatalogNumber catalog_number = 1;
/* The GRid identifying the Release. This is the preferred Element and is mandatory if a GRid is available. A GRid comprises four parts: the xs:string 'A1', followed by five alphanumeric characters, ten alphanumeric characters and and one alphanumeric character. DDEX will enforce the syntax [a-zA-Z0-9]{18} using XML Schema in the future. */
	optional string g_rid = 2;
/* A Composite containing details of the ICPN used as proxy for identification of the Release. Only applicable when the Release is an abstraction of a complete PhysicalProduct. An ICPN comprises 12 or 13 digits, depending whether it is an EAN (13) or a UPC (12). DDEX will enforce the syntax [0-9]{12,13} using XML Schema in the future. */
	optional ern_ICPN i_c_p_n = 3;
/* The ISRC (International Standard Recording Code as defined in  ISO 3901) used as proxy for identification of the Release. Only applicable when the Release only contains one SoundRecording or one MusicalWorkVideo. An ISRC comprises four parts: two characters, followed by three alphanumeric characters, then two digits and five digits. DDEX will enforce the syntax [a-zA-Z]{2}[a-zA-Z0-9]{3}[0-9]{7} using XML Schema in the future. */
	optional string i_s_r_c = 4;
/* The Flag indicating whether this Identifier is old and has been replaced by a new one (=true) or not (=false). The Flag may only be set to True when the new Identifier is also provided. If the Flag is not set, this Identifier is deemed to be the current one. */
	optional bool is_replaced = 5;
/* A Composite containing details of a ProprietaryIdentifier of the Release. */
	repeated ern_ProprietaryId proprietary_id = 6;
}

/* A Composite containing details of one or more Releases. */
message ern_ReleaseList {
/* The Language and script for the Elements of the ReleaseList as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
/* A Composite containing details of a DDEX Release. */
	repeated ern_Release release = 2;
}

/* A Composite containing details of a ReleaseRelationshipType, e.g. between an AudioClipRelease and a VideoClipRelease. */
message ern_ReleaseRelationshipType {
/* The Namespace of the ReleaseRelationshipType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the ReleaseRelationshipType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_ReleaseRelationshipType ext_value = 3;
}

/* A Composite containing details of a ReleaseResourceReference. */
message ern_ReleaseResourceReference {
/* A Type of Resource in the context of a Release. This is represented in an XML schema as an XML Attribute. */
	optional avs_ReleaseResourceType release_resource_type = 1;
	optional ern_ddex_LocalResourceAnchorReference ext_value = 2;
}

/* A Composite containing a list of ReleaseResourceReferences. */
message ern_ReleaseResourceReferenceList {
/* A Composite containing a Reference for a Resource (specific to this Message). The LocalAnchorReference in this Composite is a xs:string starting with the letter A. */
	repeated ern_ReleaseResourceReference release_resource_reference = 1;
}

/* A Composite containing summary details of Descriptors and other attributes of a Release which may vary according to Territory of Release. */
message ern_ReleaseSummaryDetailsByTerritory {
/* A Composite containing the Name to be used by a DSP when presenting Artist details of the Release to a Consumer. */
	repeated ern_Name display_artist_name = 1;
/* A Territory to which the ReleaseSummaryDetailsByTerritory do not apply. Either this Element or Territory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard. */
	repeated ern_CurrentTerritoryCode excluded_territory_code = 2;
/* A Composite containing the Name of the Label for the Release. The use of multiple LabelNames is discouraged unless used to communicate label names in different languages and/or scripts. */
	repeated ern_LabelName label_name = 3;
/* The Language and script for the Elements of the ReleaseSummaryDetailsByTerritory as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 4;
/* A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the Release. */
	optional ern_RightsAgreementId rights_agreement_id = 5;
/* A Territory to which the ReleaseSummaryDetailsByTerritory apply. Either this Element or ExcludedTerritory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard. */
	repeated ern_CurrentTerritoryCode territory_code = 6;
}

/* A Composite containing details of a ReleaseType. */
message ern_ReleaseType {
/* The Namespace of the ReleaseType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the ReleaseType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_ReleaseType ext_value = 3;
}

/* A Composite containing details of a ResourceContainedResourceReference for the case where one Resource contains another one. */
message ern_ResourceContainedResourceReference {
/* The total Duration of the Resource that has been used in a specified context (this may be less than the total Duration of the Resource) (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). */
	optional string duration_used = 1;
/* A Composite containing details of the Purpose of the usage. */
	optional ern_Purpose purpose = 2;
/* A Reference for a Resource (specific to this Message). This is a LocalResourceAnchorReference starting with the letter A. */
	optional string resource_contained_resource_reference = 3;
/* The start point of the preview given in seconds from the start of the referenced Resource. */
	optional double start_point = 4;
}

/* A Composite containing details of one or more ResourceContainedResourceReferences.  */
message ern_ResourceContainedResourceReferenceList {
/* A Composite containing details of a ResourceContainedResourceReference. */
	repeated ern_ResourceContainedResourceReference resource_contained_resource_reference = 1;
}

/* A Composite containing details of the Name, Identifier and role(s) of a Contributor to a Resource. */
message ern_ResourceContributor {
/* A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators. */
	repeated ern_PartyId party_id = 1;
/* A Composite containing details of the PartyName(s). */
	repeated ern_PartyName party_name = 2;
/* A Composite containing details of a role played by the Contributor. */
	repeated ern_ResourceContributorRole resource_contributor_role = 3;
/* The number indicating the order of the ResourceContributor in a group of ResourceContributors that have contributed to a Resource. This is represented in an XML schema as an XML Attribute.  */
	optional int32 sequence_number = 4;
}

/* A Composite containing details of a ResourceContributorRole. Note: This can be used in a DdexMessage in relation to any Work, Performance or Fixation any of which may form the whole or part of the Resource itself. */
message ern_ResourceContributorRole {
/* The Namespace of the ResourceContributorRole. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the ResourceContributorRole. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_ResourceContributorRole ext_value = 3;
}

/* A Composite containing details of a ResourceGroup. ResourceGroups are used to signal groupings or sequences of Resources within a Release. Examples include individual carriers in a multi-carrier Release or classical Work groupings as well as the default order of Resources within a Release. */
message ern_ResourceGroup {
/* A Composite containing details of a Carrier. */
	repeated ern_CarrierType carrier_type = 1;
/* A Composite containing details of the DisplayArtist for the ResourceGroup. The DisplayArtist may be described through Name, Identifier and Roles. */
	repeated ern_Artist display_artist = 2;
/* A Composite containing details of a DisplayComposer for the ResourceGroup. A DisplayComposer may be described through Name, Identifier and Roles. */
	repeated ern_Artist display_composer = 3;
/* A Composite containing details of a DisplayConductor for the ResourceGroup. A DisplayConductor may be described through Name, Identifier and Roles. */
	repeated ern_Artist display_conductor = 4;
/* A Composite containing details of an indirect Contributor to this ResourceGroup. */
	repeated ern_IndirectResourceContributor indirect_resource_contributor = 5;
/* The Language and script for the Elements of the ResourceGroup as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 6;
/* A Composite containing details of ReleaseIds of a Release which has the same content as the ResourceGroup. If available, a GRid has to be used. If the Release contains only one SoundRecording, the ISRC of the SoundRecording may be used instead. If the Release is an abstraction of a complete PhysicalProduct (such as a CD Album), the ICPN of the PhysicalProduct may be used instead. */
	optional ern_ReleaseId release_id = 7;
/* A Composite containing details of a Contributor to this ResourceGroup. This includes roles such as the compiler of the ResourceGroup, and may summarize details of Contributors to individual SoundRecordings or other content. */
	repeated ern_DetailedResourceContributor resource_contributor = 8;
/* A ResourceGroup contained within this ResourceGroup. ResourceGroups are used to signal groupings or sequences of Resources within a Release. Examples include individual carriers in a multi-carrier Release or classical Work groupings as well as the default order of Resources within a Release. */
	repeated ern_ResourceGroup resource_group = 9;
/* A Composite containing details of a Resource contained in the ResourceGroup. */
	repeated ern_ExtendedResourceGroupContentItem resource_group_content_item = 10;
/* The Identifier (specific to the Message) of a Release which has the same content as the ResourceGroup. This is a LocalReleaseAnchorReference starting with the letter R. */
	optional string resource_group_release_reference = 11;
/* A Composite containing details of a Resource contained in the ResourceGroup. */
	optional ern_ResourceGroupResourceReferenceList resource_group_resource_reference_list = 12;
/* The number indicating the order of the ResourceGroup within all ResourceGroups at this level. The default value is 1, and the value must be incremented by 1 for each ResourceGroup occurring at a particular level. */
	optional int32 sequence_number = 13;
/* A Composite containing details of a Title of the ResourceGroup. Typically this will apply to 'sub' ResourceGroups within a hierarchy, e.g., different Albums in a Set. */
	repeated ern_Title title = 14;
}

/* A Composite containing a list of ResourceGroupResourceReferences. */
message ern_ResourceGroupResourceReferenceList {
/* A Reference for a Resource (specific to this Message). This is a LocalResourceAnchorReference starting with the letter A. */
	repeated string resource_group_resource_reference = 1;
}

/* A Composite containing details of one or more Resources. ResourceList provides a simple means of aggregating Resources without any explicit sequencing or grouping: if that is needed it is provided by the ResourceGroup Composite.  */
message ern_ResourceList {
/* A Composite containing details of an Image. */
	repeated ern_Image image = 1;
/* The Language and script for the Elements of the ResourceList as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 2;
/* A Composite containing details of a MIDI. */
	repeated ern_MIDI m_i_d_i = 3;
/* A Composite containing details of a SheetMusic. */
	repeated ern_SheetMusic sheet_music = 4;
/* A Composite containing details of an item of Software. */
	repeated ern_Software software = 5;
/* A Composite containing details of a SoundRecording. */
	repeated ern_SoundRecording sound_recording = 6;
/* A Composite containing details of a Text. */
	repeated ern_Text text = 7;
/* A Composite containing details of a UserDefinedResource. */
	repeated ern_UserDefinedResource user_defined_resource = 8;
/* A Composite containing details of a Video. */
	repeated ern_Video video = 9;
}

/* A Composite containing a ResourceMusicalWorkReference. */
message ern_ResourceMusicalWorkReference {
/* The total Duration of the MusicalWork that has been used in a specified context (this may be less than the total Duration of the MusicalWork) (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). */
	optional string duration_used = 1;
/* The Flag indicating whether the MusicalWork is a Fragment (=true) or not (=false). */
	optional bool is_fragment = 2;
/* A Reference for a MusicalWork (specific to this Message). This is a LocalMusicalWorkAnchorReference starting with the letter W. */
	optional string resource_musical_work_reference = 3;
/* The number indicating the order of the MusicalWork in a group of MusicalWorks within a Medley, SoundRecording or other Resource. */
	optional int32 sequence_number = 4;
}

/* A Composite containing a list of ResourceMusicalWorkReferences. */
message ern_ResourceMusicalWorkReferenceList {
/* A Composite containing a ResourceMusicalWorkReference for a MusicalWork (specific to this Message). */
	repeated ern_ResourceMusicalWorkReference resource_musical_work_reference = 1;
}

/* A Composite containing details of a ResourceOmissionReason. */
message ern_ResourceOmissionReason {
/* The Namespace of the ResourceOmissionReason. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the ResourceOmissionReason. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_ResourceOmissionReason ext_value = 3;
}

/* A Composite containing details of ProprietaryIdentifiers of a Resource. */
message ern_ResourceProprietaryId {
/* The Flag indicating whether this Identifier is old and has been replaced by a new one (=true) or not (=false). The Flag may only be set to True when the new Identifier is also provided. If the Flag is not set, this Identifier is deemed to be the current one. */
	optional bool is_replaced = 1;
/* A Composite containing details of a ProprietaryIdentifier of the Resource. */
	repeated ern_ProprietaryId proprietary_id = 2;
}

/* A Composite containing details of a ResourceType. For example a SoundRecording of a Performance of a MusicalWork or an Image of an Artist. */
message ern_ResourceType {
/* The Namespace of the ResourceType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the ResourceType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_ResourceType ext_value = 3;
}

/* A Composite containing details of one or more Usages that govern a Resource. */
message ern_ResourceUsage {
/* A Reference for a Resource (specific to this Message). This is a LocalResourceAnchorReference starting with the letter A. */
	repeated string deal_resource_reference = 1;
/* A Composite containing the Types and number of Usages applicable to the Resource. */
	repeated ern_Usage usage = 2;
}

/* A Composite containing details of a RightShare. */
message ern_RightShare {
/* A Composite containing details of a Carrier. */
	repeated ern_CarrierType carrier_type = 1;
/* A Composite containing details of the fundamental business model which applies (e.g. SubscriptionModel and PayAsYouGoModel). The CommercialModelType indicates how the Consumer pays for the Service or Release. */
	repeated ern_CommercialModelType commercial_model_type = 2;
/* A Composite containing details of a distribution channel used to disseminate a Service or Release to a Consumer. */
	repeated ern_DistributionChannelType distribution_channel_type = 3;
/* A Territory to which the RightShare does not apply. Either this Element or Territory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard. */
	repeated ern_CurrentTerritoryCode excluded_territory_code = 4;
/* The Flag indicating whether a RightsController retains the right of refusal regarding the granting of the first licence for creating a SoundRecording of a Musical Work (=true) or not (=false). */
	optional bool has_first_license_refusal = 5;
/* The Language and script for the Elements of the RightShare as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 6;
/* The legal status of a License for the RightShare. */
	optional avs_LicenseStatus license_status = 7;
/* A Type of the RightsClaim related to a MusicalWork. */
	repeated avs_MusicalWorkRightsClaimType musical_work_rights_claim_type = 8;
/* A Composite containing details of one or more Creations contained in the RightShare. */
	optional ern_RightShareCreationReferenceList right_share_creation_reference_list = 9;
/* A Composite containing details of Identifiers for the RightShare. */
	optional ern_RightsAgreementId right_share_id = 10;
/* The share of the licensed Rights owned by the RightsController. RightShare information is given as a xs:decimal value with up to 6 digits (e.g. '12.5' represents 12.5%). */
	optional ern_Percentage right_share_percentage = 11;
/* The Identifier (specific to the Message) of the RightShare within the Release which contains it. This is a LocalRightShareAnchor starting with the letter S. */
	optional string right_share_reference = 12;
/* The Flag indicating whether the RightSharePercentage is unknown (=true) or not (=false). */
	optional bool right_share_unknown = 13;
/* A Composite containing details of a RightsController of Rights in a Creation. */
	repeated ern_RightsController rights_controller = 14;
/* A Type of Right covered by the RightShare. One of the Elements RightsType and UseType must be present. The RightsType is defined according to the jurisdiction of the Territory indicated in the TerritoryCode XmlAttribute. */
	repeated ern_RightsType rights_type = 15;
/* A Composite containing details of a Reference to a TextDocument containing details of a Tariff (in the form of an Identifier, Name or Description) that is to be applied to the RightShare. */
	optional ern_TariffReference tariff_reference = 16;
/* A Territory to which the RightShare applies. Either this Element or ExcludedTerritory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard. */
	repeated ern_CurrentTerritoryCode territory_code = 17;
/* A Composite containing details of a nature of a Service, or a Release, as used by a Consumer. One of the Elements RightsType and UseType must be present. */
	repeated ern_UseType use_type = 18;
/* A Composite containing details of a physical interface by which a Consumer uses a Service or Release. */
	repeated ern_UserInterfaceType user_interface_type = 19;
/* A Composite containing details about the Period of Time for which the RightShare is valid. */
	optional ern_Period validity_period = 20;
}

/* A Composite containing a list of RightShareCreationReferences. */
message ern_RightShareCreationReferenceList {
/* A Reference for a Release (specific to this Message) that is part of the RightShare. This is a LocalReleaseAnchorReference starting with the letter R. The RightShare covers the Works used in the Release(s). */
	repeated string right_share_release_reference = 1;
/* A Reference for a Resource (specific to this Message) that is part of the RightShare. This is a LocalResourceAnchorReference starting with the letter A. The RightShare covers the Works used in the Resource(s). */
	repeated string right_share_resource_reference = 2;
/* A Reference for a Work (specific to this Message) that is part of the RightShare. This is a LocalMusicalWorkAnchorReference starting with the letter W. */
	repeated string right_share_work_reference = 3;
}

/* A Composite containing details of Identifiers of a License, Claim, RightShare or contract. */
message ern_RightsAgreementId {
/* A MusicalWork License Identifier identifying a License. If the Composite is meant to describe a Claim, RightShare or contract, then the License relates to that Claim, RightShare or contract. A MWLI comprises four parts: one of the xs:strings 'M1' or 'M2' or 'M3' or 'M4', followed by five alphanumeric characters, ten alphanumeric characters and one alphanumeric check character. */
	repeated string m_w_l_i = 1;
/* A Composite containing details of a ProprietaryIdentifier of the License, Claim, RightShare or contract. */
	repeated ern_ProprietaryId proprietary_id = 2;
}

/* A Composite containing details of a rights claim policy. */
message ern_RightsClaimPolicy {
/* A Composite containing details of conditions. */
	optional ern_Condition condition = 1;
/* A Type of rights claim policy. */
	optional avs_RightsClaimPolicyType rights_claim_policy_type = 2;
}

/* A Composite containing details of a RightsController. RightsControllers are typicallydescribed by Name, Identifier and role(s). */
message ern_RightsController {
/* A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators. */
	repeated ern_PartyId party_id = 1;
/* A Composite containing details of the PartyName(s). */
	repeated ern_PartyName party_name = 2;
/* The share of the licensed Rights owned by the RightsController. RightShare information is given as a xs:decimal value with up to 6 digits (e.g. '12.5' represents 12.5%). If no information is given, 100% is assumed. */
	optional ern_Percentage right_share_percentage = 3;
/* The Flag indicating whether the RightSharePercentage is unknown (=true) or not (=false). */
	optional bool right_share_unknown = 4;
/* A role that describes the Party involved in the administration of Rights. */
	repeated avs_RightsControllerRole rights_controller_role = 5;
/* A type of the RightsController. */
	optional avs_RightsControllerType rights_controller_type = 6;
/* The number indicating the order of the RightsController in a group of RightsControllers. This is represented in an XML schema as an XML Attribute.  */
	optional int32 sequence_number = 7;
}

/* A Composite containing details of a RightsType. */
message ern_RightsType {
/* The Namespace of the RightsType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A Territory to which the RightsType applies. The RightsType is defined according to the jurisdiction of this Territory. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.  */
	optional string territory_code = 2;
/* A UserDefined value of the RightsType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 3;
	optional avs_RightsCoverage ext_value = 4;
}

/* A Composite containing details of a SalesReportingProxyReleaseId. */
message ern_SalesReportingProxyReleaseId {
/* A Composite containing the textual Description of the reason for the Identifier being used as a proxy. */
	optional ern_Reason reason = 1;
/* A Composite containing details of a ReasonType. */
	optional ern_ReasonType reason_type = 2;
/* A Composite containing details of ReleaseIds. If available, a GRid should always be used. */
	optional ern_ReleaseId release_id = 3;
}

/* A Composite containing a SamplingRate and a UnitOfMeasure. */
message ern_SamplingRate {
/* The UnitOfMeasure of the SamplingRate. This is represented in an XML schema as an XML Attribute.  */
	optional avs_UnitOfFrequency unit_of_measure = 1;
	optional double ext_value = 2;
}

/* A Composite containing details of a SheetMusic. */
message ern_SheetMusic {
/* A Composite containing details of the Date and Place of the Event in which the SheetMusic was created. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate creation_date = 1;
/* A Composite containing details of a MusicalWorkId of a MusicalWork used in the SheetMusic. */
	repeated ern_MusicalWorkId indirect_sheet_music_id = 2;
/* The Flag indicating whether the SheetMusic is related to an Artist (=true) or not (=false). */
	optional bool is_artist_related = 3;
/* The Flag indicating whether the SheetMusic Element was updated (=true) or not (=false). When this Boolean Flag is set to true, the MessageRecipient is expected to replace any previously provided SheetMusic data with the now provided data. This attribute is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it. */
	optional bool is_updated = 4;
/* The Language and script for the Elements of the SheetMusic as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 5;
/* The Language of the lyrics of the SheetMusic (represented by an ISO 639-2 LanguageCode). */
	optional avs_IsoLanguageCode language_of_lyrics = 6;
/* A Composite containing details of the ReferenceTitle of the SheetMusic. */
	optional ern_ReferenceTitle reference_title = 7;
/* A Composite containing details of ResourceContainedResourceReferences referring to a Resource that is contained in the current SheetMusic. */
	optional ern_ResourceContainedResourceReferenceList resource_contained_resource_reference_list = 8;
/* A Composite containing details of one or more MusicalWorks contained in the SheetMusic. */
	optional ern_ResourceMusicalWorkReferenceList resource_musical_work_reference_list = 9;
/* The Identifier (specific to the Message) of the SheetMusic within the Release which contains it. This is a LocalResourceAnchor starting with the letter A. */
	optional string resource_reference = 10;
/* A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) related to the SheetMusic. */
	optional ern_RightsAgreementId rights_agreement_id = 11;
/* A Composite containing details of the SheetMusic which may vary according to Territory of release. */
	repeated ern_SheetMusicDetailsByTerritory sheet_music_details_by_territory = 12;
/* A Composite containing details of Identifiers of the SheetMusic. */
	repeated ern_SheetMusicId sheet_music_id = 13;
/* A Composite containing details of the Type of the SheetMusic. */
	optional ern_SheetMusicType sheet_music_type = 14;
}

/* A Composite containing details of a SheetMusicCodecType. */
message ern_SheetMusicCodecType {
/* The Namespace of the SheetMusicCodecType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the SheetMusicCodecType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
/* The Identifier of the Version of the SheetMusicCodecType. This is represented in an XML schema as an XML Attribute. */
	optional string version = 3;
	optional avs_SheetMusicCodecType ext_value = 4;
}

/* A Composite containing details of Descriptors, Dates and other attributes of a SheetMusic which may vary according to Territory of release. */
message ern_SheetMusicDetailsByTerritory {
/* A Composite containing details of the CLine for the SheetMusic. */
	repeated ern_CLine c_line = 1;
/* A Composite containing an Annotation which acknowledges record companies and/or other Parties giving permission for Artists or others featured in the SheetMusic. */
	optional ern_CourtesyLine courtesy_line = 2;
/* A Composite containing the Name to be used by a DSP when presenting Artist details of the Resource to a Consumer. A Resource-level DisplayArtistName shall only be provided if it differs from the DisplayArtistName for a Release that contains the Resource and is communicated in the same XML message. */
	repeated ern_Name display_artist_name = 3;
/* A Territory to which the SheetMusic details do not apply. Either this Element or Territory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard. */
	repeated ern_CurrentTerritoryCode excluded_territory_code = 4;
/* A Composite containing details of a FulfillmentDate. */
	optional ern_FulfillmentDate fulfillment_date = 5;
/* A Composite containing details of a Genre to which the SheetMusic belongs. */
	repeated ern_Genre genre = 6;
/* A Composite containing details of an indirect Contributor to the SheetMusic. */
	repeated ern_IndirectResourceContributor indirect_resource_contributor = 7;
/* The Language and script for the Elements of the SheetMusicDetailsByTerritory as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 8;
/* A Composite containing details of the Date and Place of the Event in which the SheetMusic was originally published, whether for physical or electronic/online distribution. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate original_resource_release_date = 9;
/* A Composite containing details of the classification of the SheetMusic according to advice which it carries about the level of explicitness or offensiveness of its content. */
	repeated ern_ParentalWarningType parental_warning_type = 10;
/* A Composite containing details of a Contributor to the SheetMusic. */
	repeated ern_DetailedResourceContributor resource_contributor = 11;
/* A Composite containing details of the Date and Place of the Event in which the SheetMusic was published, whether for physical or electronic/online distribution. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate resource_release_date = 12;
/* A Composite containing technical details of the SheetMusic. */
	repeated ern_TechnicalSheetMusicDetails technical_sheet_music_details = 13;
/* A Territory to which the SheetMusic details apply. Either this Element or ExcludedTerritory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard. */
	repeated ern_CurrentTerritoryCode territory_code = 14;
/* A Composite containing details of a Title of the SheetMusic. */
	repeated ern_Title title = 15;
}

/* A Composite containing details of Identifiers of a SheetMusic. */
message ern_SheetMusicId {
/* The ISMN (International Standard Music Number defined in ISO 10957) for the SheetMusic. An ISMN is a thirteen-digit number. Pre-2008 ISMNs, which had 10 characters and are now deprecated, are converted by replacing the initial letter ('M') with '979-0'. DDEX will enforce the syntax 979[0-9]{9}[X0-9] using XML Schema in the future. */
	optional string i_s_m_n = 1;
/* The Flag indicating whether this Identifier is old and has been replaced by a new one (=true) or not (=false). The Flag may only be set to True when the new Identifier is also provided. If the Flag is not set, this Identifier is deemed to be the current one. */
	optional bool is_replaced = 2;
/* A Composite containing details of a ProprietaryIdentifier of the SheetMusic. */
	repeated ern_ProprietaryId proprietary_id = 3;
}

/* A Composite containing details of a SheetMusicType. */
message ern_SheetMusicType {
/* The Namespace of the SheetMusicType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the SheetMusicType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_SheetMusicType ext_value = 3;
}

/* A Composite containing details of a society affiliation. */
message ern_SocietyAffiliation {
/* A Territory to which the affiliation details do not apply. Either this Element or Territory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard. */
	repeated ern_CurrentTerritoryCode excluded_territory_code = 1;
/* A Composite containing details of a MusicRightsSociety. */
	optional ern_PartyDescriptor music_rights_society = 2;
/* A Territory to which the affiliation details apply. Either this Element or ExcludedTerritory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.  */
	repeated ern_CurrentTerritoryCode territory_code = 3;
}

/* A Composite containing details of an item of Software. */
message ern_Software {
/* A Composite containing details of the Date and Place of the Event in which the Software was created. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate creation_date = 1;
/* A Composite containing details of a MusicalWorkId of a MusicalWork used in the Software. */
	repeated ern_MusicalWorkId indirect_software_id = 2;
/* The Flag indicating whether the Software is related to an Artist (=true) or not (=false). */
	optional bool is_artist_related = 3;
/* The Flag indicating whether the Software Element was updated (=true) or not (=false). When this Boolean Flag is set to true, the MessageRecipient is expected to replace any previously provided Software data with the now provided data. This attribute is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it. */
	optional bool is_updated = 4;
/* The Language and script for the Elements of the Software as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 5;
/* A Composite containing details of ResourceContainedResourceReferences referring to a Resource that is contained in the current Software. */
	optional ern_ResourceContainedResourceReferenceList resource_contained_resource_reference_list = 6;
/* A Composite containing details of one or more MusicalWorks contained in the Software. */
	optional ern_ResourceMusicalWorkReferenceList resource_musical_work_reference_list = 7;
/* The Identifier (specific to the Message) of the Software within the Release which contains it. This is a LocalResourceAnchor starting with the letter A. */
	optional string resource_reference = 8;
/* A Composite containing details of the Software which may vary according to Territory of release. */
	repeated ern_SoftwareDetailsByTerritory software_details_by_territory = 9;
/* A Composite containing details of Identifiers of the Software. */
	repeated ern_ResourceProprietaryId software_id = 10;
/* A Composite containing details of the Type of the Software. */
	optional ern_SoftwareType software_type = 11;
/* A Composite containing details of a Title of the Software. */
	repeated ern_Title title = 12;
}

/* A Composite containing details of Descriptors, Dates and other attributes of a Software application which may vary according to Territory of release. */
message ern_SoftwareDetailsByTerritory {
/* A Composite containing details of the CLine for the Software. */
	repeated ern_CLine c_line = 1;
/* A Composite containing an Annotation which acknowledges record companies and/or other Parties giving permission for Artists or others featured in the Software. */
	optional ern_CourtesyLine courtesy_line = 2;
/* A Composite containing the Name to be used by a DSP when presenting Artist details of the Resource to a Consumer. A Resource-level DisplayArtistName shall only be provided if it differs from the DisplayArtistName for a Release that contains the Resource and is communicated in the same XML message. */
	repeated ern_Name display_artist_name = 3;
/* A Territory to which the Software details do not apply. Either this Element or Territory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard. */
	repeated ern_CurrentTerritoryCode excluded_territory_code = 4;
/* A Composite containing details of a FulfillmentDate. */
	optional ern_FulfillmentDate fulfillment_date = 5;
/* A Composite containing details of a Genre to which the Software belongs. */
	repeated ern_Genre genre = 6;
/* A Composite containing details of an indirect Contributor to the Software. */
	repeated ern_IndirectResourceContributor indirect_resource_contributor = 7;
/* A Composite containing details of a Description of the Software containing Keywords. */
	repeated ern_Keywords keywords = 8;
/* The Language and script for the Elements of the SoftwareDetailsByTerritory as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 9;
/* A Composite containing details of the Date and Place of the Event in which the Software was originally published, whether for physical or electronic/online distribution. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate original_resource_release_date = 10;
/* A Composite containing details of the PLine for the Software. */
	repeated ern_PLine p_line = 11;
/* A Composite containing details of the classification of the Software according to advice which it carries about the level of explicitness or offensiveness of its content. */
	repeated ern_ParentalWarningType parental_warning_type = 12;
/* A Composite containing details of a Contributor to the Software. */
	repeated ern_DetailedResourceContributor resource_contributor = 13;
/* A Composite containing details of the Date and Place of the Event in which the Software was published, whether for physical or electronic/online distribution. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate resource_release_date = 14;
/* A Composite containing details of a Synopsis of the Software. */
	optional ern_Synopsis synopsis = 15;
/* A Composite containing technical details of the Software. */
	repeated ern_TechnicalSoftwareDetails technical_software_details = 16;
/* A Territory to which the Software details apply. Either this Element or ExcludedTerritory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.  */
	repeated ern_CurrentTerritoryCode territory_code = 17;
/* A Composite containing details of a Title of the Software. */
	repeated ern_Title title = 18;
}

/* A Composite containing details of a SoftwareType. */
message ern_SoftwareType {
/* The Namespace of the SoftwareType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the SoftwareType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_SoftwareType ext_value = 3;
}

/* A Composite containing details of a SoundProcessorType. */
message ern_SoundProcessorType {
/* The Namespace of the SoundProcessorType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the SoundProcessorType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
/* The Identifier of the Version of the SoundProcessorType. This is represented in an XML schema as an XML Attribute. */
	optional string version = 3;
	optional avs_SoundProcessorType ext_value = 4;
}

/* A Composite containing details of a SoundRecording. */
message ern_SoundRecording {
/* A Composite containing details of the Date and Place of the Event in which the SoundRecording was created. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate creation_date = 1;
/* The Duration of the SoundRecording (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). */
	optional string duration = 2;
/* A Flag indicating whether a DSP shall (=true) or shall not (=false) make the SoundRecording available during the pre-oder period. If the Flag is not set or set to false, the SoundRecording shall not be made available. */
	optional bool has_pre_order_fulfillment = 3;
/* A Composite containing details of a MusicalWorkId of a MusicalWork used in the SoundRecording. */
	repeated ern_MusicalWorkId indirect_sound_recording_id = 4;
/* A Composite containing a Description of the Type of instrumentation of the MusicalWork(s) in the SoundRecording. */
	optional ern_Description instrumentation_description = 5;
/* The Flag indicating whether the SoundRecording is related to an Artist (=true) or not (=false). */
	optional bool is_artist_related = 6;
/* The Flag indicating whether the SoundRecording is used as background to other audio or audiovisual material (=true) or not (=false). */
	optional bool is_background = 7;
/* The Flag indicating whether the SoundRecording is additional to those on the original Release of which this is a Version (=true) or not (=false). This element is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it. The IsBonusResource element in ResourceGroupContentItem should be used instead. */
	optional bool is_bonus_resource = 8;
/* The Flag indicating whether the SoundRecording is generated by a computer (=true) or not (=false). */
	optional bool is_computer_generated = 9;
/* The Flag indicating whether the SoundRecording is hidden in some way from the Consumer (=true) or not (=false). */
	optional bool is_hidden_resource = 10;
/* The Flag indicating whether the SoundRecording is instrumental (=true) or not (=false). */
	optional bool is_instrumental = 11;
/* The Flag indicating whether the SoundRecording is a Medley (=true) or not (=false). */
	optional bool is_medley = 12;
/* The Flag indicating whether the SoundRecording is a Potpourri (=true) or not (=false). */
	optional bool is_potpourri = 13;
/* The Flag indicating whether the SoundRecording is remastered (=true) or not (=false). */
	optional bool is_remastered = 14;
/* The Flag indicating whether the SoundRecording Element was updated (=true) or not (=false). When this Boolean Flag is set to true, the MessageRecipient is expected to replace any previously provided SoundRecording data with the now provided data. This attribute is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it. */
	optional bool is_updated = 15;
/* The Language and script for the Elements of the SoundRecording as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 16;
/* The Language of the Performance recorded in the SoundRecording (represented by an ISO 639-2 LanguageCode). */
	optional avs_IsoLanguageCode language_of_performance = 17;
/* A Composite containing details of the Date and Place of the Event in which the SoundRecording was originally mastered (in either analogue or digital form). This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate mastered_date = 18;
/* The Flag indicating whether the SoundRecording is followed by a period of silence (=false) or not (=true).  */
	optional bool no_silence_after = 19;
/* The Flag indicating whether the SoundRecording is preceded by a period of silence (=false) or not (=true).  */
	optional bool no_silence_before = 20;
/* The number of ContractedArtists associated with the SoundRecording. */
	optional int32 number_of_contracted_artists = 21;
/* The number of FeaturedArtists associated with the SoundRecording. */
	optional int32 number_of_featured_artists = 22;
/* The number of NonContractedArtists associated with the SoundRecording. */
	optional int32 number_of_non_contracted_artists = 23;
/* The number of NonFeaturedArtists associated with the SoundRecording. */
	optional int32 number_of_non_featured_artists = 24;
/* A Flag indicating whether performer information is required (=true) or not (=false) when communicating details of the SoundRecording. */
	optional bool performer_information_required = 25;
/* A Composite containing details of the ReferenceTitle of the SoundRecording. */
	optional ern_ReferenceTitle reference_title = 26;
/* A Composite containing details of the Date and Place of the Event in which the SoundRecording was re-mastered (usually digitally). This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate remastered_date = 27;
/* A Composite containing details of ResourceContainedResourceReferences referring to a Resource that is contained in the current SoundRecording. */
	optional ern_ResourceContainedResourceReferenceList resource_contained_resource_reference_list = 28;
/* A Composite containing details of one or more MusicalWorks contained in the SoundRecording. */
	optional ern_ResourceMusicalWorkReferenceList resource_musical_work_reference_list = 29;
/* The Identifier (specific to the Message) of the SoundRecording within the Release which contains it. This is a LocalResourceAnchor starting with the letter A. */
	optional string resource_reference = 30;
/* A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the SoundRecording. */
	optional ern_RightsAgreementId rights_agreement_id = 31;
/* A Composite containing details of one or more Collections. The referenced Collection has to be of CollectionType AudioChapter. */
	optional ern_SoundRecordingCollectionReferenceList sound_recording_collection_reference_list = 32;
/* A Composite containing details of Descriptors and other attributes of the SoundRecording which may vary according to Territory. */
	repeated ern_SoundRecordingDetailsByTerritory sound_recording_details_by_territory = 33;
/* A Composite containing details of a SoundRecordingId. */
	repeated ern_SoundRecordingId sound_recording_id = 34;
/* A Composite containing details of the Type of the SoundRecording. */
	optional ern_SoundRecordingType sound_recording_type = 35;
/* The country of commissioning. */
	optional ern_AllTerritoryCode territory_of_commissioning = 36;
}

/* A Composite containing details of a SoundRecordingCollectionReference. */
message ern_SoundRecordingCollectionReference {
/* The Duration of the use of the Creation that is referenced in the CueCreationReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). */
	optional string duration = 1;
/* The end time of the Creation, measured from the start of the Resource from which the CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). */
	optional string end_time = 2;
/* A Type of Collection in the context of a Video. This is represented in an XML schema as an XML Attribute. */
	optional avs_ReleaseResourceType release_resource_type = 3;
/* The number indicating the order of the Collection in a group of Collections within a Medley, SoundRecording or other Collection. */
	optional int32 sequence_number = 4;
/* A Reference for a Collection (specific to this Message). This is a LocalCollectionAnchorReference starting with the letter X. The referenced Collection has to be of CollectionType Series, Season or Episode. */
	optional string sound_recording_collection_reference = 5;
/* The start time of the Creation, measured from the start of the Resource from which the CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). */
	optional string start_time = 6;
}

/* A Composite containing a list of SoundRecordingCollectionReferences. */
message ern_SoundRecordingCollectionReferenceList {
/* The number of referenced Collections (typically Chapters). */
	optional int32 number_of_collections = 1;
/* A Composite containing a SoundRecordingCollectionReference for a Collection (specific to this Message). */
	repeated ern_SoundRecordingCollectionReference sound_recording_collection_reference = 2;
}

/* A Composite containing details of Descriptors and other attributes of a SoundRecording which may vary according to Territory of release. */
message ern_SoundRecordingDetailsByTerritory {
/* A Composite containing details of a rating for the SoundRecording. */
	repeated ern_AvRating av_rating = 1;
/* A Composite containing an Annotation which acknowledges record companies and/or other Parties giving permission for guests Artists or others featured on the SoundRecording. */
	optional ern_CourtesyLine courtesy_line = 2;
/* A Composite containing details of the DisplayArtist for the SoundRecording. The DisplayArtist may be described through Name, Identifier and Roles. */
	repeated ern_Artist display_artist = 3;
/* A Composite containing the Name to be used by a DSP when presenting Artist details of the Resource to a Consumer. A Resource-level DisplayArtistName shall only be provided if it differs from the DisplayArtistName for a Release that contains the Resource and is communicated in the same XML message. */
	repeated ern_Name display_artist_name = 4;
/* A Composite containing details of a DisplayConductor for the SoundRecording. A DisplayConductor may be described through Name, Identifier and Roles. */
	repeated ern_Artist display_conductor = 5;
/* A Territory to which the SoundRecording details do not apply. Either this Element or Territory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard. */
	repeated ern_CurrentTerritoryCode excluded_territory_code = 6;
/* A Composite containing details of a FulfillmentDate. */
	optional ern_FulfillmentDate fulfillment_date = 7;
/* A Composite containing details of a Genre to which the SoundRecording belongs. */
	repeated ern_Genre genre = 8;
/* A Composite containing details of a HostSoundCarrier on which the SoundRecording appears (e.g., the CD on which it was originally released). This Composite exists in the Release Notification Message Suite Standard, to support the identification and matching of SoundRecording information. */
	repeated ern_HostSoundCarrier host_sound_carrier = 9;
/* A Composite containing details of an indirect Contributor to the SoundRecording. */
	repeated ern_IndirectResourceContributor indirect_resource_contributor = 10;
/* A Composite containing details of a Description of the SoundRecording containing Keywords. */
	repeated ern_Keywords keywords = 11;
/* A Composite containing the Name of the Label under which the Release is to be marketed. The use of multiple LabelNames is discouraged unless used to communicate label names in different languages and/or scripts. */
	repeated ern_LabelName label_name = 12;
/* The Language and script for the Elements of the SoundRecordingDetailsByTerritory as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 13;
/* A Composite containing a Comment about the promotion and marketing of the SoundRecording. */
	optional ern_Comment marketing_comment = 14;
/* A Composite containing details of the Date and Place of the Event in which the SoundRecording was originally published, whether for physical or electronic/online distribution. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate original_resource_release_date = 15;
/* A Composite containing details of the PLine for the SoundRecording. */
	repeated ern_PLine p_line = 16;
/* A Composite containing details of the classification of the SoundRecording according to advice which it carries about the level of explicitness or offensiveness of its content. */
	repeated ern_ParentalWarningType parental_warning_type = 17;
/* A Composite containing details of the Date and Place of the Event in which the SoundRecording was re-mastered (usually digitally). This is a string with the syntax YYYY[-MM[-DD]]. This element is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it. */
	optional ern_EventDate remastered_date = 18;
/* A Composite containing details of a Contributor to the SoundRecording. */
	repeated ern_DetailedResourceContributor resource_contributor = 19;
/* A Composite containing details of the Date and Place of the Event in which the SoundRecording was published, whether for physical or electronic/online distribution. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate resource_release_date = 20;
/* A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the SoundRecording. */
	optional ern_RightsAgreementId rights_agreement_id = 21;
/* A Composite containing details of RightsController of Rights in the SoundRecording. */
	repeated ern_TypedRightsController rights_controller = 22;
/* The number indicating the order of the SoundRecording in a group of SoundRecordings in a Release. */
	optional int32 sequence_number = 23;
/* A Composite containing details of a Synopsis of the SoundRecording. */
	optional ern_Synopsis synopsis = 24;
/* A Composite containing technical details of the SoundRecording. */
	repeated ern_TechnicalSoundRecordingDetails technical_sound_recording_details = 25;
/* A Territory to which the SoundRecording details apply. Either this Element or ExcludedTerritory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.  */
	repeated ern_CurrentTerritoryCode territory_code = 26;
/* A Composite containing details of a Title of the SoundRecording. */
	repeated ern_Title title = 27;
}

/* A Composite containing details of SoundRecordingIds. */
message ern_SoundRecordingId {
/* A Composite containing details of the CatalogNumber of the SoundRecording. */
	optional ern_CatalogNumber catalog_number = 1;
/* The ISRC (International Standard Recording Code as defined in  ISO 3901) for the SoundRecording. An ISRC comprises four parts: two characters, followed by three alphanumeric characters, then two digits and five digits. DDEX will enforce the syntax [a-zA-Z]{2}[a-zA-Z0-9]{3}[0-9]{7} using XML Schema in the future. */
	optional string i_s_r_c = 2;
/* The Flag indicating whether this Identifier is old and has been replaced by a new one (=true) or not (=false). The Flag may only be set to True when the new Identifier is also provided. If the Flag is not set, this Identifier is deemed to be the current one. */
	optional bool is_replaced = 3;
/* A Composite containing details of a ProprietaryIdentifier of the SoundRecording (usually one per society involved in the messaging). */
	repeated ern_ProprietaryId proprietary_id = 4;
}

/* A Composite containing details of a preview. */
message ern_SoundRecordingPreviewDetails {
/* The position of the preview measured in Pixels or millimetres  from the bottom right corner of the Resource. */
	optional double bottom_right_corner = 1;
/* The Duration of the preview, measured from the StartPoint. */
	optional string duration = 2;
/* The end point of the preview given in seconds from the start of the Resource. */
	optional double end_point = 3;
/* A Type of expression indicating how this should be perceived, e.g. as instruction (meaning that this has to be done to create the preview) or as information (meaning that this has been done to craete the preview). */
	optional avs_ExpressionType expression_type = 4;
/* A Composite containing a Description of the Type of Part that the preview relates to, e.g. chorus or intro. */
	optional ern_Description part_type = 5;
/* The start point of the preview given in seconds from the start of the Resource. */
	optional double start_point = 6;
/* The position of the preview measured in Pixels or millimetres from the top left corner of the Resource. */
	optional double top_left_corner = 7;
}

/* A Composite containing details of a SoundRecordingType. */
message ern_SoundRecordingType {
/* The Namespace of the SoundRecordingType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the SoundRecordingType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_SoundRecordingType ext_value = 3;
}

/* A Composite containing details of a SubTitle, including Titles of Versions used to differentiate different versions of the same Title, as required by the GRid and ISRC ReferenceDescriptiveMetadataSets. */
message ern_SubTitle {
/* The Language and script of the SubTitle as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
	optional string ext_value = 2;
}

/* A Composite containing details of a Synopsis. */
message ern_Synopsis {
/* The Language and script of the Synopsis as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
	optional string ext_value = 2;
}

/* A Composite containing details of a Reference to a TextDocument containing details of a Tariff. */
message ern_TariffReference {
/* The Language and script of the TariffReference (and the TariffSubReference if applicable) as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
/* The Reference to a TextDocument containing more specific details of a Tariff. This is represented in an XML schema as an XML Attribute. */
	optional string tariff_sub_reference = 2;
	optional string ext_value = 3;
}

/* A Composite containing technical details of a Image. */
message ern_TechnicalImageDetails {
/* A Composite containing the ratio formed by dividing the ImageHeight by the ImageWidth. */
	optional ern_AspectRatio aspect_ratio = 1;
/* An amount of data determining the color of a pixel of the Image (given in bits per pixel). */
	optional int32 color_depth = 2;
/* A Composite containing details of when a consumer is able to get hold of the Image. */
	optional ern_FulfillmentDate consumer_fulfillment_date = 3;
/* A Composite containing details of a ContainerFormat. */
	optional ern_ContainerFormat container_format = 4;
/* A Composite containing details of a Type of DrmPlatform. */
	optional ern_DrmPlatformType drm_platform_type = 5;
/* A Composite containing details of a File containing the Image that a DSP can obtain. */
	repeated ern_File file = 6;
/* A Composite containing a Description providing details of how a DSP can obtain a File that contains the Image. */
	repeated ern_Description file_availability_description = 7;
/* A Composite containing details of a Fingerprint and its governing algorithm. */
	repeated ern_Fingerprint fingerprint = 8;
/* A Composite containing details of a FulfillmentDate. */
	optional ern_FulfillmentDate fulfillment_date = 9;
/* A Composite containing details of a Type of ImageCodec. */
	optional ern_ImageCodecType image_codec_type = 10;
/* A Composite containing the vertical Extent of an Image of the Image and a UnitOfMeasure (the default is Pixels). */
	optional ern_Extent image_height = 11;
/* A number of pixels of the Image displayed in a specific spatial range (given in dpi). */
	optional int32 image_resolution = 12;
/* A Composite containing the horizontal Extent of an Image of the Image and a UnitOfMeasure (the default is Pixels). */
	optional ern_Extent image_width = 13;
/* The Flag indicating whether the Image is technically a preview of the parent Resource (=true) or not (=false). Note that nothing can be implied from this element as to the conditions under which the preview can be made available. */
	optional bool is_preview = 14;
/* The Language and script for the Elements of the TechnicalImageDetails as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 15;
/* A Composite containing details of a preview. */
	optional ern_PreviewDetails preview_details = 16;
/* The Identifier (specific to the Message) of the TechnicalImageDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T. */
	optional string technical_resource_details_reference = 17;
}

/* A Composite containing technical details of a Release. */
message ern_TechnicalInstantiation {
/* A Composite containing the BitRate for the audio data and a UnitOfMeasure (the default is kbps). */
	optional ern_BitRate bit_rate = 1;
/* A Type of coding used to encode a Resource. */
	optional avs_CodingType coding_type = 2;
/* A Type of DRM enforcement. */
	optional avs_DrmEnforcementType drm_enforcement_type = 3;
/* A Type of resolution (or definition) in which a Video is provided. */
	optional avs_VideoDefinitionType video_definition_type = 4;
}

/* A Composite containing technical details of a MIDI. */
message ern_TechnicalMidiDetails {
/* A Composite containing details of when a consumer is able to get hold of the MIDI. */
	optional ern_FulfillmentDate consumer_fulfillment_date = 1;
/* The Duration of the instantiation of the MIDI if this differs from the Duration provided for the MIDI itself (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). This element must only be used if and when there are no royalty reporting implications on this change in duration and when the specific technical instantiation is a clip taken from a technical instantiation representing the whole MIDI. */
	optional string duration = 2;
/* A Composite containing details of a File containing the MIDI that a DSP can obtain. */
	repeated ern_File file = 3;
/* A Composite containing a Description providing details of how a DSP can obtain a File that contains the MIDI. */
	repeated ern_Description file_availability_description = 4;
/* A Composite containing details of a Fingerprint and its governing algorithm. */
	repeated ern_Fingerprint fingerprint = 5;
/* A Composite containing details of a FulfillmentDate. */
	optional ern_FulfillmentDate fulfillment_date = 6;
/* The Flag indicating whether the MIDI is technically a preview of the parent Resource (=true) or not (=false). Note that nothing can be implied from this element as to the conditions under which the preview can be made available. */
	optional bool is_preview = 7;
/* The Language and script for the Elements of the TechnicalMidiDetails as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 8;
/* The number of voices. */
	optional int32 number_of_voices = 9;
/* A Composite containing details of a preview. */
	optional ern_SoundRecordingPreviewDetails preview_details = 10;
/* The Flag indicating whether the MIDI needs to be processed (=true) or not (=false) (typically: transcoded) by the MessageRecipient before being delivered to Consumers. */
	optional bool resource_processing_required = 11;
/* A Type of sound processor. */
	optional ern_SoundProcessorType sound_processor_type = 12;
/* The Identifier (specific to the Message) of the TechnicalMidiDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T. */
	optional string technical_resource_details_reference = 13;
/* The Duration of the MIDI that may be sold to a Consumer if the MIDI provided is not intended to be provided to Consumers 'as is' but will need to be transcoded into an appropriate format by the MessageRecipient or any other DSP handling the Release before it is sold (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). */
	optional string usable_resource_duration = 14;
}

/* A Composite containing technical details of a SheetMusic. */
message ern_TechnicalSheetMusicDetails {
/* A Composite containing details of when a consumer is able to get hold of the SheetMusic. */
	optional ern_FulfillmentDate consumer_fulfillment_date = 1;
/* A Composite containing details of a ContainerFormat. */
	optional ern_ContainerFormat container_format = 2;
/* A Composite containing details of a Type of DrmPlatform. */
	optional ern_DrmPlatformType drm_platform_type = 3;
/* A Composite containing details of a File containing the SheetMusic that a DSP can obtain. */
	repeated ern_File file = 4;
/* A Composite containing a Description providing details of how a DSP can obtain a File that contains the SheetMusic. */
	repeated ern_Description file_availability_description = 5;
/* A Composite containing details of a Fingerprint and its governing algorithm. */
	repeated ern_Fingerprint fingerprint = 6;
/* A Composite containing details of a FulfillmentDate. */
	optional ern_FulfillmentDate fulfillment_date = 7;
/* The Flag indicating whether the SheetMusic is technically a preview of the parent Resource (=true) or not (=false). Note that nothing can be implied from this element as to the conditions under which the preview can be made available. */
	optional bool is_preview = 8;
/* The Language and script for the Elements of the TechnicalSheetMusicDetails as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 9;
/* A Composite containing details of a preview. */
	optional ern_PreviewDetails preview_details = 10;
/* A Composite containing details of a Type of SheetMusicCodec. */
	optional ern_SheetMusicCodecType sheet_music_codec_type = 11;
/* The Identifier (specific to the Message) of the TechnicalSheetMusicDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T. */
	optional string technical_resource_details_reference = 12;
}

/* A Composite containing technical details of a Software. */
message ern_TechnicalSoftwareDetails {
/* A Composite containing details of when a consumer is able to get hold of the Software. */
	optional ern_FulfillmentDate consumer_fulfillment_date = 1;
/* A Composite containing details of a Type of DrmPlatform. */
	optional ern_DrmPlatformType drm_platform_type = 2;
/* A Composite containing details of a File containing the Software that a DSP can obtain. */
	repeated ern_File file = 3;
/* A Composite containing a Description providing details of how a DSP can obtain a File that contains the Software. */
	repeated ern_Description file_availability_description = 4;
/* A Composite containing details of a Fingerprint and its governing algorithm. */
	repeated ern_Fingerprint fingerprint = 5;
/* A Composite containing details of a FulfillmentDate. */
	optional ern_FulfillmentDate fulfillment_date = 6;
/* The Flag indicating whether the Software is technically a preview of the parent Resource (=true) or not (=false). Note that nothing can be implied from this element as to the conditions under which the preview can be made available. */
	optional bool is_preview = 7;
/* The Language and script for the Elements of the TechnicalSoftwareDetails as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 8;
/* A Composite containing details of a Type of OperatingSystem. */
	optional ern_OperatingSystemType operating_system_type = 9;
/* A Composite containing details of a preview. */
	optional ern_PreviewDetails preview_details = 10;
/* The Identifier (specific to the Message) of the TechnicalSoftwareDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T. */
	optional string technical_resource_details_reference = 11;
}

/* A Composite containing technical details of a SoundRecording. */
message ern_TechnicalSoundRecordingDetails {
/* A Composite containing details of a Type of AudioCodec. */
	optional ern_AudioCodecType audio_codec_type = 1;
/* A Composite containing the BitRate for the audio data and a UnitOfMeasure (the default is kbps). */
	optional ern_BitRate bit_rate = 2;
/* An amount of audio data in a sample. */
	optional int32 bits_per_sample = 3;
/* A Composite containing details of when a consumer is able to get hold of the SoundRecording. */
	optional ern_FulfillmentDate consumer_fulfillment_date = 4;
/* A Composite containing details of a ContainerFormat. */
	optional ern_ContainerFormat container_format = 5;
/* A Composite containing details of a Type of DrmPlatform. */
	optional ern_DrmPlatformType drm_platform_type = 6;
/* The Duration of the instantiation of the SoundRecording if this differs from the Duration provided for the SoundRecording itself (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). This element must only be used if and when there are no royalty reporting implications on this change in duration and when the specific technical instantiation is a clip taken from a technical instantiation representing the whole SoundRecording. */
	optional string duration = 7;
/* A Composite containing details of a File containing the SoundRecording that a DSP can obtain. */
	repeated ern_File file = 8;
/* A Composite containing a Description providing details of how a DSP can obtain a File that contains the SoundRecording. */
	repeated ern_Description file_availability_description = 9;
/* A Composite containing details of a Fingerprint and its governing algorithm. */
	repeated ern_Fingerprint fingerprint = 10;
/* A Composite containing details of a FulfillmentDate. */
	optional ern_FulfillmentDate fulfillment_date = 11;
/* The Flag indicating whether the SoundRecording is technically a preview of the parent Resource (=true) or not (=false). Note that nothing can be implied from this element as to the conditions under which the preview can be made available. */
	optional bool is_preview = 12;
/* The Language and script for the Elements of the TechnicalSoundRecordingDetails as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 13;
/* A number of audio channels. */
	optional int32 number_of_channels = 14;
/* A Composite containing details of a preview. */
	optional ern_SoundRecordingPreviewDetails preview_details = 15;
/* The Flag indicating whether the SoundRecording needs to be processed (=true) or not (=false) (typically: transcoded) by the MessageRecipient before being delivered to Consumers. */
	optional bool resource_processing_required = 16;
/* A Composite containing the sampling rate of the SoundRecording and a UnitOfMeasure (the default is Hz). */
	optional ern_SamplingRate sampling_rate = 17;
/* The Identifier (specific to the Message) of the TechnicalSoundRecordingDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T. */
	optional string technical_resource_details_reference = 18;
/* The Duration of the SoundRecording that may be sold to a Consumer if the SoundRecording provided is not intended to be provided to Consumers 'as is' but will need to be transcoded into an appropriate format by the MessageRecipient or any other DSP handling the Release before it is sold (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). */
	optional string usable_resource_duration = 19;
}

/* A Composite containing technical details of a Text. */
message ern_TechnicalTextDetails {
/* A Composite containing details of when a consumer is able to get hold of the Text. */
	optional ern_FulfillmentDate consumer_fulfillment_date = 1;
/* A Composite containing details of a ContainerFormat. */
	optional ern_ContainerFormat container_format = 2;
/* A Composite containing details of a Type of DrmPlatform. */
	optional ern_DrmPlatformType drm_platform_type = 3;
/* A Composite containing details of a File containing the Text that a DSP can obtain. */
	repeated ern_File file = 4;
/* A Composite containing a Description providing details of how a DSP can obtain a File that contains the Text. */
	repeated ern_Description file_availability_description = 5;
/* A Composite containing details of a Fingerprint and its governing algorithm. */
	repeated ern_Fingerprint fingerprint = 6;
/* A Composite containing details of a FulfillmentDate. */
	optional ern_FulfillmentDate fulfillment_date = 7;
/* The Flag indicating whether the Text is technically a preview of the parent Resource (=true) or not (=false). Note that nothing can be implied from this element as to the conditions under which the preview can be made available. */
	optional bool is_preview = 8;
/* The Language and script for the Elements of the TechnicalTextDetails as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 9;
/* A Composite containing details of a preview. */
	optional ern_PreviewDetails preview_details = 10;
/* The Identifier (specific to the Message) of the TechnicalTextDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T. */
	optional string technical_resource_details_reference = 11;
/* A Composite containing details of a Type of TextCodec. */
	optional ern_TextCodecType text_codec_type = 12;
}

/* A Composite containing technical details of a UserDefinedResource. */
message ern_TechnicalUserDefinedResourceDetails {
/* A Composite containing details of when a consumer is able to get hold of the UserDefinedResource. */
	optional ern_FulfillmentDate consumer_fulfillment_date = 1;
/* A Composite containing details of a File containing the UserDefinedResource that a DSP can obtain. */
	repeated ern_File file = 2;
/* A Composite containing a Description providing details of how a DSP can obtain a File that contains the UserDefinedResource. */
	repeated ern_Description file_availability_description = 3;
/* A Composite containing details of a Fingerprint and its governing algorithm. */
	repeated ern_Fingerprint fingerprint = 4;
/* A Composite containing details of a FulfillmentDate. */
	optional ern_FulfillmentDate fulfillment_date = 5;
/* The Flag indicating whether the UserDefinedResource is technically a preview of the parent Resource (=true) or not (=false). Note that nothing can be implied from this element as to the conditions under which the preview can be made available. */
	optional bool is_preview = 6;
/* The Language and script for the Elements of the TechnicalUserDefinedResourceDetails as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 7;
/* A Composite containing details of a preview. */
	optional ern_PreviewDetails preview_details = 8;
/* The Identifier (specific to the Message) of the TechnicalUserDefinedResourceDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T. */
	optional string technical_resource_details_reference = 9;
/* A Composite containing details of a UserDefinedValue. */
	repeated ern_UserDefinedValue user_defined_value = 10;
}

/* A Composite containing technical details of a Video. */
message ern_TechnicalVideoDetails {
/* A Composite containing the ratio formed by dividing the ImageHeight by the ImageWidth. */
	optional ern_AspectRatio aspect_ratio = 1;
/* A Composite containing the BitRate for the audio data and a UnitOfMeasure (the default is kbps). */
	optional ern_BitRate audio_bit_rate = 2;
/* An amount of audio data in a sample. */
	optional int32 audio_bits_per_sample = 3;
/* A Composite containing details of a Type of AudioCodec. */
	optional ern_AudioCodecType audio_codec_type = 4;
/* A Composite containing the SamplingRate for the audio data and a UnitOfMeasure (the default is Hz). */
	optional ern_SamplingRate audio_sampling_rate = 5;
/* An amount of data determining the color of a pixel of an Image of the Video (given in bits per pixel). */
	optional int32 color_depth = 6;
/* A Composite containing details of when a consumer is able to get hold of the Video. */
	optional ern_FulfillmentDate consumer_fulfillment_date = 7;
/* A Composite containing details of a ContainerFormat. */
	optional ern_ContainerFormat container_format = 8;
/* A Composite containing details of a Type of DrmPlatform. */
	optional ern_DrmPlatformType drm_platform_type = 9;
/* The Duration of the instantiation of the Video if this differs from the Duration provided for the Video itself (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). This element must only be used if and when there are no royalty reporting implications on this change in duration and when the specific technical instantiation is a clip taken from a technical instantiation representing the whole Video. */
	optional string duration = 10;
/* A Composite containing details of a File containing the Video that a DSP can obtain. */
	repeated ern_File file = 11;
/* A Composite containing a Description providing details of how a DSP can obtain a File that contains the Video. */
	repeated ern_Description file_availability_description = 12;
/* A Composite containing details of a Fingerprint and its governing algorithm. */
	repeated ern_Fingerprint fingerprint = 13;
/* A Composite containing the Rate for a number of frames shown in the Video in a specific Period of Time and a UnitOfMeasure (the default is Hz, interlaced). */
	optional ern_FrameRate frame_rate = 14;
/* A Composite containing details of a FulfillmentDate. */
	optional ern_FulfillmentDate fulfillment_date = 15;
/* A Composite containing the vertical Extent of an Image of the Video and a UnitOfMeasure (the default is Pixels). */
	optional ern_Extent image_height = 16;
/* A Composite containing the horizontal Extent of an Image of the Video and a UnitOfMeasure (the default is Pixels). */
	optional ern_Extent image_width = 17;
/* The Flag indicating whether the Video is technically a preview of the parent Resource (=true) or not (=false). Note that nothing can be implied from this element as to the conditions under which the preview can be made available. */
	optional bool is_preview = 18;
/* The Language and script for the Elements of the TechnicalSoundRecordingDetails as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 19;
/* A number of audio channels. */
	optional int32 number_of_audio_channels = 20;
/* A Composite containing the overall BitRate and a UnitOfMeasure (the default is kbps). */
	optional ern_BitRate overall_bit_rate = 21;
/* A Composite containing details of a preview. */
	optional ern_SoundRecordingPreviewDetails preview_details = 22;
/* The Flag indicating whether the Video needs to be processed (=true) or not (=false) (typically: transcoded) by the MessageRecipient before being delivered to Consumers. */
	optional bool resource_processing_required = 23;
/* The Identifier (specific to the Message) of the TechnicalVideoDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T. */
	optional string technical_resource_details_reference = 24;
/* The Duration of the Video that may be sold to a Consumer if the Video provided is not intended to be provided to Consumers 'as is' but will need to be transcoded into an appropriate format by the MessageRecipient or any other DSP handling the Release before it is sold (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). */
	optional string usable_resource_duration = 25;
/* A Composite containing the BitRate for the video data and a UnitOfMeasure (the default is kbps). */
	optional ern_BitRate video_bit_rate = 26;
/* A Composite containing details of a Type of VideoCodec. */
	optional ern_VideoCodecType video_codec_type = 27;
/* A Type of resolution (or definition) in which the Video is provided. */
	optional avs_VideoDefinitionType video_definition_type = 28;
}

/* A Composite containing details of a Text. */
message ern_Text {
/* A Composite containing details of the Date and Place of the Event in which the Text was created. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate creation_date = 1;
/* A Composite containing details of a MusicalWorkId of a MusicalWork used in the Text. */
	repeated ern_MusicalWorkId indirect_text_id = 2;
/* The Flag indicating whether the Text is related to an Artist (=true) or not (=false). */
	optional bool is_artist_related = 3;
/* The Flag indicating whether the Text Element was updated (=true) or not (=false). When this Boolean Flag is set to true, the MessageRecipient is expected to replace any previously provided Text data with the now provided data. This attribute is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it. */
	optional bool is_updated = 4;
/* The Language and script for the Elements of the Text as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 5;
/* A Composite containing details of ResourceContainedResourceReferences referring to a Resource that is contained in the current Text. */
	optional ern_ResourceContainedResourceReferenceList resource_contained_resource_reference_list = 6;
/* A Composite containing details of one or more MusicalWorks contained in the Text. */
	optional ern_ResourceMusicalWorkReferenceList resource_musical_work_reference_list = 7;
/* The Identifier (specific to the Message) of the Text within the Release which contains it. This is a LocalResourceAnchor starting with the letter A. */
	optional string resource_reference = 8;
/* A Composite containing details of the Text which may vary according to Territory of release. */
	repeated ern_TextDetailsByTerritory text_details_by_territory = 9;
/* A Composite containing details of an Identifier of the Text. */
	repeated ern_TextId text_id = 10;
/* A Composite containing details of the Type of the Text. */
	optional ern_TextType text_type = 11;
/* A Composite containing details of a Title of the Text. */
	repeated ern_Title title = 12;
}

/* A Composite containing details of a TextCodecType. */
message ern_TextCodecType {
/* The Namespace of the TextCodecType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the TextCodecType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
/* The Identifier of the Version of the TextCodecType. This is represented in an XML schema as an XML Attribute. */
	optional string version = 3;
	optional avs_TextCodecType ext_value = 4;
}

/* A Composite containing details of Descriptors, Dates and other attributes of a Text which may vary according to Territory of release. */
message ern_TextDetailsByTerritory {
/* A Composite containing details of the CLine for the Text. */
	repeated ern_CLine c_line = 1;
/* A Composite containing an Annotation which acknowledges record companies and/or other Parties giving permission for Artists or others featured in the Text. */
	optional ern_CourtesyLine courtesy_line = 2;
/* A Composite containing the Name to be used by a DSP when presenting Artist details of the Resource to a Consumer. A Resource-level DisplayArtistName shall only be provided if it differs from the DisplayArtistName for a Release that contains the Resource and is communicated in the same XML message. */
	repeated ern_Name display_artist_name = 3;
/* A Territory to which the Text details do not apply. Either this Element or Territory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard. */
	repeated ern_CurrentTerritoryCode excluded_territory_code = 4;
/* A Composite containing details of a FulfillmentDate. */
	optional ern_FulfillmentDate fulfillment_date = 5;
/* A Composite containing details of a Genre to which the Text belongs. */
	repeated ern_Genre genre = 6;
/* A Composite containing details of an indirect Contributor to the Text. */
	repeated ern_IndirectResourceContributor indirect_resource_contributor = 7;
/* A Composite containing details of a Description of the Text containing Keywords. */
	repeated ern_Keywords keywords = 8;
/* The Language and script for the Elements of the TextDetailsByTerritory as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 9;
/* A Composite containing details of the Date and Place of the Event in which the Text was originally published, whether for physical or electronic/online distribution. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate original_resource_release_date = 10;
/* A Composite containing details of the classification of the Text according to advice which it carries about the level of explicitness or offensiveness of its content. */
	repeated ern_ParentalWarningType parental_warning_type = 11;
/* A Composite containing details of a Contributor to the Text. */
	repeated ern_DetailedResourceContributor resource_contributor = 12;
/* A Composite containing details of the Date and Place of the Event in which the Text was published, whether for physical or electronic/online distribution. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate resource_release_date = 13;
/* A Composite containing details of a Synopsis of the Text. */
	optional ern_Synopsis synopsis = 14;
/* A Composite containing technical details of the Text. */
	repeated ern_TechnicalTextDetails technical_text_details = 15;
/* A Territory to which the Text details apply. Either this Element or ExcludedTerritory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard. */
	repeated ern_CurrentTerritoryCode territory_code = 16;
/* A Composite containing details of a Title of the Text. */
	repeated ern_Title title = 17;
}

/* A Composite containing details of Identifiers of a Text. */
message ern_TextId {
/* The ISBN (International Standard Book Number defined in ISO 2108) for the Text. An ISBN is a 13-digit number. Pre-2007, ISBNs, which had 10-digits and are now deprecated, are converted by adding the prefix '978' and re-calculating the check character. DDEX will enforce the syntax 97[8-9][0-9]{9}[X0-9] using XML Schema in the future. */
	optional string i_s_b_n = 1;
/* The ISSN (International Standard Serial Number defined in ISO 3297) identifying the Text. An ISSN comprises two groups of four digits, separated by a hyphen and a control digit. DDEX will enforce the syntax [0-9]{4}-[0-9]{3}[X0-9] using XML Schema in the future. */
	optional string i_s_s_n = 2;
/* The Flag indicating whether this Identifier is old and has been replaced by a new one (=true) or not (=false). The Flag may only be set to True when the new Identifier is also provided. If the Flag is not set, this Identifier is deemed to be the current one. */
	optional bool is_replaced = 3;
/* A Composite containing details of a ProprietaryIdentifier of the Text (usually one per society involved in the messaging). */
	repeated ern_ProprietaryId proprietary_id = 4;
/* The SICI (Serial Item and Contribution Identifier defined in ANSI/NISO Z39.56-199)  for the Text. DDEX will enforce the syntax [0-9]{4}-[0-9]{3}[X0-9].+ using XML Schema in the future. */
	optional string s_i_c_i = 5;
}

/* A Composite containing details of a TextType. */
message ern_TextType {
/* The Namespace of the TextType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the TextType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_TextType ext_value = 3;
}

/* A Composite containing details of a Title. */
message ern_Title {
/* The Language and script for the Elements of the Title as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
/* A Composite containing details of a SubTitle of the Title, including Titles of Versions used to differentiate different versions of the same Title, as required by the GRid and ISRC ReferenceDescriptiveMetadataSets. */
	repeated ern_TypedSubTitle sub_title = 2;
/* A Composite containing the text of the Title. */
	optional ern_TitleText title_text = 3;
/* A Type of the Title which defines its origin or the function it fulfils in relation to a Creation. Note: A Title may fulfil more than one role. Example: 'Help' may be both the OriginalTitle and the DisplayTitle for the well-known Beatles song. This is represented in an XML schema as an XML Attribute. */
	optional avs_TitleType title_type = 4;
}

/* A Composite containing details of a TitleText. */
message ern_TitleText {
/* The Language and script of the TitleText as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
	optional string ext_value = 2;
}

/* A Composite containing details of a RightsController. RightsControllers are typicallydescribed by Name, Identifier and role(s). */
message ern_TypedRightsController {
/* The Date that marks the end of the title (in ISO 8601:2004 format: YYYY-MM-DD). */
	optional ern_ddex_IsoDate end_date = 1;
/* A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators. */
	repeated ern_PartyId party_id = 2;
/* A Composite containing details of the PartyName(s). */
	repeated ern_PartyName party_name = 3;
/* The share of the licensed Rights owned by the RightsController. RightShare information is given as a xs:decimal value with up to 6 digits (e.g. '12.5' represents 12.5%). If no information is given, 100% is assumed. */
	optional ern_Percentage right_share_percentage = 4;
/* The Flag indicating whether the RightSharePercentage is unknown (=true) or not (=false). */
	optional bool right_share_unknown = 5;
/* A role that describes the Party involved in the administration of Rights. */
	repeated avs_RightsControllerRole rights_controller_role = 6;
/* A type of the RightsController. */
	optional avs_RightsControllerType rights_controller_type = 7;
/* The number indicating the order of the RightsController in a group of RightsControllers. This is represented in an XML schema as an XML Attribute.  */
	optional int32 sequence_number = 8;
/* The Date that marks the beginning of the title (in ISO 8601:2004 format: YYYY-MM-DD). */
	optional ern_ddex_IsoDate start_date = 9;
/* The country of registration. */
	optional ern_AllTerritoryCode territory_of_registration = 10;
}

/* A Composite containing details of a SubTitle, including Titles of Versions used to differentiate different versions of the same Title, as required by the GRid and ISRC ReferenceDescriptiveMetadataSets. */
message ern_TypedSubTitle {
/* The Language and script of the SubTitle as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
/* A Type of the SubTitle which defines its origin or the function it fulfils. This is represented in an XML schema as an XML Attribute. */
	optional string sub_title_type = 2;
	optional string ext_value = 3;
}

/* A Composite containing Types and number of Usages of a Release. */
message ern_Usage {
/* A Composite containing details of a Carrier. */
	repeated ern_CarrierType carrier_type = 1;
/* A Composite containing details of a distribution channel intended to be used to disseminate a Service or Release to a Consumer. */
	repeated ern_DistributionChannelType distribution_channel_type = 2;
/* The number of times a Release can be used under the terms of the Deal. */
	optional int32 number_of_usages = 3;
/* A Composite containing technical details of the Release. */
	optional ern_TechnicalInstantiation technical_instantiation = 4;
/* A Composite containing details of a nature of a Service, or a Release, as used by a Consumer. */
	repeated ern_UseType use_type = 5;
/* A Composite containing details of a physical interface by which a Consumer is intended to use a Service or Release. */
	repeated ern_UserInterfaceType user_interface_type = 6;
}

/* A Composite containing details of a UseType. */
message ern_UseType {
/* The Namespace of the UseType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the UseType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_UseType ext_value = 3;
}

/* A Composite containing details of a UserDefinedResource. */
message ern_UserDefinedResource {
/* A Composite containing details of the Date and Place of the Event in which the UserDefinedResource was created. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate creation_date = 1;
/* A Composite containing details of a MusicalWorkId of a MusicalWork used in the UserDefinedResource. */
	repeated ern_MusicalWorkId indirect_user_defined_resource_id = 2;
/* The Flag indicating whether the UserDefinedResource is related to an Artist (=true) or not (=false). */
	optional bool is_artist_related = 3;
/* The Flag indicating whether the UserDefinedResource Element was updated (=true) or not (=false). When this Boolean Flag is set to true, the MessageRecipient is expected to replace any previously provided UserDefinedResource data with the now provided data. This attribute is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it. */
	optional bool is_updated = 4;
/* The Language and script for the Elements of the UserDefinedResource as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 5;
/* A Composite containing details of ResourceContainedResourceReferences referring to a Resource that is contained in the current UserDefinedResource. */
	optional ern_ResourceContainedResourceReferenceList resource_contained_resource_reference_list = 6;
/* A Composite containing details of one or more MusicalWorks contained in the UserDefinedResource. */
	optional ern_ResourceMusicalWorkReferenceList resource_musical_work_reference_list = 7;
/* The Identifier (specific to the Message) of the UserDefinedResource within the Release which contains it. This is a LocalResourceAnchor starting with the letter A. */
	optional string resource_reference = 8;
/* A Composite containing details of a Title of the UserDefinedResource. */
	repeated ern_Title title = 9;
/* A Composite containing details of the UserDefinedResource which may vary according to Territory of release. */
	repeated ern_UserDefinedResourceDetailsByTerritory user_defined_resource_details_by_territory = 10;
/* A Composite containing details of Identifiers of the UserDefinedResource. */
	repeated ern_ResourceProprietaryId user_defined_resource_id = 11;
/* A Composite containing details of the Type of the UserDefinedResource. */
	optional ern_UserDefinedResourceType user_defined_resource_type = 12;
/* A Composite containing details of a UserDefinedValue. */
	repeated ern_UserDefinedValue user_defined_value = 13;
}

/* A Composite containing details of Descriptors, Dates and other attributes of a UserDefinedResource application which may vary according to Territory of release. */
message ern_UserDefinedResourceDetailsByTerritory {
/* A Composite containing details of the CLine for the UserDefinedResource. */
	repeated ern_CLine c_line = 1;
/* A Composite containing the Name to be used by a DSP when presenting Artist details of the Resource to a Consumer. A Resource-level DisplayArtistName shall only be provided if it differs from the DisplayArtistName for a Release that contains the Resource and is communicated in the same XML message. */
	repeated ern_Name display_artist_name = 2;
/* A Territory to which the UserDefinedResource details do not apply. Either this Element or Territory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard. */
	repeated ern_CurrentTerritoryCode excluded_territory_code = 3;
/* A Composite containing details of a FulfillmentDate. */
	optional ern_FulfillmentDate fulfillment_date = 4;
/* A Composite containing details of a Genre to which the UserDefinedResource belongs. */
	repeated ern_Genre genre = 5;
/* A Composite containing details of an indirect Contributor to the UserDefinedResource. */
	repeated ern_IndirectResourceContributor indirect_resource_contributor = 6;
/* A Composite containing details of a Description of the UserDefinedResource containing Keywords. */
	repeated ern_Keywords keywords = 7;
/* The Language and script for the Elements of the UserDefinedResourceDetailsByTerritory as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 8;
/* A Composite containing details of the Date and Place of the Event in which the UserDefinedResource was originally published, whether for physical or electronic/online distribution. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate original_resource_release_date = 9;
/* A Composite containing details of the PLine for the UserDefinedResource. */
	repeated ern_PLine p_line = 10;
/* A Composite containing details of the classification of the UserDefinedResource according to advice which it carries about the level of explicitness or offensiveness of its content. */
	repeated ern_ParentalWarningType parental_warning_type = 11;
/* A Composite containing details of a Contributor to the UserDefinedResource. */
	repeated ern_DetailedResourceContributor resource_contributor = 12;
/* A Composite containing details of the Date and Place of the Event in which the UserDefinedResource was published, whether for physical or electronic/online distribution. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate resource_release_date = 13;
/* A Composite containing details of a Synopsis of the UserDefinedResource. */
	optional ern_Synopsis synopsis = 14;
/* A Composite containing technical details of the UserDefinedResource. */
	repeated ern_TechnicalUserDefinedResourceDetails technical_user_defined_resource_details = 15;
/* A Territory to which the UserDefinedResource details apply. Either this Element or ExcludedTerritory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.  */
	repeated ern_CurrentTerritoryCode territory_code = 16;
/* A Composite containing details of a Title of the UserDefinedResource. */
	repeated ern_Title title = 17;
/* A Composite containing details of a UserDefinedValue. */
	repeated ern_UserDefinedValue user_defined_value = 18;
}

/* A Composite containing details of a UserDefinedResourceType. */
message ern_UserDefinedResourceType {
/* The Namespace of the UserDefinedResourceType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
	optional string ext_value = 2;
}

/* A Composite containing details of a UserDefinedValue. */
message ern_UserDefinedValue {
/* A textual Description of the Type or function of the UserDefinedValue. This is represented in an XML schema as an XML Attribute. */
	optional string description = 1;
/* The Language and script of the Description as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 2;
/* The Namespace of the UserDefinedValue. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 3;
	optional string ext_value = 4;
}

/* A Composite containing details of a UserInterfaceType. */
message ern_UserInterfaceType {
/* The Namespace of the UserInterfaceType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the UserInterfaceType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_UserInterfaceType ext_value = 3;
}

/* A Composite containing details of a Video. */
message ern_Video {
/* A Composite containing details of the Date and Place of the Event in which the Video was created. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate creation_date = 1;
/* The Duration of the Video (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S). */
	optional string duration = 2;
/* A Flag indicating whether a DSP shall (=true) or shall not (=false) make the Video available during the pre-oder period. If the Flag is not set or set to false, the Video shall not be made available. */
	optional bool has_pre_order_fulfillment = 3;
/* A Composite containing details of a MusicalWorkId of a MusicalWork used in the Video. */
	repeated ern_MusicalWorkId indirect_video_id = 4;
/* A Composite containing a Description of the Type of instrumentation of the MusicalWork(s) in the Video. */
	optional ern_Description instrumentation_description = 5;
/* The Flag indicating whether the Video is related to an Artist (=true) or not (=false). */
	optional bool is_artist_related = 6;
/* The Flag indicating whether the Video is used as background to other audio or audiovisual material (=true) or not (=false). */
	optional bool is_background = 7;
/* The Flag indicating whether the Video is additional to those on the original Release of which this is a Version (=true) or not (=false). This element is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it. The IsBonusResource element in ResourceGroupContentItem should be used instead. */
	optional bool is_bonus_resource = 8;
/* The Flag indicating whether the Video is hidden in some way from the Consumer (=true) or not (=false). */
	optional bool is_hidden_resource = 9;
/* The Flag indicating whether the Video is instrumental (=true) or not (=false). */
	optional bool is_instrumental = 10;
/* The Flag indicating whether the Video is a Medley (=true) or not (=false). */
	optional bool is_medley = 11;
/* The Flag indicating whether the Video is a Potpourri (=true) or not (=false). */
	optional bool is_potpourri = 12;
/* The Flag indicating whether the Video is remastered (=true) or not (=false). */
	optional bool is_remastered = 13;
/* The Flag indicating whether the Video Element was updated (=true) or not (=false). When this Boolean Flag is set to true, the MessageRecipient is expected to replace any previously provided Video data with the now provided data. This attribute is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it. */
	optional bool is_updated = 14;
/* The Language and script for the Elements of the Video as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 15;
/* The Language of dubbing used in the Video (represented by an ISO 639-2 LanguageCode). */
	repeated avs_IsoLanguageCode language_of_dubbing = 16;
/* The original Language of the Performance recorded in the Video (represented by an ISO 639-2 LanguageCode). */
	repeated avs_IsoLanguageCode language_of_performance = 17;
/* A Composite containing details of the Date and Place of the Event in which the Video was originally mastered (in either analogue or digital form). This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate mastered_date = 18;
/* The Flag indicating whether the Video is followed by a period of silence (=false) or not (=true).  */
	optional bool no_silence_after = 19;
/* The Flag indicating whether the Video is preceded by a period of silence (=false) or not (=true).  */
	optional bool no_silence_before = 20;
/* The number of ContractedArtists associated with the Video. */
	optional int32 number_of_contracted_artists = 21;
/* The number of FeaturedArtists associated with the Video. */
	optional int32 number_of_featured_artists = 22;
/* The number of NonContractedArtists associated with the Video. */
	optional int32 number_of_non_contracted_artists = 23;
/* The number of NonFeaturedArtists associated with the Video. */
	optional int32 number_of_non_featured_artists = 24;
/* A Flag indicating whether performer information is required (=true) or not (=false) when communicating details of the Video. */
	optional bool performer_information_required = 25;
/* A Composite containing the textual Description of the reason for the Identifier being used as a proxy. */
	optional ern_Reason reason_for_cue_sheet_absence = 26;
/* A Composite containing details of the ReferenceTitle of the Video. */
	optional ern_ReferenceTitle reference_title = 27;
/* A Composite containing details of the Date and Place of the Event in which the Video was re-mastered (usually digitally). This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate remastered_date = 28;
/* A Composite containing details of ResourceContainedResourceReferences referring to a Resource that is contained in the current Video. */
	optional ern_ResourceContainedResourceReferenceList resource_contained_resource_reference_list = 29;
/* A Composite containing details of one or more MusicalWorks contained in the Video. */
	optional ern_ResourceMusicalWorkReferenceList resource_musical_work_reference_list = 30;
/* The Identifier (specific to the Message) of the Video within the Release which contains it. This is a LocalResourceAnchor starting with the letter A. */
	optional string resource_reference = 31;
/* A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the Video. */
	optional ern_RightsAgreementId rights_agreement_id = 32;
/* The Language of SubTitles in the Video (represented by an ISO 639-2 LanguageCode). */
	repeated avs_IsoLanguageCode sub_title_language = 33;
/* The country of commissioning. */
	optional ern_AllTerritoryCode territory_of_commissioning = 34;
/* A Composite containing details of a Title of the Video. */
	repeated ern_Title title = 35;
/* A Composite containing details of one or more Collections. The referenced Collection has to be of CollectionType VideoChapter. */
	optional ern_SoundRecordingCollectionReferenceList video_collection_reference_list = 36;
/* A Composite containing a VideoCueSheetReference for a CueSheet (specific to this Message). */
	repeated ern_VideoCueSheetReference video_cue_sheet_reference = 37;
/* A Composite containing details of Descriptors and other attributes of the Video which may vary according to Territory of release.  */
	repeated ern_VideoDetailsByTerritory video_details_by_territory = 38;
/* A Composite containing details of an Identifier of the Video. */
	repeated ern_VideoId video_id = 39;
/* A Composite containing details of the Type of the Video. */
	optional ern_VideoType video_type = 40;
}

/* A Composite containing details of a VideoCodecType. */
message ern_VideoCodecType {
/* The Namespace of the VideoCodecType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the VideoCodecType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
/* The Identifier of the Version of the VideoCodecType. This is represented in an XML schema as an XML Attribute. */
	optional string version = 3;
	optional avs_VideoCodecType ext_value = 4;
}

/* A Composite containing a VideoCueSheetReference. */
message ern_VideoCueSheetReference {
/* A Reference for a CueSheet (specific to this Message). This is a LocalCueSheetAnchorReference starting with the letter Q. */
	optional string video_cue_sheet_reference = 1;
}

/* A Composite containing details of Descriptors and other attributes of a Video which may vary according to Territory of release.  */
message ern_VideoDetailsByTerritory {
/* A Composite containing details of a rating for the Video. */
	repeated ern_AvRating av_rating = 1;
/* A Composite containing details of the CLine for the Video. */
	repeated ern_CLine c_line = 2;
/* A Composite containing details of a Character in the Video. A Character may be described through Name, Identifier and Roles. */
	repeated ern_Character character = 3;
/* A Composite containing an Annotation Annotation which acknowledges record companies and/or other Parties giving permission for guests Artists or others featured on the Video. */
	optional ern_CourtesyLine courtesy_line = 4;
/* A Composite containing details of the DisplayArtist for the SoundRecording. The DisplayArtist may be described through Name, Identifier and Roles. */
	repeated ern_Artist display_artist = 5;
/* A Composite containing the Name to be used by a DSP when presenting Artist details of the Resource to a Consumer. A Resource-level DisplayArtistName shall only be provided if it differs from the DisplayArtistName for a Release that contains the Resource and is communicated in the same XML message. */
	repeated ern_Name display_artist_name = 6;
/* A Composite containing details of a DisplayConductor for the Video. A DisplayConductor may be described through Name, Identifier and Roles. */
	repeated ern_Artist display_conductor = 7;
/* A Territory to which the SoundRecording details do not apply. Either this Element or Territory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard. */
	repeated ern_CurrentTerritoryCode excluded_territory_code = 8;
/* A Composite containing details of a FulfillmentDate. */
	optional ern_FulfillmentDate fulfillment_date = 9;
/* A Composite containing details of a Genre to which the Video belongs. */
	repeated ern_Genre genre = 10;
/* A Composite containing details of a HostSoundCarrier on which the Video appears (e.g., the CD on which it was originally released). This Composite exists in the Release Notification Message Suite Standard, to support the identification and matching of Video information. */
	repeated ern_HostSoundCarrier host_sound_carrier = 11;
/* A Composite containing details of an indirect Contributor to the SoundRecording. */
	repeated ern_IndirectResourceContributor indirect_resource_contributor = 12;
/* A Composite containing details of a Description of the Video containing Keywords. */
	repeated ern_Keywords keywords = 13;
/* A Composite containing the Name of the Label under which the Release is to be marketed. The use of multiple LabelNames is discouraged unless used to communicate label names in different languages and/or scripts. */
	repeated ern_LabelName label_name = 14;
/* The Language and script for the Elements of the SoundRecordingDetailsByTerritory as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 15;
/* A Composite containing a Comment about the promotion and marketing of the Video. */
	optional ern_Comment marketing_comment = 16;
/* A Composite containing details of the Date and Place of the Event in which the SoundRecording was originally published, whether for physical or electronic/online distribution. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate original_resource_release_date = 17;
/* A Composite containing details of the PLine for the SoundRecording. */
	repeated ern_PLine p_line = 18;
/* A Composite containing details of the classification of the Video according to advice which it carries about the level of explicitness or offensiveness of its content. */
	repeated ern_ParentalWarningType parental_warning_type = 19;
/* A Composite containing details of the Date and Place of the Event in which the SoundRecording was re-mastered (usually digitally). This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate remastered_date = 20;
/* A Composite containing details of a Contributor to the Video. */
	repeated ern_DetailedResourceContributor resource_contributor = 21;
/* A Composite containing details of the Date and Place of the Event in which the SoundRecording was published, whether for physical or electronic/online distribution. This is a string with the syntax YYYY[-MM[-DD]]. */
	optional ern_EventDate resource_release_date = 22;
/* A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the SoundRecording. */
	optional ern_RightsAgreementId rights_agreement_id = 23;
/* A Composite containing details of RightsController of Rights in the Video. */
	repeated ern_TypedRightsController rights_controller = 24;
/* The number indicating the order of the Video in a group of Videos in a Release. */
	optional int32 sequence_number = 25;
/* A Composite containing details of a Synopsis of the Video. */
	optional ern_Synopsis synopsis = 26;
/* A Composite containing technical details of the Video. */
	repeated ern_TechnicalVideoDetails technical_video_details = 27;
/* A Territory to which the SoundRecording details apply. Either this Element or ExcludedTerritory shall be present, but not both. The use of ISO TerritoryCodes (or the term 'Worldwide‚Äù) is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.  */
	repeated ern_CurrentTerritoryCode territory_code = 28;
/* A Composite containing details of a Title of the SoundRecording. */
	repeated ern_Title title = 29;
}

/* A Composite containing details of Identifiers of a Video. */
message ern_VideoId {
/* A Composite containing details of the CatalogNumber of the Video. */
	optional ern_CatalogNumber catalog_number = 1;
/* An Identifier of the Video assigned by the Entertainment Identifier Registry Association (EIDR). */
	repeated string e_i_d_r = 2;
/* The ISAN (International Standard Audiovisual Number as defined in ISO 15706) for the Video. An ISAN comprises four blocks of four hexadecimal charaters followed by a check character. DDEX will enforce the syntax [A-F0-9]{12} using XML Schema in the future. */
	optional string i_s_a_n = 3;
/* The ISRC (International Standard Recording Code as defined in  ISO 3901) for the Video. An ISRC comprises four parts: two characters, followed by three alphanumeric characters, then two digits and five digits. DDEX will enforce the syntax [a-zA-Z]{2}[a-zA-Z0-9]{3}[0-9]{7} using XML Schema in the future. */
	optional string i_s_r_c = 4;
/* The Flag indicating whether this Identifier is old and has been replaced by a new one (=true) or not (=false). The Flag may only be set to True when the new Identifier is also provided. If the Flag is not set, this Identifier is deemed to be the current one. */
	optional bool is_replaced = 5;
/* A Composite containing details of a ProprietaryIdentifier of the Video (usually one per society involved in the messaging). */
	repeated ern_ProprietaryId proprietary_id = 6;
/* The V-ISAN (Version Identifier of a International Standard Audiovisual Number as defined in ISO 15706-2) for the Video. A V-ISAN comprises four blocks of four hexadecimal charaters followed by a check character, followed by two further blocks of four hexadecimal characters, followed by a further check character. DDEX will enforce the syntax [A-F0-9]{24} using XML Schema in the future. */
	optional string v_i_s_a_n = 7;
}

/* A Composite containing details of a VideoType. */
message ern_VideoType {
/* The Namespace of the VideoType. This is represented in an XML schema as an XML Attribute. */
	optional string namespace = 1;
/* A UserDefined value of the VideoType. This is represented in an XML schema as an XML Attribute. */
	optional string user_defined_value = 2;
	optional avs_VideoType ext_value = 3;
}

/* A Composite containing details of a WebPage. */
message ern_WebPage {
/* A Composite containing the Name of the WebPage. */
	optional ern_Name page_name = 1;
/* A Composite containing details of the PartyId for a Party owning the WebPage. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators. */
	repeated ern_PartyId party_id = 2;
/* A Password needed to grant a user maintenance access to the WebPage in combination with the UserName. */
	optional string password = 3;
/* A Composite containing details of ReleaseIds. If available, a GRid should always be used. */
	repeated ern_ReleaseId release_id = 4;
/* A URL of the WebPage. */
	optional string u_r_l = 5;
/* An Identifier of a computer user who is granted maintenance access to the WebPage. */
	optional string user_name = 6;
}

/* A Composite containing details of a Web policy. */
message ern_WebPolicy {
/* A Flag indicating whether a MessageRecipient shall block all access to the Release (=true) or not (=false). */
	optional bool access_blocking_requested = 1;
/* A Type of limitation on the access of the UgcSite. This governs whether the content of UgcSites is only accessible to members/friends of the site or not. */
	optional avs_AccessLimitation access_limitation = 2;
/* A Composite containing details of conditions. */
	optional ern_Condition condition = 3;
/* A Flag indicating whether a user is allowed to embed a Release on his website outside the UgcSite (=true) or not (=false). */
	optional bool embedding_allowed = 4;
/* A Flag indicating whether syndication is allowed (=true) or not (=false). */
	optional bool syndication_allowed = 5;
/* A Flag indicating whether a user is allowed to provide a Comment for the Release on the UgcSite (=true) or not (=false). */
	optional bool user_comment_allowed = 6;
/* A Flag indicating whether a user is allowed to provide a rating for the Release on the UgcSite (=true) or not (=false). */
	optional bool user_rating_allowed = 7;
/* A Flag indicating whether a user is allowed to provide a response to a Comment for the Release on the UgcSite (=true) or not (=false). */
	optional bool user_responses_allowed = 8;
}

/* A Composite containing details of one or more Works. */
message ern_WorkList {
/* The Language and script for the Elements of the WorkList as defined in IETF RfC 5646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute. */
	optional string language_and_script_code = 1;
/* A Composite containing details of a MusicalWork contained in a Resource. */
	repeated ern_MusicalWork musical_work = 2;
}

/* SchemaConverter generated enum replacement message type */
message ern_ddexC_CurrentTerritoryCode {
	optional string enum_value = 1;
}

/* SchemaConverter generated base level auto field wrapper */
message ern_ddex_IsoDate {
	optional string auto_value = 1;
}

/* SchemaConverter generated base level auto field wrapper */
message ern_ddex_LocalCollectionAnchorReference {
	optional string auto_value = 1;
}

/* SchemaConverter generated base level auto field wrapper */
message ern_ddex_LocalResourceAnchorReference {
	optional string auto_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_AccessLimitation {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_AdministratingRecordCompanyRole {
	optional string enum_value = 1;
}

message avs_AllTerritoryCode {
	optional string auto_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ArtistRole {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_AudioCodecType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_BinaryDataType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_BusinessContributorRole {
	optional string enum_value = 1;
}

/* SchemaConverter generated base level auto field wrapper */
message avs_CalculationType {
	optional string auto_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_CarrierType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_CdProtectionType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_CharacterType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_CodingType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_CollectionType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_CommercialModelType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_CompilationType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ContainerFormat {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_CreationType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_CreativeContributorRole {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_CueOrigin {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_CueSheetType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_CueUseType {
	optional string enum_value = 1;
}

message avs_CurrencyCode {
	optional string auto_value = 1;
}

message avs_CurrentTerritoryCode {
	optional string auto_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_DataMismatchResponseType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_DataMismatchStatus {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_DataMismatchType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_DdexTerritoryCode {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_DeductionRateType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_DeliveryActionType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_DeliveryMessageType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_DeprecatedCurrencyCode {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_DeprecatedIsoTerritoryCode {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_DigitizationMode {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_DisputeReason {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_DistributionChannelType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_DpidStatus {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_DrmEnforcementType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_DrmPlatformType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_DsrMessageType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_EquipmentType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ErnMessageType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ErncFileStatus {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ErncProposedActionType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ExpressionType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ExternallyLinkedResourceType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_FileStatus {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_FingerprintAlgorithmType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_GoverningAgreementType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_HashSumAlgorithmType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ImageCodecType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ImageType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_InvoiceAvailabilityStatus {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_IsoCurrencyCode {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_IsoLanguageCode {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_IsoTerritoryCode {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_LabelNameType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_LicenseOrClaimRefusalReason {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_LicenseOrClaimRequestUpdateReason {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_LicenseOrClaimUpdateReason {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_LicenseRejectionReason {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_LicenseStatus {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_LicensingProcessStatus {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_LodFileStatus {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_LodProposedActionType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_MembershipType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_MessageActionType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_MessageContentRevenueType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_MessageContextType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_MessageControlType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_MidiType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_MlcMessageType {
	optional string enum_value = 1;
}

message avs_MusicalWorkContributorRole {
	optional string auto_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_MusicalWorkRightsClaimType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_MusicalWorkType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_MwlCaCMessageInBatchType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_MwnMessageType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_NewReleaseMessageStatus {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_OperatingSystemType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_OrderType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_PLineType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ParentalWarningType {
	optional string enum_value = 1;
}

/* SchemaConverter generated base level auto field wrapper */
message avs_PartyRelationshipType {
	optional string auto_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_PercentageType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_PriceInformationType {
	optional string enum_value = 1;
}

/* SchemaConverter generated base level auto field wrapper */
message avs_PriceRangeType {
	optional string auto_value = 1;
}

/* SchemaConverter generated base level auto field wrapper */
message avs_PriceType {
	optional string auto_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_Priority {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ProductType {
	optional string enum_value = 1;
}

/* SchemaConverter generated base level auto field wrapper */
message avs_ProjectContributorRelationshipType {
	optional string auto_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_Purpose {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_RateModificationType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_RatingAgency {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ReasonType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_RecipientRevenueType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_RecordingMode {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_RedeliveryReasonType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ReferenceUnit {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_RelationalRelator {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ReleaseAvailabilityStatus {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ReleaseRelationshipType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ReleaseResourceType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ReleaseType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ReportFormat {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ReportType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_RequestReason {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_RequestedActionType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ResourceContributorRole {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ResourceOmissionReason {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ResourceType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_RevenueSourceType {
	optional string enum_value = 1;
}

/* SchemaConverter generated base level auto field wrapper */
message avs_RightShareRelationshipType {
	optional string auto_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_RightShareType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_RightsClaimPolicyType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_RightsControllerRole {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_RightsControllerType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_RightsCoverage {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_RoyaltyRateCalculationType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_RoyaltyRateType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_SalesReportAvailabilityStatus {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_Sex {
	optional string enum_value = 1;
}

/* SchemaConverter generated base level auto field wrapper */
message avs_SheetMusicCodecType {
	optional string auto_value = 1;
}

/* SchemaConverter generated base level auto field wrapper */
message avs_SheetMusicType {
	optional string auto_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_SoftwareType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_SoundProcessorType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_SoundRecordingType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_SupplyChainStatus {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_TaxScope {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_TaxType {
	optional string enum_value = 1;
}

message avs_TerritoryCode {
	optional string auto_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_TerritoryCodeType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_TerritoryCodeTypeIncludingDeprecatedCodes {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_TextCodecType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_TextType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ThemeType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_TisTerritoryCode {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_TitleType {
	optional string enum_value = 1;
}

/* SchemaConverter generated base level auto field wrapper */
message avs_TrackContributorRelationshipType {
	optional string auto_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_UnitOfBitRate {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_UnitOfConditionValue {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_UnitOfExtent {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_UnitOfFrameRate {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_UnitOfFrequency {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_UpdateIndicator {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_UseType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_UserInterfaceType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_ValueType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_VideoCodecType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_VideoContentType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_VideoDefinitionType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_VideoType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_VisualPerceptionType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_VocalType {
	optional string enum_value = 1;
}

/* SchemaConverter generated enum replacement message type */
message avs_WsMessageStatus {
	optional string enum_value = 1;
}

